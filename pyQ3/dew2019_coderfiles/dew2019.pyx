import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "bhatCO2_dew2019_calc.h":
    const char *bhatCO2_dew2019_identifier();
    const char *bhatCO2_dew2019_name();
    const char *bhatCO2_dew2019_formula();
    const double bhatCO2_dew2019_mw();
    const double *bhatCO2_dew2019_elements();
    double bhatCO2_dew2019_g(double t, double p)
    double bhatCO2_dew2019_dgdt(double t, double p)
    double bhatCO2_dew2019_dgdp(double t, double p)
    double bhatCO2_dew2019_d2gdt2(double t, double p)
    double bhatCO2_dew2019_d2gdtdp(double t, double p)
    double bhatCO2_dew2019_d2gdp2(double t, double p)
    double bhatCO2_dew2019_d3gdt3(double t, double p)
    double bhatCO2_dew2019_d3gdt2dp(double t, double p)
    double bhatCO2_dew2019_d3gdtdp2(double t, double p)
    double bhatCO2_dew2019_d3gdp3(double t, double p)
    double bhatCO2_dew2019_s(double t, double p)
    double bhatCO2_dew2019_v(double t, double p)
    double bhatCO2_dew2019_cv(double t, double p)
    double bhatCO2_dew2019_cp(double t, double p)
    double bhatCO2_dew2019_dcpdt(double t, double p)
    double bhatCO2_dew2019_alpha(double t, double p)
    double bhatCO2_dew2019_beta(double t, double p)
    double bhatCO2_dew2019_K(double t, double p)
    double bhatCO2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_bhatCO2_dew2019_identifier():
    result = <bytes> bhatCO2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_bhatCO2_dew2019_name():
    result = <bytes> bhatCO2_dew2019_name()
    return result.decode('UTF-8')
def cy_bhatCO2_dew2019_formula():
    result = <bytes> bhatCO2_dew2019_formula()
    return result.decode('UTF-8')
def cy_bhatCO2_dew2019_mw():
    result = bhatCO2_dew2019_mw()
    return result
def cy_bhatCO2_dew2019_elements():
    cdef const double *e = bhatCO2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_bhatCO2_dew2019_g(double t, double p):
    result = bhatCO2_dew2019_g(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_dgdt(double t, double p):
    result = bhatCO2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_dgdp(double t, double p):
    result = bhatCO2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_d2gdt2(double t, double p):
    result = bhatCO2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_d2gdtdp(double t, double p):
    result = bhatCO2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_d2gdp2(double t, double p):
    result = bhatCO2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_d3gdt3(double t, double p):
    result = bhatCO2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_d3gdt2dp(double t, double p):
    result = bhatCO2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_d3gdtdp2(double t, double p):
    result = bhatCO2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_d3gdp3(double t, double p):
    result = bhatCO2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_s(double t, double p):
    result = bhatCO2_dew2019_s(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_v(double t, double p):
    result = bhatCO2_dew2019_v(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_cv(double t, double p):
    result = bhatCO2_dew2019_cv(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_cp(double t, double p):
    result = bhatCO2_dew2019_cp(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_dcpdt(double t, double p):
    result = bhatCO2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_alpha(double t, double p):
    result = bhatCO2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_beta(double t, double p):
    result = bhatCO2_dew2019_beta(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_K(double t, double p):
    result = bhatCO2_dew2019_K(<double> t, <double> p)
    return result
def cy_bhatCO2_dew2019_Kp(double t, double p):
    result = bhatCO2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ZNCL3_n_dew2019_calc.h":
    const char *ZNCL3_n_dew2019_identifier();
    const char *ZNCL3_n_dew2019_name();
    const char *ZNCL3_n_dew2019_formula();
    const double ZNCL3_n_dew2019_mw();
    const double *ZNCL3_n_dew2019_elements();
    double ZNCL3_n_dew2019_g(double t, double p)
    double ZNCL3_n_dew2019_dgdt(double t, double p)
    double ZNCL3_n_dew2019_dgdp(double t, double p)
    double ZNCL3_n_dew2019_d2gdt2(double t, double p)
    double ZNCL3_n_dew2019_d2gdtdp(double t, double p)
    double ZNCL3_n_dew2019_d2gdp2(double t, double p)
    double ZNCL3_n_dew2019_d3gdt3(double t, double p)
    double ZNCL3_n_dew2019_d3gdt2dp(double t, double p)
    double ZNCL3_n_dew2019_d3gdtdp2(double t, double p)
    double ZNCL3_n_dew2019_d3gdp3(double t, double p)
    double ZNCL3_n_dew2019_s(double t, double p)
    double ZNCL3_n_dew2019_v(double t, double p)
    double ZNCL3_n_dew2019_cv(double t, double p)
    double ZNCL3_n_dew2019_cp(double t, double p)
    double ZNCL3_n_dew2019_dcpdt(double t, double p)
    double ZNCL3_n_dew2019_alpha(double t, double p)
    double ZNCL3_n_dew2019_beta(double t, double p)
    double ZNCL3_n_dew2019_K(double t, double p)
    double ZNCL3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ZNCL3_n_dew2019_identifier():
    result = <bytes> ZNCL3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_ZNCL3_n_dew2019_name():
    result = <bytes> ZNCL3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_ZNCL3_n_dew2019_formula():
    result = <bytes> ZNCL3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_ZNCL3_n_dew2019_mw():
    result = ZNCL3_n_dew2019_mw()
    return result
def cy_ZNCL3_n_dew2019_elements():
    cdef const double *e = ZNCL3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ZNCL3_n_dew2019_g(double t, double p):
    result = ZNCL3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_dgdt(double t, double p):
    result = ZNCL3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_dgdp(double t, double p):
    result = ZNCL3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_d2gdt2(double t, double p):
    result = ZNCL3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_d2gdtdp(double t, double p):
    result = ZNCL3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_d2gdp2(double t, double p):
    result = ZNCL3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_d3gdt3(double t, double p):
    result = ZNCL3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_d3gdt2dp(double t, double p):
    result = ZNCL3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_d3gdtdp2(double t, double p):
    result = ZNCL3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_d3gdp3(double t, double p):
    result = ZNCL3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_s(double t, double p):
    result = ZNCL3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_v(double t, double p):
    result = ZNCL3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_cv(double t, double p):
    result = ZNCL3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_cp(double t, double p):
    result = ZNCL3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_dcpdt(double t, double p):
    result = ZNCL3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_alpha(double t, double p):
    result = ZNCL3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_beta(double t, double p):
    result = ZNCL3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_K(double t, double p):
    result = ZNCL3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_ZNCL3_n_dew2019_Kp(double t, double p):
    result = ZNCL3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ZNCL2_l_AQ_r__dew2019_calc.h":
    const char *ZNCL2_l_AQ_r__dew2019_identifier();
    const char *ZNCL2_l_AQ_r__dew2019_name();
    const char *ZNCL2_l_AQ_r__dew2019_formula();
    const double ZNCL2_l_AQ_r__dew2019_mw();
    const double *ZNCL2_l_AQ_r__dew2019_elements();
    double ZNCL2_l_AQ_r__dew2019_g(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_dgdt(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_dgdp(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_s(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_v(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_cv(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_cp(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_alpha(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_beta(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_K(double t, double p)
    double ZNCL2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ZNCL2_l_AQ_r__dew2019_identifier():
    result = <bytes> ZNCL2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_ZNCL2_l_AQ_r__dew2019_name():
    result = <bytes> ZNCL2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_ZNCL2_l_AQ_r__dew2019_formula():
    result = <bytes> ZNCL2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_ZNCL2_l_AQ_r__dew2019_mw():
    result = ZNCL2_l_AQ_r__dew2019_mw()
    return result
def cy_ZNCL2_l_AQ_r__dew2019_elements():
    cdef const double *e = ZNCL2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ZNCL2_l_AQ_r__dew2019_g(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_s(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_v(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_cv(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_cp(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_alpha(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_beta(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_K(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_ZNCL2_l_AQ_r__dew2019_Kp(double t, double p):
    result = ZNCL2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ZNCL_p_dew2019_calc.h":
    const char *ZNCL_p_dew2019_identifier();
    const char *ZNCL_p_dew2019_name();
    const char *ZNCL_p_dew2019_formula();
    const double ZNCL_p_dew2019_mw();
    const double *ZNCL_p_dew2019_elements();
    double ZNCL_p_dew2019_g(double t, double p)
    double ZNCL_p_dew2019_dgdt(double t, double p)
    double ZNCL_p_dew2019_dgdp(double t, double p)
    double ZNCL_p_dew2019_d2gdt2(double t, double p)
    double ZNCL_p_dew2019_d2gdtdp(double t, double p)
    double ZNCL_p_dew2019_d2gdp2(double t, double p)
    double ZNCL_p_dew2019_d3gdt3(double t, double p)
    double ZNCL_p_dew2019_d3gdt2dp(double t, double p)
    double ZNCL_p_dew2019_d3gdtdp2(double t, double p)
    double ZNCL_p_dew2019_d3gdp3(double t, double p)
    double ZNCL_p_dew2019_s(double t, double p)
    double ZNCL_p_dew2019_v(double t, double p)
    double ZNCL_p_dew2019_cv(double t, double p)
    double ZNCL_p_dew2019_cp(double t, double p)
    double ZNCL_p_dew2019_dcpdt(double t, double p)
    double ZNCL_p_dew2019_alpha(double t, double p)
    double ZNCL_p_dew2019_beta(double t, double p)
    double ZNCL_p_dew2019_K(double t, double p)
    double ZNCL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ZNCL_p_dew2019_identifier():
    result = <bytes> ZNCL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_ZNCL_p_dew2019_name():
    result = <bytes> ZNCL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_ZNCL_p_dew2019_formula():
    result = <bytes> ZNCL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_ZNCL_p_dew2019_mw():
    result = ZNCL_p_dew2019_mw()
    return result
def cy_ZNCL_p_dew2019_elements():
    cdef const double *e = ZNCL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ZNCL_p_dew2019_g(double t, double p):
    result = ZNCL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_dgdt(double t, double p):
    result = ZNCL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_dgdp(double t, double p):
    result = ZNCL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_d2gdt2(double t, double p):
    result = ZNCL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_d2gdtdp(double t, double p):
    result = ZNCL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_d2gdp2(double t, double p):
    result = ZNCL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_d3gdt3(double t, double p):
    result = ZNCL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_d3gdt2dp(double t, double p):
    result = ZNCL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_d3gdtdp2(double t, double p):
    result = ZNCL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_d3gdp3(double t, double p):
    result = ZNCL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_s(double t, double p):
    result = ZNCL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_v(double t, double p):
    result = ZNCL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_cv(double t, double p):
    result = ZNCL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_cp(double t, double p):
    result = ZNCL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_dcpdt(double t, double p):
    result = ZNCL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_alpha(double t, double p):
    result = ZNCL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_beta(double t, double p):
    result = ZNCL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_K(double t, double p):
    result = ZNCL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_ZNCL_p_dew2019_Kp(double t, double p):
    result = ZNCL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ZN_p2_dew2019_calc.h":
    const char *ZN_p2_dew2019_identifier();
    const char *ZN_p2_dew2019_name();
    const char *ZN_p2_dew2019_formula();
    const double ZN_p2_dew2019_mw();
    const double *ZN_p2_dew2019_elements();
    double ZN_p2_dew2019_g(double t, double p)
    double ZN_p2_dew2019_dgdt(double t, double p)
    double ZN_p2_dew2019_dgdp(double t, double p)
    double ZN_p2_dew2019_d2gdt2(double t, double p)
    double ZN_p2_dew2019_d2gdtdp(double t, double p)
    double ZN_p2_dew2019_d2gdp2(double t, double p)
    double ZN_p2_dew2019_d3gdt3(double t, double p)
    double ZN_p2_dew2019_d3gdt2dp(double t, double p)
    double ZN_p2_dew2019_d3gdtdp2(double t, double p)
    double ZN_p2_dew2019_d3gdp3(double t, double p)
    double ZN_p2_dew2019_s(double t, double p)
    double ZN_p2_dew2019_v(double t, double p)
    double ZN_p2_dew2019_cv(double t, double p)
    double ZN_p2_dew2019_cp(double t, double p)
    double ZN_p2_dew2019_dcpdt(double t, double p)
    double ZN_p2_dew2019_alpha(double t, double p)
    double ZN_p2_dew2019_beta(double t, double p)
    double ZN_p2_dew2019_K(double t, double p)
    double ZN_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ZN_p2_dew2019_identifier():
    result = <bytes> ZN_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_ZN_p2_dew2019_name():
    result = <bytes> ZN_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_ZN_p2_dew2019_formula():
    result = <bytes> ZN_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_ZN_p2_dew2019_mw():
    result = ZN_p2_dew2019_mw()
    return result
def cy_ZN_p2_dew2019_elements():
    cdef const double *e = ZN_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ZN_p2_dew2019_g(double t, double p):
    result = ZN_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_dgdt(double t, double p):
    result = ZN_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_dgdp(double t, double p):
    result = ZN_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_d2gdt2(double t, double p):
    result = ZN_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_d2gdtdp(double t, double p):
    result = ZN_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_d2gdp2(double t, double p):
    result = ZN_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_d3gdt3(double t, double p):
    result = ZN_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_d3gdt2dp(double t, double p):
    result = ZN_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_d3gdtdp2(double t, double p):
    result = ZN_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_d3gdp3(double t, double p):
    result = ZN_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_s(double t, double p):
    result = ZN_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_v(double t, double p):
    result = ZN_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_cv(double t, double p):
    result = ZN_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_cp(double t, double p):
    result = ZN_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_dcpdt(double t, double p):
    result = ZN_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_alpha(double t, double p):
    result = ZN_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_beta(double t, double p):
    result = ZN_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_K(double t, double p):
    result = ZN_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_ZN_p2_dew2019_Kp(double t, double p):
    result = ZN_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "YB_p3_dew2019_calc.h":
    const char *YB_p3_dew2019_identifier();
    const char *YB_p3_dew2019_name();
    const char *YB_p3_dew2019_formula();
    const double YB_p3_dew2019_mw();
    const double *YB_p3_dew2019_elements();
    double YB_p3_dew2019_g(double t, double p)
    double YB_p3_dew2019_dgdt(double t, double p)
    double YB_p3_dew2019_dgdp(double t, double p)
    double YB_p3_dew2019_d2gdt2(double t, double p)
    double YB_p3_dew2019_d2gdtdp(double t, double p)
    double YB_p3_dew2019_d2gdp2(double t, double p)
    double YB_p3_dew2019_d3gdt3(double t, double p)
    double YB_p3_dew2019_d3gdt2dp(double t, double p)
    double YB_p3_dew2019_d3gdtdp2(double t, double p)
    double YB_p3_dew2019_d3gdp3(double t, double p)
    double YB_p3_dew2019_s(double t, double p)
    double YB_p3_dew2019_v(double t, double p)
    double YB_p3_dew2019_cv(double t, double p)
    double YB_p3_dew2019_cp(double t, double p)
    double YB_p3_dew2019_dcpdt(double t, double p)
    double YB_p3_dew2019_alpha(double t, double p)
    double YB_p3_dew2019_beta(double t, double p)
    double YB_p3_dew2019_K(double t, double p)
    double YB_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_YB_p3_dew2019_identifier():
    result = <bytes> YB_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_YB_p3_dew2019_name():
    result = <bytes> YB_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_YB_p3_dew2019_formula():
    result = <bytes> YB_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_YB_p3_dew2019_mw():
    result = YB_p3_dew2019_mw()
    return result
def cy_YB_p3_dew2019_elements():
    cdef const double *e = YB_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_YB_p3_dew2019_g(double t, double p):
    result = YB_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_dgdt(double t, double p):
    result = YB_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_dgdp(double t, double p):
    result = YB_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_d2gdt2(double t, double p):
    result = YB_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_d2gdtdp(double t, double p):
    result = YB_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_d2gdp2(double t, double p):
    result = YB_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_d3gdt3(double t, double p):
    result = YB_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_d3gdt2dp(double t, double p):
    result = YB_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_d3gdtdp2(double t, double p):
    result = YB_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_d3gdp3(double t, double p):
    result = YB_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_s(double t, double p):
    result = YB_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_v(double t, double p):
    result = YB_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_cv(double t, double p):
    result = YB_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_cp(double t, double p):
    result = YB_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_dcpdt(double t, double p):
    result = YB_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_alpha(double t, double p):
    result = YB_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_beta(double t, double p):
    result = YB_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_K(double t, double p):
    result = YB_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_YB_p3_dew2019_Kp(double t, double p):
    result = YB_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "YB_p2_dew2019_calc.h":
    const char *YB_p2_dew2019_identifier();
    const char *YB_p2_dew2019_name();
    const char *YB_p2_dew2019_formula();
    const double YB_p2_dew2019_mw();
    const double *YB_p2_dew2019_elements();
    double YB_p2_dew2019_g(double t, double p)
    double YB_p2_dew2019_dgdt(double t, double p)
    double YB_p2_dew2019_dgdp(double t, double p)
    double YB_p2_dew2019_d2gdt2(double t, double p)
    double YB_p2_dew2019_d2gdtdp(double t, double p)
    double YB_p2_dew2019_d2gdp2(double t, double p)
    double YB_p2_dew2019_d3gdt3(double t, double p)
    double YB_p2_dew2019_d3gdt2dp(double t, double p)
    double YB_p2_dew2019_d3gdtdp2(double t, double p)
    double YB_p2_dew2019_d3gdp3(double t, double p)
    double YB_p2_dew2019_s(double t, double p)
    double YB_p2_dew2019_v(double t, double p)
    double YB_p2_dew2019_cv(double t, double p)
    double YB_p2_dew2019_cp(double t, double p)
    double YB_p2_dew2019_dcpdt(double t, double p)
    double YB_p2_dew2019_alpha(double t, double p)
    double YB_p2_dew2019_beta(double t, double p)
    double YB_p2_dew2019_K(double t, double p)
    double YB_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_YB_p2_dew2019_identifier():
    result = <bytes> YB_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_YB_p2_dew2019_name():
    result = <bytes> YB_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_YB_p2_dew2019_formula():
    result = <bytes> YB_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_YB_p2_dew2019_mw():
    result = YB_p2_dew2019_mw()
    return result
def cy_YB_p2_dew2019_elements():
    cdef const double *e = YB_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_YB_p2_dew2019_g(double t, double p):
    result = YB_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_dgdt(double t, double p):
    result = YB_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_dgdp(double t, double p):
    result = YB_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_d2gdt2(double t, double p):
    result = YB_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_d2gdtdp(double t, double p):
    result = YB_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_d2gdp2(double t, double p):
    result = YB_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_d3gdt3(double t, double p):
    result = YB_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_d3gdt2dp(double t, double p):
    result = YB_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_d3gdtdp2(double t, double p):
    result = YB_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_d3gdp3(double t, double p):
    result = YB_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_s(double t, double p):
    result = YB_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_v(double t, double p):
    result = YB_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_cv(double t, double p):
    result = YB_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_cp(double t, double p):
    result = YB_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_dcpdt(double t, double p):
    result = YB_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_alpha(double t, double p):
    result = YB_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_beta(double t, double p):
    result = YB_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_K(double t, double p):
    result = YB_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_YB_p2_dew2019_Kp(double t, double p):
    result = YB_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "Y_p3_dew2019_calc.h":
    const char *Y_p3_dew2019_identifier();
    const char *Y_p3_dew2019_name();
    const char *Y_p3_dew2019_formula();
    const double Y_p3_dew2019_mw();
    const double *Y_p3_dew2019_elements();
    double Y_p3_dew2019_g(double t, double p)
    double Y_p3_dew2019_dgdt(double t, double p)
    double Y_p3_dew2019_dgdp(double t, double p)
    double Y_p3_dew2019_d2gdt2(double t, double p)
    double Y_p3_dew2019_d2gdtdp(double t, double p)
    double Y_p3_dew2019_d2gdp2(double t, double p)
    double Y_p3_dew2019_d3gdt3(double t, double p)
    double Y_p3_dew2019_d3gdt2dp(double t, double p)
    double Y_p3_dew2019_d3gdtdp2(double t, double p)
    double Y_p3_dew2019_d3gdp3(double t, double p)
    double Y_p3_dew2019_s(double t, double p)
    double Y_p3_dew2019_v(double t, double p)
    double Y_p3_dew2019_cv(double t, double p)
    double Y_p3_dew2019_cp(double t, double p)
    double Y_p3_dew2019_dcpdt(double t, double p)
    double Y_p3_dew2019_alpha(double t, double p)
    double Y_p3_dew2019_beta(double t, double p)
    double Y_p3_dew2019_K(double t, double p)
    double Y_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_Y_p3_dew2019_identifier():
    result = <bytes> Y_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_Y_p3_dew2019_name():
    result = <bytes> Y_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_Y_p3_dew2019_formula():
    result = <bytes> Y_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_Y_p3_dew2019_mw():
    result = Y_p3_dew2019_mw()
    return result
def cy_Y_p3_dew2019_elements():
    cdef const double *e = Y_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_Y_p3_dew2019_g(double t, double p):
    result = Y_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_dgdt(double t, double p):
    result = Y_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_dgdp(double t, double p):
    result = Y_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_d2gdt2(double t, double p):
    result = Y_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_d2gdtdp(double t, double p):
    result = Y_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_d2gdp2(double t, double p):
    result = Y_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_d3gdt3(double t, double p):
    result = Y_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_d3gdt2dp(double t, double p):
    result = Y_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_d3gdtdp2(double t, double p):
    result = Y_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_d3gdp3(double t, double p):
    result = Y_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_s(double t, double p):
    result = Y_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_v(double t, double p):
    result = Y_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_cv(double t, double p):
    result = Y_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_cp(double t, double p):
    result = Y_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_dcpdt(double t, double p):
    result = Y_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_alpha(double t, double p):
    result = Y_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_beta(double t, double p):
    result = Y_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_K(double t, double p):
    result = Y_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_Y_p3_dew2019_Kp(double t, double p):
    result = Y_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "XE_l_AQ_r__dew2019_calc.h":
    const char *XE_l_AQ_r__dew2019_identifier();
    const char *XE_l_AQ_r__dew2019_name();
    const char *XE_l_AQ_r__dew2019_formula();
    const double XE_l_AQ_r__dew2019_mw();
    const double *XE_l_AQ_r__dew2019_elements();
    double XE_l_AQ_r__dew2019_g(double t, double p)
    double XE_l_AQ_r__dew2019_dgdt(double t, double p)
    double XE_l_AQ_r__dew2019_dgdp(double t, double p)
    double XE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double XE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double XE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double XE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double XE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double XE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double XE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double XE_l_AQ_r__dew2019_s(double t, double p)
    double XE_l_AQ_r__dew2019_v(double t, double p)
    double XE_l_AQ_r__dew2019_cv(double t, double p)
    double XE_l_AQ_r__dew2019_cp(double t, double p)
    double XE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double XE_l_AQ_r__dew2019_alpha(double t, double p)
    double XE_l_AQ_r__dew2019_beta(double t, double p)
    double XE_l_AQ_r__dew2019_K(double t, double p)
    double XE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_XE_l_AQ_r__dew2019_identifier():
    result = <bytes> XE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_XE_l_AQ_r__dew2019_name():
    result = <bytes> XE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_XE_l_AQ_r__dew2019_formula():
    result = <bytes> XE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_XE_l_AQ_r__dew2019_mw():
    result = XE_l_AQ_r__dew2019_mw()
    return result
def cy_XE_l_AQ_r__dew2019_elements():
    cdef const double *e = XE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_XE_l_AQ_r__dew2019_g(double t, double p):
    result = XE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = XE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = XE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = XE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = XE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = XE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = XE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = XE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = XE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = XE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_s(double t, double p):
    result = XE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_v(double t, double p):
    result = XE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_cv(double t, double p):
    result = XE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_cp(double t, double p):
    result = XE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = XE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_alpha(double t, double p):
    result = XE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_beta(double t, double p):
    result = XE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_K(double t, double p):
    result = XE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_XE_l_AQ_r__dew2019_Kp(double t, double p):
    result = XE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "WO4_n2_dew2019_calc.h":
    const char *WO4_n2_dew2019_identifier();
    const char *WO4_n2_dew2019_name();
    const char *WO4_n2_dew2019_formula();
    const double WO4_n2_dew2019_mw();
    const double *WO4_n2_dew2019_elements();
    double WO4_n2_dew2019_g(double t, double p)
    double WO4_n2_dew2019_dgdt(double t, double p)
    double WO4_n2_dew2019_dgdp(double t, double p)
    double WO4_n2_dew2019_d2gdt2(double t, double p)
    double WO4_n2_dew2019_d2gdtdp(double t, double p)
    double WO4_n2_dew2019_d2gdp2(double t, double p)
    double WO4_n2_dew2019_d3gdt3(double t, double p)
    double WO4_n2_dew2019_d3gdt2dp(double t, double p)
    double WO4_n2_dew2019_d3gdtdp2(double t, double p)
    double WO4_n2_dew2019_d3gdp3(double t, double p)
    double WO4_n2_dew2019_s(double t, double p)
    double WO4_n2_dew2019_v(double t, double p)
    double WO4_n2_dew2019_cv(double t, double p)
    double WO4_n2_dew2019_cp(double t, double p)
    double WO4_n2_dew2019_dcpdt(double t, double p)
    double WO4_n2_dew2019_alpha(double t, double p)
    double WO4_n2_dew2019_beta(double t, double p)
    double WO4_n2_dew2019_K(double t, double p)
    double WO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_WO4_n2_dew2019_identifier():
    result = <bytes> WO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_WO4_n2_dew2019_name():
    result = <bytes> WO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_WO4_n2_dew2019_formula():
    result = <bytes> WO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_WO4_n2_dew2019_mw():
    result = WO4_n2_dew2019_mw()
    return result
def cy_WO4_n2_dew2019_elements():
    cdef const double *e = WO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_WO4_n2_dew2019_g(double t, double p):
    result = WO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_dgdt(double t, double p):
    result = WO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_dgdp(double t, double p):
    result = WO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_d2gdt2(double t, double p):
    result = WO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_d2gdtdp(double t, double p):
    result = WO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_d2gdp2(double t, double p):
    result = WO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_d3gdt3(double t, double p):
    result = WO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = WO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = WO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_d3gdp3(double t, double p):
    result = WO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_s(double t, double p):
    result = WO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_v(double t, double p):
    result = WO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_cv(double t, double p):
    result = WO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_cp(double t, double p):
    result = WO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_dcpdt(double t, double p):
    result = WO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_alpha(double t, double p):
    result = WO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_beta(double t, double p):
    result = WO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_K(double t, double p):
    result = WO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_WO4_n2_dew2019_Kp(double t, double p):
    result = WO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "VO2_p_dew2019_calc.h":
    const char *VO2_p_dew2019_identifier();
    const char *VO2_p_dew2019_name();
    const char *VO2_p_dew2019_formula();
    const double VO2_p_dew2019_mw();
    const double *VO2_p_dew2019_elements();
    double VO2_p_dew2019_g(double t, double p)
    double VO2_p_dew2019_dgdt(double t, double p)
    double VO2_p_dew2019_dgdp(double t, double p)
    double VO2_p_dew2019_d2gdt2(double t, double p)
    double VO2_p_dew2019_d2gdtdp(double t, double p)
    double VO2_p_dew2019_d2gdp2(double t, double p)
    double VO2_p_dew2019_d3gdt3(double t, double p)
    double VO2_p_dew2019_d3gdt2dp(double t, double p)
    double VO2_p_dew2019_d3gdtdp2(double t, double p)
    double VO2_p_dew2019_d3gdp3(double t, double p)
    double VO2_p_dew2019_s(double t, double p)
    double VO2_p_dew2019_v(double t, double p)
    double VO2_p_dew2019_cv(double t, double p)
    double VO2_p_dew2019_cp(double t, double p)
    double VO2_p_dew2019_dcpdt(double t, double p)
    double VO2_p_dew2019_alpha(double t, double p)
    double VO2_p_dew2019_beta(double t, double p)
    double VO2_p_dew2019_K(double t, double p)
    double VO2_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_VO2_p_dew2019_identifier():
    result = <bytes> VO2_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_VO2_p_dew2019_name():
    result = <bytes> VO2_p_dew2019_name()
    return result.decode('UTF-8')
def cy_VO2_p_dew2019_formula():
    result = <bytes> VO2_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_VO2_p_dew2019_mw():
    result = VO2_p_dew2019_mw()
    return result
def cy_VO2_p_dew2019_elements():
    cdef const double *e = VO2_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_VO2_p_dew2019_g(double t, double p):
    result = VO2_p_dew2019_g(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_dgdt(double t, double p):
    result = VO2_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_dgdp(double t, double p):
    result = VO2_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_d2gdt2(double t, double p):
    result = VO2_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_d2gdtdp(double t, double p):
    result = VO2_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_d2gdp2(double t, double p):
    result = VO2_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_d3gdt3(double t, double p):
    result = VO2_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_d3gdt2dp(double t, double p):
    result = VO2_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_d3gdtdp2(double t, double p):
    result = VO2_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_d3gdp3(double t, double p):
    result = VO2_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_s(double t, double p):
    result = VO2_p_dew2019_s(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_v(double t, double p):
    result = VO2_p_dew2019_v(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_cv(double t, double p):
    result = VO2_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_cp(double t, double p):
    result = VO2_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_dcpdt(double t, double p):
    result = VO2_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_alpha(double t, double p):
    result = VO2_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_beta(double t, double p):
    result = VO2_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_K(double t, double p):
    result = VO2_p_dew2019_K(<double> t, <double> p)
    return result
def cy_VO2_p_dew2019_Kp(double t, double p):
    result = VO2_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "VO_p2_dew2019_calc.h":
    const char *VO_p2_dew2019_identifier();
    const char *VO_p2_dew2019_name();
    const char *VO_p2_dew2019_formula();
    const double VO_p2_dew2019_mw();
    const double *VO_p2_dew2019_elements();
    double VO_p2_dew2019_g(double t, double p)
    double VO_p2_dew2019_dgdt(double t, double p)
    double VO_p2_dew2019_dgdp(double t, double p)
    double VO_p2_dew2019_d2gdt2(double t, double p)
    double VO_p2_dew2019_d2gdtdp(double t, double p)
    double VO_p2_dew2019_d2gdp2(double t, double p)
    double VO_p2_dew2019_d3gdt3(double t, double p)
    double VO_p2_dew2019_d3gdt2dp(double t, double p)
    double VO_p2_dew2019_d3gdtdp2(double t, double p)
    double VO_p2_dew2019_d3gdp3(double t, double p)
    double VO_p2_dew2019_s(double t, double p)
    double VO_p2_dew2019_v(double t, double p)
    double VO_p2_dew2019_cv(double t, double p)
    double VO_p2_dew2019_cp(double t, double p)
    double VO_p2_dew2019_dcpdt(double t, double p)
    double VO_p2_dew2019_alpha(double t, double p)
    double VO_p2_dew2019_beta(double t, double p)
    double VO_p2_dew2019_K(double t, double p)
    double VO_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_VO_p2_dew2019_identifier():
    result = <bytes> VO_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_VO_p2_dew2019_name():
    result = <bytes> VO_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_VO_p2_dew2019_formula():
    result = <bytes> VO_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_VO_p2_dew2019_mw():
    result = VO_p2_dew2019_mw()
    return result
def cy_VO_p2_dew2019_elements():
    cdef const double *e = VO_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_VO_p2_dew2019_g(double t, double p):
    result = VO_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_dgdt(double t, double p):
    result = VO_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_dgdp(double t, double p):
    result = VO_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_d2gdt2(double t, double p):
    result = VO_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_d2gdtdp(double t, double p):
    result = VO_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_d2gdp2(double t, double p):
    result = VO_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_d3gdt3(double t, double p):
    result = VO_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_d3gdt2dp(double t, double p):
    result = VO_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_d3gdtdp2(double t, double p):
    result = VO_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_d3gdp3(double t, double p):
    result = VO_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_s(double t, double p):
    result = VO_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_v(double t, double p):
    result = VO_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_cv(double t, double p):
    result = VO_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_cp(double t, double p):
    result = VO_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_dcpdt(double t, double p):
    result = VO_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_alpha(double t, double p):
    result = VO_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_beta(double t, double p):
    result = VO_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_K(double t, double p):
    result = VO_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_VO_p2_dew2019_Kp(double t, double p):
    result = VO_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "UREA_l_AQ_r__dew2019_calc.h":
    const char *UREA_l_AQ_r__dew2019_identifier();
    const char *UREA_l_AQ_r__dew2019_name();
    const char *UREA_l_AQ_r__dew2019_formula();
    const double UREA_l_AQ_r__dew2019_mw();
    const double *UREA_l_AQ_r__dew2019_elements();
    double UREA_l_AQ_r__dew2019_g(double t, double p)
    double UREA_l_AQ_r__dew2019_dgdt(double t, double p)
    double UREA_l_AQ_r__dew2019_dgdp(double t, double p)
    double UREA_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double UREA_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double UREA_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double UREA_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double UREA_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double UREA_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double UREA_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double UREA_l_AQ_r__dew2019_s(double t, double p)
    double UREA_l_AQ_r__dew2019_v(double t, double p)
    double UREA_l_AQ_r__dew2019_cv(double t, double p)
    double UREA_l_AQ_r__dew2019_cp(double t, double p)
    double UREA_l_AQ_r__dew2019_dcpdt(double t, double p)
    double UREA_l_AQ_r__dew2019_alpha(double t, double p)
    double UREA_l_AQ_r__dew2019_beta(double t, double p)
    double UREA_l_AQ_r__dew2019_K(double t, double p)
    double UREA_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_UREA_l_AQ_r__dew2019_identifier():
    result = <bytes> UREA_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_UREA_l_AQ_r__dew2019_name():
    result = <bytes> UREA_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_UREA_l_AQ_r__dew2019_formula():
    result = <bytes> UREA_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_UREA_l_AQ_r__dew2019_mw():
    result = UREA_l_AQ_r__dew2019_mw()
    return result
def cy_UREA_l_AQ_r__dew2019_elements():
    cdef const double *e = UREA_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_UREA_l_AQ_r__dew2019_g(double t, double p):
    result = UREA_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_dgdt(double t, double p):
    result = UREA_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_dgdp(double t, double p):
    result = UREA_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = UREA_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = UREA_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = UREA_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = UREA_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = UREA_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = UREA_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = UREA_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_s(double t, double p):
    result = UREA_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_v(double t, double p):
    result = UREA_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_cv(double t, double p):
    result = UREA_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_cp(double t, double p):
    result = UREA_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = UREA_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_alpha(double t, double p):
    result = UREA_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_beta(double t, double p):
    result = UREA_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_K(double t, double p):
    result = UREA_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_UREA_l_AQ_r__dew2019_Kp(double t, double p):
    result = UREA_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "UO2_p2_dew2019_calc.h":
    const char *UO2_p2_dew2019_identifier();
    const char *UO2_p2_dew2019_name();
    const char *UO2_p2_dew2019_formula();
    const double UO2_p2_dew2019_mw();
    const double *UO2_p2_dew2019_elements();
    double UO2_p2_dew2019_g(double t, double p)
    double UO2_p2_dew2019_dgdt(double t, double p)
    double UO2_p2_dew2019_dgdp(double t, double p)
    double UO2_p2_dew2019_d2gdt2(double t, double p)
    double UO2_p2_dew2019_d2gdtdp(double t, double p)
    double UO2_p2_dew2019_d2gdp2(double t, double p)
    double UO2_p2_dew2019_d3gdt3(double t, double p)
    double UO2_p2_dew2019_d3gdt2dp(double t, double p)
    double UO2_p2_dew2019_d3gdtdp2(double t, double p)
    double UO2_p2_dew2019_d3gdp3(double t, double p)
    double UO2_p2_dew2019_s(double t, double p)
    double UO2_p2_dew2019_v(double t, double p)
    double UO2_p2_dew2019_cv(double t, double p)
    double UO2_p2_dew2019_cp(double t, double p)
    double UO2_p2_dew2019_dcpdt(double t, double p)
    double UO2_p2_dew2019_alpha(double t, double p)
    double UO2_p2_dew2019_beta(double t, double p)
    double UO2_p2_dew2019_K(double t, double p)
    double UO2_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_UO2_p2_dew2019_identifier():
    result = <bytes> UO2_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_UO2_p2_dew2019_name():
    result = <bytes> UO2_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_UO2_p2_dew2019_formula():
    result = <bytes> UO2_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_UO2_p2_dew2019_mw():
    result = UO2_p2_dew2019_mw()
    return result
def cy_UO2_p2_dew2019_elements():
    cdef const double *e = UO2_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_UO2_p2_dew2019_g(double t, double p):
    result = UO2_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_dgdt(double t, double p):
    result = UO2_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_dgdp(double t, double p):
    result = UO2_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_d2gdt2(double t, double p):
    result = UO2_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_d2gdtdp(double t, double p):
    result = UO2_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_d2gdp2(double t, double p):
    result = UO2_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_d3gdt3(double t, double p):
    result = UO2_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_d3gdt2dp(double t, double p):
    result = UO2_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_d3gdtdp2(double t, double p):
    result = UO2_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_d3gdp3(double t, double p):
    result = UO2_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_s(double t, double p):
    result = UO2_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_v(double t, double p):
    result = UO2_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_cv(double t, double p):
    result = UO2_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_cp(double t, double p):
    result = UO2_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_dcpdt(double t, double p):
    result = UO2_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_alpha(double t, double p):
    result = UO2_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_beta(double t, double p):
    result = UO2_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_K(double t, double p):
    result = UO2_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_UO2_p2_dew2019_Kp(double t, double p):
    result = UO2_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "U_p4_dew2019_calc.h":
    const char *U_p4_dew2019_identifier();
    const char *U_p4_dew2019_name();
    const char *U_p4_dew2019_formula();
    const double U_p4_dew2019_mw();
    const double *U_p4_dew2019_elements();
    double U_p4_dew2019_g(double t, double p)
    double U_p4_dew2019_dgdt(double t, double p)
    double U_p4_dew2019_dgdp(double t, double p)
    double U_p4_dew2019_d2gdt2(double t, double p)
    double U_p4_dew2019_d2gdtdp(double t, double p)
    double U_p4_dew2019_d2gdp2(double t, double p)
    double U_p4_dew2019_d3gdt3(double t, double p)
    double U_p4_dew2019_d3gdt2dp(double t, double p)
    double U_p4_dew2019_d3gdtdp2(double t, double p)
    double U_p4_dew2019_d3gdp3(double t, double p)
    double U_p4_dew2019_s(double t, double p)
    double U_p4_dew2019_v(double t, double p)
    double U_p4_dew2019_cv(double t, double p)
    double U_p4_dew2019_cp(double t, double p)
    double U_p4_dew2019_dcpdt(double t, double p)
    double U_p4_dew2019_alpha(double t, double p)
    double U_p4_dew2019_beta(double t, double p)
    double U_p4_dew2019_K(double t, double p)
    double U_p4_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_U_p4_dew2019_identifier():
    result = <bytes> U_p4_dew2019_identifier()
    return result.decode('UTF-8')
def cy_U_p4_dew2019_name():
    result = <bytes> U_p4_dew2019_name()
    return result.decode('UTF-8')
def cy_U_p4_dew2019_formula():
    result = <bytes> U_p4_dew2019_formula()
    return result.decode('UTF-8')
def cy_U_p4_dew2019_mw():
    result = U_p4_dew2019_mw()
    return result
def cy_U_p4_dew2019_elements():
    cdef const double *e = U_p4_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_U_p4_dew2019_g(double t, double p):
    result = U_p4_dew2019_g(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_dgdt(double t, double p):
    result = U_p4_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_dgdp(double t, double p):
    result = U_p4_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_d2gdt2(double t, double p):
    result = U_p4_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_d2gdtdp(double t, double p):
    result = U_p4_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_d2gdp2(double t, double p):
    result = U_p4_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_d3gdt3(double t, double p):
    result = U_p4_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_d3gdt2dp(double t, double p):
    result = U_p4_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_d3gdtdp2(double t, double p):
    result = U_p4_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_d3gdp3(double t, double p):
    result = U_p4_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_s(double t, double p):
    result = U_p4_dew2019_s(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_v(double t, double p):
    result = U_p4_dew2019_v(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_cv(double t, double p):
    result = U_p4_dew2019_cv(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_cp(double t, double p):
    result = U_p4_dew2019_cp(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_dcpdt(double t, double p):
    result = U_p4_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_alpha(double t, double p):
    result = U_p4_dew2019_alpha(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_beta(double t, double p):
    result = U_p4_dew2019_beta(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_K(double t, double p):
    result = U_p4_dew2019_K(<double> t, <double> p)
    return result
def cy_U_p4_dew2019_Kp(double t, double p):
    result = U_p4_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "TOLUENE_l_AQ_r__dew2019_calc.h":
    const char *TOLUENE_l_AQ_r__dew2019_identifier();
    const char *TOLUENE_l_AQ_r__dew2019_name();
    const char *TOLUENE_l_AQ_r__dew2019_formula();
    const double TOLUENE_l_AQ_r__dew2019_mw();
    const double *TOLUENE_l_AQ_r__dew2019_elements();
    double TOLUENE_l_AQ_r__dew2019_g(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_dgdt(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_dgdp(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_s(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_v(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_cv(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_cp(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_alpha(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_beta(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_K(double t, double p)
    double TOLUENE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_TOLUENE_l_AQ_r__dew2019_identifier():
    result = <bytes> TOLUENE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_TOLUENE_l_AQ_r__dew2019_name():
    result = <bytes> TOLUENE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_TOLUENE_l_AQ_r__dew2019_formula():
    result = <bytes> TOLUENE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_TOLUENE_l_AQ_r__dew2019_mw():
    result = TOLUENE_l_AQ_r__dew2019_mw()
    return result
def cy_TOLUENE_l_AQ_r__dew2019_elements():
    cdef const double *e = TOLUENE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_TOLUENE_l_AQ_r__dew2019_g(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_s(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_v(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_cv(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_cp(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_alpha(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_beta(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_K(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_TOLUENE_l_AQ_r__dew2019_Kp(double t, double p):
    result = TOLUENE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "TM_p3_dew2019_calc.h":
    const char *TM_p3_dew2019_identifier();
    const char *TM_p3_dew2019_name();
    const char *TM_p3_dew2019_formula();
    const double TM_p3_dew2019_mw();
    const double *TM_p3_dew2019_elements();
    double TM_p3_dew2019_g(double t, double p)
    double TM_p3_dew2019_dgdt(double t, double p)
    double TM_p3_dew2019_dgdp(double t, double p)
    double TM_p3_dew2019_d2gdt2(double t, double p)
    double TM_p3_dew2019_d2gdtdp(double t, double p)
    double TM_p3_dew2019_d2gdp2(double t, double p)
    double TM_p3_dew2019_d3gdt3(double t, double p)
    double TM_p3_dew2019_d3gdt2dp(double t, double p)
    double TM_p3_dew2019_d3gdtdp2(double t, double p)
    double TM_p3_dew2019_d3gdp3(double t, double p)
    double TM_p3_dew2019_s(double t, double p)
    double TM_p3_dew2019_v(double t, double p)
    double TM_p3_dew2019_cv(double t, double p)
    double TM_p3_dew2019_cp(double t, double p)
    double TM_p3_dew2019_dcpdt(double t, double p)
    double TM_p3_dew2019_alpha(double t, double p)
    double TM_p3_dew2019_beta(double t, double p)
    double TM_p3_dew2019_K(double t, double p)
    double TM_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_TM_p3_dew2019_identifier():
    result = <bytes> TM_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_TM_p3_dew2019_name():
    result = <bytes> TM_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_TM_p3_dew2019_formula():
    result = <bytes> TM_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_TM_p3_dew2019_mw():
    result = TM_p3_dew2019_mw()
    return result
def cy_TM_p3_dew2019_elements():
    cdef const double *e = TM_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_TM_p3_dew2019_g(double t, double p):
    result = TM_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_dgdt(double t, double p):
    result = TM_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_dgdp(double t, double p):
    result = TM_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_d2gdt2(double t, double p):
    result = TM_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_d2gdtdp(double t, double p):
    result = TM_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_d2gdp2(double t, double p):
    result = TM_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_d3gdt3(double t, double p):
    result = TM_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_d3gdt2dp(double t, double p):
    result = TM_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_d3gdtdp2(double t, double p):
    result = TM_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_d3gdp3(double t, double p):
    result = TM_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_s(double t, double p):
    result = TM_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_v(double t, double p):
    result = TM_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_cv(double t, double p):
    result = TM_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_cp(double t, double p):
    result = TM_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_dcpdt(double t, double p):
    result = TM_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_alpha(double t, double p):
    result = TM_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_beta(double t, double p):
    result = TM_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_K(double t, double p):
    result = TM_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_TM_p3_dew2019_Kp(double t, double p):
    result = TM_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "TL_p3_dew2019_calc.h":
    const char *TL_p3_dew2019_identifier();
    const char *TL_p3_dew2019_name();
    const char *TL_p3_dew2019_formula();
    const double TL_p3_dew2019_mw();
    const double *TL_p3_dew2019_elements();
    double TL_p3_dew2019_g(double t, double p)
    double TL_p3_dew2019_dgdt(double t, double p)
    double TL_p3_dew2019_dgdp(double t, double p)
    double TL_p3_dew2019_d2gdt2(double t, double p)
    double TL_p3_dew2019_d2gdtdp(double t, double p)
    double TL_p3_dew2019_d2gdp2(double t, double p)
    double TL_p3_dew2019_d3gdt3(double t, double p)
    double TL_p3_dew2019_d3gdt2dp(double t, double p)
    double TL_p3_dew2019_d3gdtdp2(double t, double p)
    double TL_p3_dew2019_d3gdp3(double t, double p)
    double TL_p3_dew2019_s(double t, double p)
    double TL_p3_dew2019_v(double t, double p)
    double TL_p3_dew2019_cv(double t, double p)
    double TL_p3_dew2019_cp(double t, double p)
    double TL_p3_dew2019_dcpdt(double t, double p)
    double TL_p3_dew2019_alpha(double t, double p)
    double TL_p3_dew2019_beta(double t, double p)
    double TL_p3_dew2019_K(double t, double p)
    double TL_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_TL_p3_dew2019_identifier():
    result = <bytes> TL_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_TL_p3_dew2019_name():
    result = <bytes> TL_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_TL_p3_dew2019_formula():
    result = <bytes> TL_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_TL_p3_dew2019_mw():
    result = TL_p3_dew2019_mw()
    return result
def cy_TL_p3_dew2019_elements():
    cdef const double *e = TL_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_TL_p3_dew2019_g(double t, double p):
    result = TL_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_dgdt(double t, double p):
    result = TL_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_dgdp(double t, double p):
    result = TL_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_d2gdt2(double t, double p):
    result = TL_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_d2gdtdp(double t, double p):
    result = TL_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_d2gdp2(double t, double p):
    result = TL_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_d3gdt3(double t, double p):
    result = TL_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_d3gdt2dp(double t, double p):
    result = TL_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_d3gdtdp2(double t, double p):
    result = TL_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_d3gdp3(double t, double p):
    result = TL_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_s(double t, double p):
    result = TL_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_v(double t, double p):
    result = TL_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_cv(double t, double p):
    result = TL_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_cp(double t, double p):
    result = TL_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_dcpdt(double t, double p):
    result = TL_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_alpha(double t, double p):
    result = TL_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_beta(double t, double p):
    result = TL_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_K(double t, double p):
    result = TL_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_TL_p3_dew2019_Kp(double t, double p):
    result = TL_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "TL_p_dew2019_calc.h":
    const char *TL_p_dew2019_identifier();
    const char *TL_p_dew2019_name();
    const char *TL_p_dew2019_formula();
    const double TL_p_dew2019_mw();
    const double *TL_p_dew2019_elements();
    double TL_p_dew2019_g(double t, double p)
    double TL_p_dew2019_dgdt(double t, double p)
    double TL_p_dew2019_dgdp(double t, double p)
    double TL_p_dew2019_d2gdt2(double t, double p)
    double TL_p_dew2019_d2gdtdp(double t, double p)
    double TL_p_dew2019_d2gdp2(double t, double p)
    double TL_p_dew2019_d3gdt3(double t, double p)
    double TL_p_dew2019_d3gdt2dp(double t, double p)
    double TL_p_dew2019_d3gdtdp2(double t, double p)
    double TL_p_dew2019_d3gdp3(double t, double p)
    double TL_p_dew2019_s(double t, double p)
    double TL_p_dew2019_v(double t, double p)
    double TL_p_dew2019_cv(double t, double p)
    double TL_p_dew2019_cp(double t, double p)
    double TL_p_dew2019_dcpdt(double t, double p)
    double TL_p_dew2019_alpha(double t, double p)
    double TL_p_dew2019_beta(double t, double p)
    double TL_p_dew2019_K(double t, double p)
    double TL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_TL_p_dew2019_identifier():
    result = <bytes> TL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_TL_p_dew2019_name():
    result = <bytes> TL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_TL_p_dew2019_formula():
    result = <bytes> TL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_TL_p_dew2019_mw():
    result = TL_p_dew2019_mw()
    return result
def cy_TL_p_dew2019_elements():
    cdef const double *e = TL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_TL_p_dew2019_g(double t, double p):
    result = TL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_dgdt(double t, double p):
    result = TL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_dgdp(double t, double p):
    result = TL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_d2gdt2(double t, double p):
    result = TL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_d2gdtdp(double t, double p):
    result = TL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_d2gdp2(double t, double p):
    result = TL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_d3gdt3(double t, double p):
    result = TL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_d3gdt2dp(double t, double p):
    result = TL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_d3gdtdp2(double t, double p):
    result = TL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_d3gdp3(double t, double p):
    result = TL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_s(double t, double p):
    result = TL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_v(double t, double p):
    result = TL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_cv(double t, double p):
    result = TL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_cp(double t, double p):
    result = TL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_dcpdt(double t, double p):
    result = TL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_alpha(double t, double p):
    result = TL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_beta(double t, double p):
    result = TL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_K(double t, double p):
    result = TL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_TL_p_dew2019_Kp(double t, double p):
    result = TL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "TB_p3_dew2019_calc.h":
    const char *TB_p3_dew2019_identifier();
    const char *TB_p3_dew2019_name();
    const char *TB_p3_dew2019_formula();
    const double TB_p3_dew2019_mw();
    const double *TB_p3_dew2019_elements();
    double TB_p3_dew2019_g(double t, double p)
    double TB_p3_dew2019_dgdt(double t, double p)
    double TB_p3_dew2019_dgdp(double t, double p)
    double TB_p3_dew2019_d2gdt2(double t, double p)
    double TB_p3_dew2019_d2gdtdp(double t, double p)
    double TB_p3_dew2019_d2gdp2(double t, double p)
    double TB_p3_dew2019_d3gdt3(double t, double p)
    double TB_p3_dew2019_d3gdt2dp(double t, double p)
    double TB_p3_dew2019_d3gdtdp2(double t, double p)
    double TB_p3_dew2019_d3gdp3(double t, double p)
    double TB_p3_dew2019_s(double t, double p)
    double TB_p3_dew2019_v(double t, double p)
    double TB_p3_dew2019_cv(double t, double p)
    double TB_p3_dew2019_cp(double t, double p)
    double TB_p3_dew2019_dcpdt(double t, double p)
    double TB_p3_dew2019_alpha(double t, double p)
    double TB_p3_dew2019_beta(double t, double p)
    double TB_p3_dew2019_K(double t, double p)
    double TB_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_TB_p3_dew2019_identifier():
    result = <bytes> TB_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_TB_p3_dew2019_name():
    result = <bytes> TB_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_TB_p3_dew2019_formula():
    result = <bytes> TB_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_TB_p3_dew2019_mw():
    result = TB_p3_dew2019_mw()
    return result
def cy_TB_p3_dew2019_elements():
    cdef const double *e = TB_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_TB_p3_dew2019_g(double t, double p):
    result = TB_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_dgdt(double t, double p):
    result = TB_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_dgdp(double t, double p):
    result = TB_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_d2gdt2(double t, double p):
    result = TB_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_d2gdtdp(double t, double p):
    result = TB_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_d2gdp2(double t, double p):
    result = TB_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_d3gdt3(double t, double p):
    result = TB_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_d3gdt2dp(double t, double p):
    result = TB_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_d3gdtdp2(double t, double p):
    result = TB_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_d3gdp3(double t, double p):
    result = TB_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_s(double t, double p):
    result = TB_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_v(double t, double p):
    result = TB_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_cv(double t, double p):
    result = TB_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_cp(double t, double p):
    result = TB_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_dcpdt(double t, double p):
    result = TB_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_alpha(double t, double p):
    result = TB_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_beta(double t, double p):
    result = TB_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_K(double t, double p):
    result = TB_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_TB_p3_dew2019_Kp(double t, double p):
    result = TB_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SRCL_p_dew2019_calc.h":
    const char *SRCL_p_dew2019_identifier();
    const char *SRCL_p_dew2019_name();
    const char *SRCL_p_dew2019_formula();
    const double SRCL_p_dew2019_mw();
    const double *SRCL_p_dew2019_elements();
    double SRCL_p_dew2019_g(double t, double p)
    double SRCL_p_dew2019_dgdt(double t, double p)
    double SRCL_p_dew2019_dgdp(double t, double p)
    double SRCL_p_dew2019_d2gdt2(double t, double p)
    double SRCL_p_dew2019_d2gdtdp(double t, double p)
    double SRCL_p_dew2019_d2gdp2(double t, double p)
    double SRCL_p_dew2019_d3gdt3(double t, double p)
    double SRCL_p_dew2019_d3gdt2dp(double t, double p)
    double SRCL_p_dew2019_d3gdtdp2(double t, double p)
    double SRCL_p_dew2019_d3gdp3(double t, double p)
    double SRCL_p_dew2019_s(double t, double p)
    double SRCL_p_dew2019_v(double t, double p)
    double SRCL_p_dew2019_cv(double t, double p)
    double SRCL_p_dew2019_cp(double t, double p)
    double SRCL_p_dew2019_dcpdt(double t, double p)
    double SRCL_p_dew2019_alpha(double t, double p)
    double SRCL_p_dew2019_beta(double t, double p)
    double SRCL_p_dew2019_K(double t, double p)
    double SRCL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SRCL_p_dew2019_identifier():
    result = <bytes> SRCL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SRCL_p_dew2019_name():
    result = <bytes> SRCL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_SRCL_p_dew2019_formula():
    result = <bytes> SRCL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_SRCL_p_dew2019_mw():
    result = SRCL_p_dew2019_mw()
    return result
def cy_SRCL_p_dew2019_elements():
    cdef const double *e = SRCL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SRCL_p_dew2019_g(double t, double p):
    result = SRCL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_dgdt(double t, double p):
    result = SRCL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_dgdp(double t, double p):
    result = SRCL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_d2gdt2(double t, double p):
    result = SRCL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_d2gdtdp(double t, double p):
    result = SRCL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_d2gdp2(double t, double p):
    result = SRCL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_d3gdt3(double t, double p):
    result = SRCL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_d3gdt2dp(double t, double p):
    result = SRCL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_d3gdtdp2(double t, double p):
    result = SRCL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_d3gdp3(double t, double p):
    result = SRCL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_s(double t, double p):
    result = SRCL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_v(double t, double p):
    result = SRCL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_cv(double t, double p):
    result = SRCL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_cp(double t, double p):
    result = SRCL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_dcpdt(double t, double p):
    result = SRCL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_alpha(double t, double p):
    result = SRCL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_beta(double t, double p):
    result = SRCL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_K(double t, double p):
    result = SRCL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_SRCL_p_dew2019_Kp(double t, double p):
    result = SRCL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SR_p2_dew2019_calc.h":
    const char *SR_p2_dew2019_identifier();
    const char *SR_p2_dew2019_name();
    const char *SR_p2_dew2019_formula();
    const double SR_p2_dew2019_mw();
    const double *SR_p2_dew2019_elements();
    double SR_p2_dew2019_g(double t, double p)
    double SR_p2_dew2019_dgdt(double t, double p)
    double SR_p2_dew2019_dgdp(double t, double p)
    double SR_p2_dew2019_d2gdt2(double t, double p)
    double SR_p2_dew2019_d2gdtdp(double t, double p)
    double SR_p2_dew2019_d2gdp2(double t, double p)
    double SR_p2_dew2019_d3gdt3(double t, double p)
    double SR_p2_dew2019_d3gdt2dp(double t, double p)
    double SR_p2_dew2019_d3gdtdp2(double t, double p)
    double SR_p2_dew2019_d3gdp3(double t, double p)
    double SR_p2_dew2019_s(double t, double p)
    double SR_p2_dew2019_v(double t, double p)
    double SR_p2_dew2019_cv(double t, double p)
    double SR_p2_dew2019_cp(double t, double p)
    double SR_p2_dew2019_dcpdt(double t, double p)
    double SR_p2_dew2019_alpha(double t, double p)
    double SR_p2_dew2019_beta(double t, double p)
    double SR_p2_dew2019_K(double t, double p)
    double SR_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SR_p2_dew2019_identifier():
    result = <bytes> SR_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SR_p2_dew2019_name():
    result = <bytes> SR_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_SR_p2_dew2019_formula():
    result = <bytes> SR_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_SR_p2_dew2019_mw():
    result = SR_p2_dew2019_mw()
    return result
def cy_SR_p2_dew2019_elements():
    cdef const double *e = SR_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SR_p2_dew2019_g(double t, double p):
    result = SR_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_dgdt(double t, double p):
    result = SR_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_dgdp(double t, double p):
    result = SR_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_d2gdt2(double t, double p):
    result = SR_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_d2gdtdp(double t, double p):
    result = SR_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_d2gdp2(double t, double p):
    result = SR_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_d3gdt3(double t, double p):
    result = SR_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_d3gdt2dp(double t, double p):
    result = SR_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_d3gdtdp2(double t, double p):
    result = SR_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_d3gdp3(double t, double p):
    result = SR_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_s(double t, double p):
    result = SR_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_v(double t, double p):
    result = SR_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_cv(double t, double p):
    result = SR_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_cp(double t, double p):
    result = SR_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_dcpdt(double t, double p):
    result = SR_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_alpha(double t, double p):
    result = SR_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_beta(double t, double p):
    result = SR_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_K(double t, double p):
    result = SR_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_SR_p2_dew2019_Kp(double t, double p):
    result = SR_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SO4_n2_dew2019_calc.h":
    const char *SO4_n2_dew2019_identifier();
    const char *SO4_n2_dew2019_name();
    const char *SO4_n2_dew2019_formula();
    const double SO4_n2_dew2019_mw();
    const double *SO4_n2_dew2019_elements();
    double SO4_n2_dew2019_g(double t, double p)
    double SO4_n2_dew2019_dgdt(double t, double p)
    double SO4_n2_dew2019_dgdp(double t, double p)
    double SO4_n2_dew2019_d2gdt2(double t, double p)
    double SO4_n2_dew2019_d2gdtdp(double t, double p)
    double SO4_n2_dew2019_d2gdp2(double t, double p)
    double SO4_n2_dew2019_d3gdt3(double t, double p)
    double SO4_n2_dew2019_d3gdt2dp(double t, double p)
    double SO4_n2_dew2019_d3gdtdp2(double t, double p)
    double SO4_n2_dew2019_d3gdp3(double t, double p)
    double SO4_n2_dew2019_s(double t, double p)
    double SO4_n2_dew2019_v(double t, double p)
    double SO4_n2_dew2019_cv(double t, double p)
    double SO4_n2_dew2019_cp(double t, double p)
    double SO4_n2_dew2019_dcpdt(double t, double p)
    double SO4_n2_dew2019_alpha(double t, double p)
    double SO4_n2_dew2019_beta(double t, double p)
    double SO4_n2_dew2019_K(double t, double p)
    double SO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SO4_n2_dew2019_identifier():
    result = <bytes> SO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SO4_n2_dew2019_name():
    result = <bytes> SO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_SO4_n2_dew2019_formula():
    result = <bytes> SO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_SO4_n2_dew2019_mw():
    result = SO4_n2_dew2019_mw()
    return result
def cy_SO4_n2_dew2019_elements():
    cdef const double *e = SO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SO4_n2_dew2019_g(double t, double p):
    result = SO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_dgdt(double t, double p):
    result = SO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_dgdp(double t, double p):
    result = SO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_d2gdt2(double t, double p):
    result = SO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_d2gdtdp(double t, double p):
    result = SO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_d2gdp2(double t, double p):
    result = SO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_d3gdt3(double t, double p):
    result = SO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = SO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = SO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_d3gdp3(double t, double p):
    result = SO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_s(double t, double p):
    result = SO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_v(double t, double p):
    result = SO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_cv(double t, double p):
    result = SO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_cp(double t, double p):
    result = SO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_dcpdt(double t, double p):
    result = SO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_alpha(double t, double p):
    result = SO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_beta(double t, double p):
    result = SO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_K(double t, double p):
    result = SO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_SO4_n2_dew2019_Kp(double t, double p):
    result = SO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SO3_n2_dew2019_calc.h":
    const char *SO3_n2_dew2019_identifier();
    const char *SO3_n2_dew2019_name();
    const char *SO3_n2_dew2019_formula();
    const double SO3_n2_dew2019_mw();
    const double *SO3_n2_dew2019_elements();
    double SO3_n2_dew2019_g(double t, double p)
    double SO3_n2_dew2019_dgdt(double t, double p)
    double SO3_n2_dew2019_dgdp(double t, double p)
    double SO3_n2_dew2019_d2gdt2(double t, double p)
    double SO3_n2_dew2019_d2gdtdp(double t, double p)
    double SO3_n2_dew2019_d2gdp2(double t, double p)
    double SO3_n2_dew2019_d3gdt3(double t, double p)
    double SO3_n2_dew2019_d3gdt2dp(double t, double p)
    double SO3_n2_dew2019_d3gdtdp2(double t, double p)
    double SO3_n2_dew2019_d3gdp3(double t, double p)
    double SO3_n2_dew2019_s(double t, double p)
    double SO3_n2_dew2019_v(double t, double p)
    double SO3_n2_dew2019_cv(double t, double p)
    double SO3_n2_dew2019_cp(double t, double p)
    double SO3_n2_dew2019_dcpdt(double t, double p)
    double SO3_n2_dew2019_alpha(double t, double p)
    double SO3_n2_dew2019_beta(double t, double p)
    double SO3_n2_dew2019_K(double t, double p)
    double SO3_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SO3_n2_dew2019_identifier():
    result = <bytes> SO3_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SO3_n2_dew2019_name():
    result = <bytes> SO3_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_SO3_n2_dew2019_formula():
    result = <bytes> SO3_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_SO3_n2_dew2019_mw():
    result = SO3_n2_dew2019_mw()
    return result
def cy_SO3_n2_dew2019_elements():
    cdef const double *e = SO3_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SO3_n2_dew2019_g(double t, double p):
    result = SO3_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_dgdt(double t, double p):
    result = SO3_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_dgdp(double t, double p):
    result = SO3_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_d2gdt2(double t, double p):
    result = SO3_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_d2gdtdp(double t, double p):
    result = SO3_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_d2gdp2(double t, double p):
    result = SO3_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_d3gdt3(double t, double p):
    result = SO3_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_d3gdt2dp(double t, double p):
    result = SO3_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_d3gdtdp2(double t, double p):
    result = SO3_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_d3gdp3(double t, double p):
    result = SO3_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_s(double t, double p):
    result = SO3_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_v(double t, double p):
    result = SO3_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_cv(double t, double p):
    result = SO3_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_cp(double t, double p):
    result = SO3_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_dcpdt(double t, double p):
    result = SO3_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_alpha(double t, double p):
    result = SO3_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_beta(double t, double p):
    result = SO3_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_K(double t, double p):
    result = SO3_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_SO3_n2_dew2019_Kp(double t, double p):
    result = SO3_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SO2_l_AQ_r__dew2019_calc.h":
    const char *SO2_l_AQ_r__dew2019_identifier();
    const char *SO2_l_AQ_r__dew2019_name();
    const char *SO2_l_AQ_r__dew2019_formula();
    const double SO2_l_AQ_r__dew2019_mw();
    const double *SO2_l_AQ_r__dew2019_elements();
    double SO2_l_AQ_r__dew2019_g(double t, double p)
    double SO2_l_AQ_r__dew2019_dgdt(double t, double p)
    double SO2_l_AQ_r__dew2019_dgdp(double t, double p)
    double SO2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double SO2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double SO2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double SO2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double SO2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double SO2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double SO2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double SO2_l_AQ_r__dew2019_s(double t, double p)
    double SO2_l_AQ_r__dew2019_v(double t, double p)
    double SO2_l_AQ_r__dew2019_cv(double t, double p)
    double SO2_l_AQ_r__dew2019_cp(double t, double p)
    double SO2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double SO2_l_AQ_r__dew2019_alpha(double t, double p)
    double SO2_l_AQ_r__dew2019_beta(double t, double p)
    double SO2_l_AQ_r__dew2019_K(double t, double p)
    double SO2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SO2_l_AQ_r__dew2019_identifier():
    result = <bytes> SO2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_SO2_l_AQ_r__dew2019_name():
    result = <bytes> SO2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_SO2_l_AQ_r__dew2019_formula():
    result = <bytes> SO2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_SO2_l_AQ_r__dew2019_mw():
    result = SO2_l_AQ_r__dew2019_mw()
    return result
def cy_SO2_l_AQ_r__dew2019_elements():
    cdef const double *e = SO2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SO2_l_AQ_r__dew2019_g(double t, double p):
    result = SO2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = SO2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = SO2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = SO2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = SO2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = SO2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = SO2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = SO2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = SO2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = SO2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_s(double t, double p):
    result = SO2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_v(double t, double p):
    result = SO2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_cv(double t, double p):
    result = SO2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_cp(double t, double p):
    result = SO2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = SO2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_alpha(double t, double p):
    result = SO2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_beta(double t, double p):
    result = SO2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_K(double t, double p):
    result = SO2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_SO2_l_AQ_r__dew2019_Kp(double t, double p):
    result = SO2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SN_p2_dew2019_calc.h":
    const char *SN_p2_dew2019_identifier();
    const char *SN_p2_dew2019_name();
    const char *SN_p2_dew2019_formula();
    const double SN_p2_dew2019_mw();
    const double *SN_p2_dew2019_elements();
    double SN_p2_dew2019_g(double t, double p)
    double SN_p2_dew2019_dgdt(double t, double p)
    double SN_p2_dew2019_dgdp(double t, double p)
    double SN_p2_dew2019_d2gdt2(double t, double p)
    double SN_p2_dew2019_d2gdtdp(double t, double p)
    double SN_p2_dew2019_d2gdp2(double t, double p)
    double SN_p2_dew2019_d3gdt3(double t, double p)
    double SN_p2_dew2019_d3gdt2dp(double t, double p)
    double SN_p2_dew2019_d3gdtdp2(double t, double p)
    double SN_p2_dew2019_d3gdp3(double t, double p)
    double SN_p2_dew2019_s(double t, double p)
    double SN_p2_dew2019_v(double t, double p)
    double SN_p2_dew2019_cv(double t, double p)
    double SN_p2_dew2019_cp(double t, double p)
    double SN_p2_dew2019_dcpdt(double t, double p)
    double SN_p2_dew2019_alpha(double t, double p)
    double SN_p2_dew2019_beta(double t, double p)
    double SN_p2_dew2019_K(double t, double p)
    double SN_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SN_p2_dew2019_identifier():
    result = <bytes> SN_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SN_p2_dew2019_name():
    result = <bytes> SN_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_SN_p2_dew2019_formula():
    result = <bytes> SN_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_SN_p2_dew2019_mw():
    result = SN_p2_dew2019_mw()
    return result
def cy_SN_p2_dew2019_elements():
    cdef const double *e = SN_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SN_p2_dew2019_g(double t, double p):
    result = SN_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_dgdt(double t, double p):
    result = SN_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_dgdp(double t, double p):
    result = SN_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_d2gdt2(double t, double p):
    result = SN_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_d2gdtdp(double t, double p):
    result = SN_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_d2gdp2(double t, double p):
    result = SN_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_d3gdt3(double t, double p):
    result = SN_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_d3gdt2dp(double t, double p):
    result = SN_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_d3gdtdp2(double t, double p):
    result = SN_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_d3gdp3(double t, double p):
    result = SN_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_s(double t, double p):
    result = SN_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_v(double t, double p):
    result = SN_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_cv(double t, double p):
    result = SN_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_cp(double t, double p):
    result = SN_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_dcpdt(double t, double p):
    result = SN_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_alpha(double t, double p):
    result = SN_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_beta(double t, double p):
    result = SN_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_K(double t, double p):
    result = SN_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_SN_p2_dew2019_Kp(double t, double p):
    result = SN_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SM_p3_dew2019_calc.h":
    const char *SM_p3_dew2019_identifier();
    const char *SM_p3_dew2019_name();
    const char *SM_p3_dew2019_formula();
    const double SM_p3_dew2019_mw();
    const double *SM_p3_dew2019_elements();
    double SM_p3_dew2019_g(double t, double p)
    double SM_p3_dew2019_dgdt(double t, double p)
    double SM_p3_dew2019_dgdp(double t, double p)
    double SM_p3_dew2019_d2gdt2(double t, double p)
    double SM_p3_dew2019_d2gdtdp(double t, double p)
    double SM_p3_dew2019_d2gdp2(double t, double p)
    double SM_p3_dew2019_d3gdt3(double t, double p)
    double SM_p3_dew2019_d3gdt2dp(double t, double p)
    double SM_p3_dew2019_d3gdtdp2(double t, double p)
    double SM_p3_dew2019_d3gdp3(double t, double p)
    double SM_p3_dew2019_s(double t, double p)
    double SM_p3_dew2019_v(double t, double p)
    double SM_p3_dew2019_cv(double t, double p)
    double SM_p3_dew2019_cp(double t, double p)
    double SM_p3_dew2019_dcpdt(double t, double p)
    double SM_p3_dew2019_alpha(double t, double p)
    double SM_p3_dew2019_beta(double t, double p)
    double SM_p3_dew2019_K(double t, double p)
    double SM_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SM_p3_dew2019_identifier():
    result = <bytes> SM_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SM_p3_dew2019_name():
    result = <bytes> SM_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_SM_p3_dew2019_formula():
    result = <bytes> SM_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_SM_p3_dew2019_mw():
    result = SM_p3_dew2019_mw()
    return result
def cy_SM_p3_dew2019_elements():
    cdef const double *e = SM_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SM_p3_dew2019_g(double t, double p):
    result = SM_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_dgdt(double t, double p):
    result = SM_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_dgdp(double t, double p):
    result = SM_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_d2gdt2(double t, double p):
    result = SM_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_d2gdtdp(double t, double p):
    result = SM_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_d2gdp2(double t, double p):
    result = SM_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_d3gdt3(double t, double p):
    result = SM_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_d3gdt2dp(double t, double p):
    result = SM_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_d3gdtdp2(double t, double p):
    result = SM_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_d3gdp3(double t, double p):
    result = SM_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_s(double t, double p):
    result = SM_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_v(double t, double p):
    result = SM_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_cv(double t, double p):
    result = SM_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_cp(double t, double p):
    result = SM_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_dcpdt(double t, double p):
    result = SM_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_alpha(double t, double p):
    result = SM_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_beta(double t, double p):
    result = SM_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_K(double t, double p):
    result = SM_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_SM_p3_dew2019_Kp(double t, double p):
    result = SM_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SM_p2_dew2019_calc.h":
    const char *SM_p2_dew2019_identifier();
    const char *SM_p2_dew2019_name();
    const char *SM_p2_dew2019_formula();
    const double SM_p2_dew2019_mw();
    const double *SM_p2_dew2019_elements();
    double SM_p2_dew2019_g(double t, double p)
    double SM_p2_dew2019_dgdt(double t, double p)
    double SM_p2_dew2019_dgdp(double t, double p)
    double SM_p2_dew2019_d2gdt2(double t, double p)
    double SM_p2_dew2019_d2gdtdp(double t, double p)
    double SM_p2_dew2019_d2gdp2(double t, double p)
    double SM_p2_dew2019_d3gdt3(double t, double p)
    double SM_p2_dew2019_d3gdt2dp(double t, double p)
    double SM_p2_dew2019_d3gdtdp2(double t, double p)
    double SM_p2_dew2019_d3gdp3(double t, double p)
    double SM_p2_dew2019_s(double t, double p)
    double SM_p2_dew2019_v(double t, double p)
    double SM_p2_dew2019_cv(double t, double p)
    double SM_p2_dew2019_cp(double t, double p)
    double SM_p2_dew2019_dcpdt(double t, double p)
    double SM_p2_dew2019_alpha(double t, double p)
    double SM_p2_dew2019_beta(double t, double p)
    double SM_p2_dew2019_K(double t, double p)
    double SM_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SM_p2_dew2019_identifier():
    result = <bytes> SM_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SM_p2_dew2019_name():
    result = <bytes> SM_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_SM_p2_dew2019_formula():
    result = <bytes> SM_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_SM_p2_dew2019_mw():
    result = SM_p2_dew2019_mw()
    return result
def cy_SM_p2_dew2019_elements():
    cdef const double *e = SM_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SM_p2_dew2019_g(double t, double p):
    result = SM_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_dgdt(double t, double p):
    result = SM_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_dgdp(double t, double p):
    result = SM_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_d2gdt2(double t, double p):
    result = SM_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_d2gdtdp(double t, double p):
    result = SM_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_d2gdp2(double t, double p):
    result = SM_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_d3gdt3(double t, double p):
    result = SM_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_d3gdt2dp(double t, double p):
    result = SM_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_d3gdtdp2(double t, double p):
    result = SM_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_d3gdp3(double t, double p):
    result = SM_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_s(double t, double p):
    result = SM_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_v(double t, double p):
    result = SM_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_cv(double t, double p):
    result = SM_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_cp(double t, double p):
    result = SM_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_dcpdt(double t, double p):
    result = SM_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_alpha(double t, double p):
    result = SM_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_beta(double t, double p):
    result = SM_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_K(double t, double p):
    result = SM_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_SM_p2_dew2019_Kp(double t, double p):
    result = SM_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H4SIO4_l_AQ_r__dew2019_calc.h":
    const char *H4SIO4_l_AQ_r__dew2019_identifier();
    const char *H4SIO4_l_AQ_r__dew2019_name();
    const char *H4SIO4_l_AQ_r__dew2019_formula();
    const double H4SIO4_l_AQ_r__dew2019_mw();
    const double *H4SIO4_l_AQ_r__dew2019_elements();
    double H4SIO4_l_AQ_r__dew2019_g(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_dgdt(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_dgdp(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_s(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_v(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_cv(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_cp(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_dcpdt(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_alpha(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_beta(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_K(double t, double p)
    double H4SIO4_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H4SIO4_l_AQ_r__dew2019_identifier():
    result = <bytes> H4SIO4_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_H4SIO4_l_AQ_r__dew2019_name():
    result = <bytes> H4SIO4_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_H4SIO4_l_AQ_r__dew2019_formula():
    result = <bytes> H4SIO4_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_H4SIO4_l_AQ_r__dew2019_mw():
    result = H4SIO4_l_AQ_r__dew2019_mw()
    return result
def cy_H4SIO4_l_AQ_r__dew2019_elements():
    cdef const double *e = H4SIO4_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H4SIO4_l_AQ_r__dew2019_g(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_dgdt(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_dgdp(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_s(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_v(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_cv(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_cp(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_alpha(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_beta(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_K(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_H4SIO4_l_AQ_r__dew2019_Kp(double t, double p):
    result = H4SIO4_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H8SI3O10_l_AQ_r__dew2019_calc.h":
    const char *H8SI3O10_l_AQ_r__dew2019_identifier();
    const char *H8SI3O10_l_AQ_r__dew2019_name();
    const char *H8SI3O10_l_AQ_r__dew2019_formula();
    const double H8SI3O10_l_AQ_r__dew2019_mw();
    const double *H8SI3O10_l_AQ_r__dew2019_elements();
    double H8SI3O10_l_AQ_r__dew2019_g(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_dgdt(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_dgdp(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_s(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_v(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_cv(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_cp(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_dcpdt(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_alpha(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_beta(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_K(double t, double p)
    double H8SI3O10_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H8SI3O10_l_AQ_r__dew2019_identifier():
    result = <bytes> H8SI3O10_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_H8SI3O10_l_AQ_r__dew2019_name():
    result = <bytes> H8SI3O10_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_H8SI3O10_l_AQ_r__dew2019_formula():
    result = <bytes> H8SI3O10_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_H8SI3O10_l_AQ_r__dew2019_mw():
    result = H8SI3O10_l_AQ_r__dew2019_mw()
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_elements():
    cdef const double *e = H8SI3O10_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H8SI3O10_l_AQ_r__dew2019_g(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_dgdt(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_dgdp(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_s(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_v(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_cv(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_cp(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_alpha(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_beta(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_K(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_H8SI3O10_l_AQ_r__dew2019_Kp(double t, double p):
    result = H8SI3O10_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H6SI2O7_l_AQ_r__dew2019_calc.h":
    const char *H6SI2O7_l_AQ_r__dew2019_identifier();
    const char *H6SI2O7_l_AQ_r__dew2019_name();
    const char *H6SI2O7_l_AQ_r__dew2019_formula();
    const double H6SI2O7_l_AQ_r__dew2019_mw();
    const double *H6SI2O7_l_AQ_r__dew2019_elements();
    double H6SI2O7_l_AQ_r__dew2019_g(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_dgdt(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_dgdp(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_s(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_v(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_cv(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_cp(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_dcpdt(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_alpha(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_beta(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_K(double t, double p)
    double H6SI2O7_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H6SI2O7_l_AQ_r__dew2019_identifier():
    result = <bytes> H6SI2O7_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_H6SI2O7_l_AQ_r__dew2019_name():
    result = <bytes> H6SI2O7_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_H6SI2O7_l_AQ_r__dew2019_formula():
    result = <bytes> H6SI2O7_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_H6SI2O7_l_AQ_r__dew2019_mw():
    result = H6SI2O7_l_AQ_r__dew2019_mw()
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_elements():
    cdef const double *e = H6SI2O7_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H6SI2O7_l_AQ_r__dew2019_g(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_dgdt(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_dgdp(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_s(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_v(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_cv(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_cp(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_alpha(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_beta(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_K(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_H6SI2O7_l_AQ_r__dew2019_Kp(double t, double p):
    result = H6SI2O7_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SEO4_n2_dew2019_calc.h":
    const char *SEO4_n2_dew2019_identifier();
    const char *SEO4_n2_dew2019_name();
    const char *SEO4_n2_dew2019_formula();
    const double SEO4_n2_dew2019_mw();
    const double *SEO4_n2_dew2019_elements();
    double SEO4_n2_dew2019_g(double t, double p)
    double SEO4_n2_dew2019_dgdt(double t, double p)
    double SEO4_n2_dew2019_dgdp(double t, double p)
    double SEO4_n2_dew2019_d2gdt2(double t, double p)
    double SEO4_n2_dew2019_d2gdtdp(double t, double p)
    double SEO4_n2_dew2019_d2gdp2(double t, double p)
    double SEO4_n2_dew2019_d3gdt3(double t, double p)
    double SEO4_n2_dew2019_d3gdt2dp(double t, double p)
    double SEO4_n2_dew2019_d3gdtdp2(double t, double p)
    double SEO4_n2_dew2019_d3gdp3(double t, double p)
    double SEO4_n2_dew2019_s(double t, double p)
    double SEO4_n2_dew2019_v(double t, double p)
    double SEO4_n2_dew2019_cv(double t, double p)
    double SEO4_n2_dew2019_cp(double t, double p)
    double SEO4_n2_dew2019_dcpdt(double t, double p)
    double SEO4_n2_dew2019_alpha(double t, double p)
    double SEO4_n2_dew2019_beta(double t, double p)
    double SEO4_n2_dew2019_K(double t, double p)
    double SEO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SEO4_n2_dew2019_identifier():
    result = <bytes> SEO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SEO4_n2_dew2019_name():
    result = <bytes> SEO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_SEO4_n2_dew2019_formula():
    result = <bytes> SEO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_SEO4_n2_dew2019_mw():
    result = SEO4_n2_dew2019_mw()
    return result
def cy_SEO4_n2_dew2019_elements():
    cdef const double *e = SEO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SEO4_n2_dew2019_g(double t, double p):
    result = SEO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_dgdt(double t, double p):
    result = SEO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_dgdp(double t, double p):
    result = SEO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_d2gdt2(double t, double p):
    result = SEO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_d2gdtdp(double t, double p):
    result = SEO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_d2gdp2(double t, double p):
    result = SEO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_d3gdt3(double t, double p):
    result = SEO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = SEO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = SEO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_d3gdp3(double t, double p):
    result = SEO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_s(double t, double p):
    result = SEO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_v(double t, double p):
    result = SEO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_cv(double t, double p):
    result = SEO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_cp(double t, double p):
    result = SEO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_dcpdt(double t, double p):
    result = SEO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_alpha(double t, double p):
    result = SEO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_beta(double t, double p):
    result = SEO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_K(double t, double p):
    result = SEO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_SEO4_n2_dew2019_Kp(double t, double p):
    result = SEO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SEO3_n2_dew2019_calc.h":
    const char *SEO3_n2_dew2019_identifier();
    const char *SEO3_n2_dew2019_name();
    const char *SEO3_n2_dew2019_formula();
    const double SEO3_n2_dew2019_mw();
    const double *SEO3_n2_dew2019_elements();
    double SEO3_n2_dew2019_g(double t, double p)
    double SEO3_n2_dew2019_dgdt(double t, double p)
    double SEO3_n2_dew2019_dgdp(double t, double p)
    double SEO3_n2_dew2019_d2gdt2(double t, double p)
    double SEO3_n2_dew2019_d2gdtdp(double t, double p)
    double SEO3_n2_dew2019_d2gdp2(double t, double p)
    double SEO3_n2_dew2019_d3gdt3(double t, double p)
    double SEO3_n2_dew2019_d3gdt2dp(double t, double p)
    double SEO3_n2_dew2019_d3gdtdp2(double t, double p)
    double SEO3_n2_dew2019_d3gdp3(double t, double p)
    double SEO3_n2_dew2019_s(double t, double p)
    double SEO3_n2_dew2019_v(double t, double p)
    double SEO3_n2_dew2019_cv(double t, double p)
    double SEO3_n2_dew2019_cp(double t, double p)
    double SEO3_n2_dew2019_dcpdt(double t, double p)
    double SEO3_n2_dew2019_alpha(double t, double p)
    double SEO3_n2_dew2019_beta(double t, double p)
    double SEO3_n2_dew2019_K(double t, double p)
    double SEO3_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SEO3_n2_dew2019_identifier():
    result = <bytes> SEO3_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SEO3_n2_dew2019_name():
    result = <bytes> SEO3_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_SEO3_n2_dew2019_formula():
    result = <bytes> SEO3_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_SEO3_n2_dew2019_mw():
    result = SEO3_n2_dew2019_mw()
    return result
def cy_SEO3_n2_dew2019_elements():
    cdef const double *e = SEO3_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SEO3_n2_dew2019_g(double t, double p):
    result = SEO3_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_dgdt(double t, double p):
    result = SEO3_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_dgdp(double t, double p):
    result = SEO3_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_d2gdt2(double t, double p):
    result = SEO3_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_d2gdtdp(double t, double p):
    result = SEO3_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_d2gdp2(double t, double p):
    result = SEO3_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_d3gdt3(double t, double p):
    result = SEO3_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_d3gdt2dp(double t, double p):
    result = SEO3_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_d3gdtdp2(double t, double p):
    result = SEO3_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_d3gdp3(double t, double p):
    result = SEO3_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_s(double t, double p):
    result = SEO3_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_v(double t, double p):
    result = SEO3_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_cv(double t, double p):
    result = SEO3_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_cp(double t, double p):
    result = SEO3_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_dcpdt(double t, double p):
    result = SEO3_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_alpha(double t, double p):
    result = SEO3_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_beta(double t, double p):
    result = SEO3_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_K(double t, double p):
    result = SEO3_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_SEO3_n2_dew2019_Kp(double t, double p):
    result = SEO3_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "SC_p3_dew2019_calc.h":
    const char *SC_p3_dew2019_identifier();
    const char *SC_p3_dew2019_name();
    const char *SC_p3_dew2019_formula();
    const double SC_p3_dew2019_mw();
    const double *SC_p3_dew2019_elements();
    double SC_p3_dew2019_g(double t, double p)
    double SC_p3_dew2019_dgdt(double t, double p)
    double SC_p3_dew2019_dgdp(double t, double p)
    double SC_p3_dew2019_d2gdt2(double t, double p)
    double SC_p3_dew2019_d2gdtdp(double t, double p)
    double SC_p3_dew2019_d2gdp2(double t, double p)
    double SC_p3_dew2019_d3gdt3(double t, double p)
    double SC_p3_dew2019_d3gdt2dp(double t, double p)
    double SC_p3_dew2019_d3gdtdp2(double t, double p)
    double SC_p3_dew2019_d3gdp3(double t, double p)
    double SC_p3_dew2019_s(double t, double p)
    double SC_p3_dew2019_v(double t, double p)
    double SC_p3_dew2019_cv(double t, double p)
    double SC_p3_dew2019_cp(double t, double p)
    double SC_p3_dew2019_dcpdt(double t, double p)
    double SC_p3_dew2019_alpha(double t, double p)
    double SC_p3_dew2019_beta(double t, double p)
    double SC_p3_dew2019_K(double t, double p)
    double SC_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_SC_p3_dew2019_identifier():
    result = <bytes> SC_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_SC_p3_dew2019_name():
    result = <bytes> SC_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_SC_p3_dew2019_formula():
    result = <bytes> SC_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_SC_p3_dew2019_mw():
    result = SC_p3_dew2019_mw()
    return result
def cy_SC_p3_dew2019_elements():
    cdef const double *e = SC_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_SC_p3_dew2019_g(double t, double p):
    result = SC_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_dgdt(double t, double p):
    result = SC_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_dgdp(double t, double p):
    result = SC_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_d2gdt2(double t, double p):
    result = SC_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_d2gdtdp(double t, double p):
    result = SC_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_d2gdp2(double t, double p):
    result = SC_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_d3gdt3(double t, double p):
    result = SC_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_d3gdt2dp(double t, double p):
    result = SC_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_d3gdtdp2(double t, double p):
    result = SC_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_d3gdp3(double t, double p):
    result = SC_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_s(double t, double p):
    result = SC_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_v(double t, double p):
    result = SC_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_cv(double t, double p):
    result = SC_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_cp(double t, double p):
    result = SC_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_dcpdt(double t, double p):
    result = SC_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_alpha(double t, double p):
    result = SC_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_beta(double t, double p):
    result = SC_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_K(double t, double p):
    result = SC_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_SC_p3_dew2019_Kp(double t, double p):
    result = SC_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S506_n2_dew2019_calc.h":
    const char *S506_n2_dew2019_identifier();
    const char *S506_n2_dew2019_name();
    const char *S506_n2_dew2019_formula();
    const double S506_n2_dew2019_mw();
    const double *S506_n2_dew2019_elements();
    double S506_n2_dew2019_g(double t, double p)
    double S506_n2_dew2019_dgdt(double t, double p)
    double S506_n2_dew2019_dgdp(double t, double p)
    double S506_n2_dew2019_d2gdt2(double t, double p)
    double S506_n2_dew2019_d2gdtdp(double t, double p)
    double S506_n2_dew2019_d2gdp2(double t, double p)
    double S506_n2_dew2019_d3gdt3(double t, double p)
    double S506_n2_dew2019_d3gdt2dp(double t, double p)
    double S506_n2_dew2019_d3gdtdp2(double t, double p)
    double S506_n2_dew2019_d3gdp3(double t, double p)
    double S506_n2_dew2019_s(double t, double p)
    double S506_n2_dew2019_v(double t, double p)
    double S506_n2_dew2019_cv(double t, double p)
    double S506_n2_dew2019_cp(double t, double p)
    double S506_n2_dew2019_dcpdt(double t, double p)
    double S506_n2_dew2019_alpha(double t, double p)
    double S506_n2_dew2019_beta(double t, double p)
    double S506_n2_dew2019_K(double t, double p)
    double S506_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S506_n2_dew2019_identifier():
    result = <bytes> S506_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S506_n2_dew2019_name():
    result = <bytes> S506_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S506_n2_dew2019_formula():
    result = <bytes> S506_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S506_n2_dew2019_mw():
    result = S506_n2_dew2019_mw()
    return result
def cy_S506_n2_dew2019_elements():
    cdef const double *e = S506_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S506_n2_dew2019_g(double t, double p):
    result = S506_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_dgdt(double t, double p):
    result = S506_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_dgdp(double t, double p):
    result = S506_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_d2gdt2(double t, double p):
    result = S506_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_d2gdtdp(double t, double p):
    result = S506_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_d2gdp2(double t, double p):
    result = S506_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_d3gdt3(double t, double p):
    result = S506_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_d3gdt2dp(double t, double p):
    result = S506_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_d3gdtdp2(double t, double p):
    result = S506_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_d3gdp3(double t, double p):
    result = S506_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_s(double t, double p):
    result = S506_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_v(double t, double p):
    result = S506_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_cv(double t, double p):
    result = S506_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_cp(double t, double p):
    result = S506_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_dcpdt(double t, double p):
    result = S506_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_alpha(double t, double p):
    result = S506_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_beta(double t, double p):
    result = S506_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_K(double t, double p):
    result = S506_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S506_n2_dew2019_Kp(double t, double p):
    result = S506_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S5_n2_dew2019_calc.h":
    const char *S5_n2_dew2019_identifier();
    const char *S5_n2_dew2019_name();
    const char *S5_n2_dew2019_formula();
    const double S5_n2_dew2019_mw();
    const double *S5_n2_dew2019_elements();
    double S5_n2_dew2019_g(double t, double p)
    double S5_n2_dew2019_dgdt(double t, double p)
    double S5_n2_dew2019_dgdp(double t, double p)
    double S5_n2_dew2019_d2gdt2(double t, double p)
    double S5_n2_dew2019_d2gdtdp(double t, double p)
    double S5_n2_dew2019_d2gdp2(double t, double p)
    double S5_n2_dew2019_d3gdt3(double t, double p)
    double S5_n2_dew2019_d3gdt2dp(double t, double p)
    double S5_n2_dew2019_d3gdtdp2(double t, double p)
    double S5_n2_dew2019_d3gdp3(double t, double p)
    double S5_n2_dew2019_s(double t, double p)
    double S5_n2_dew2019_v(double t, double p)
    double S5_n2_dew2019_cv(double t, double p)
    double S5_n2_dew2019_cp(double t, double p)
    double S5_n2_dew2019_dcpdt(double t, double p)
    double S5_n2_dew2019_alpha(double t, double p)
    double S5_n2_dew2019_beta(double t, double p)
    double S5_n2_dew2019_K(double t, double p)
    double S5_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S5_n2_dew2019_identifier():
    result = <bytes> S5_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S5_n2_dew2019_name():
    result = <bytes> S5_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S5_n2_dew2019_formula():
    result = <bytes> S5_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S5_n2_dew2019_mw():
    result = S5_n2_dew2019_mw()
    return result
def cy_S5_n2_dew2019_elements():
    cdef const double *e = S5_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S5_n2_dew2019_g(double t, double p):
    result = S5_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_dgdt(double t, double p):
    result = S5_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_dgdp(double t, double p):
    result = S5_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_d2gdt2(double t, double p):
    result = S5_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_d2gdtdp(double t, double p):
    result = S5_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_d2gdp2(double t, double p):
    result = S5_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_d3gdt3(double t, double p):
    result = S5_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_d3gdt2dp(double t, double p):
    result = S5_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_d3gdtdp2(double t, double p):
    result = S5_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_d3gdp3(double t, double p):
    result = S5_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_s(double t, double p):
    result = S5_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_v(double t, double p):
    result = S5_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_cv(double t, double p):
    result = S5_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_cp(double t, double p):
    result = S5_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_dcpdt(double t, double p):
    result = S5_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_alpha(double t, double p):
    result = S5_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_beta(double t, double p):
    result = S5_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_K(double t, double p):
    result = S5_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S5_n2_dew2019_Kp(double t, double p):
    result = S5_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S4O6_n2_dew2019_calc.h":
    const char *S4O6_n2_dew2019_identifier();
    const char *S4O6_n2_dew2019_name();
    const char *S4O6_n2_dew2019_formula();
    const double S4O6_n2_dew2019_mw();
    const double *S4O6_n2_dew2019_elements();
    double S4O6_n2_dew2019_g(double t, double p)
    double S4O6_n2_dew2019_dgdt(double t, double p)
    double S4O6_n2_dew2019_dgdp(double t, double p)
    double S4O6_n2_dew2019_d2gdt2(double t, double p)
    double S4O6_n2_dew2019_d2gdtdp(double t, double p)
    double S4O6_n2_dew2019_d2gdp2(double t, double p)
    double S4O6_n2_dew2019_d3gdt3(double t, double p)
    double S4O6_n2_dew2019_d3gdt2dp(double t, double p)
    double S4O6_n2_dew2019_d3gdtdp2(double t, double p)
    double S4O6_n2_dew2019_d3gdp3(double t, double p)
    double S4O6_n2_dew2019_s(double t, double p)
    double S4O6_n2_dew2019_v(double t, double p)
    double S4O6_n2_dew2019_cv(double t, double p)
    double S4O6_n2_dew2019_cp(double t, double p)
    double S4O6_n2_dew2019_dcpdt(double t, double p)
    double S4O6_n2_dew2019_alpha(double t, double p)
    double S4O6_n2_dew2019_beta(double t, double p)
    double S4O6_n2_dew2019_K(double t, double p)
    double S4O6_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S4O6_n2_dew2019_identifier():
    result = <bytes> S4O6_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S4O6_n2_dew2019_name():
    result = <bytes> S4O6_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S4O6_n2_dew2019_formula():
    result = <bytes> S4O6_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S4O6_n2_dew2019_mw():
    result = S4O6_n2_dew2019_mw()
    return result
def cy_S4O6_n2_dew2019_elements():
    cdef const double *e = S4O6_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S4O6_n2_dew2019_g(double t, double p):
    result = S4O6_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_dgdt(double t, double p):
    result = S4O6_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_dgdp(double t, double p):
    result = S4O6_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_d2gdt2(double t, double p):
    result = S4O6_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_d2gdtdp(double t, double p):
    result = S4O6_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_d2gdp2(double t, double p):
    result = S4O6_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_d3gdt3(double t, double p):
    result = S4O6_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_d3gdt2dp(double t, double p):
    result = S4O6_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_d3gdtdp2(double t, double p):
    result = S4O6_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_d3gdp3(double t, double p):
    result = S4O6_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_s(double t, double p):
    result = S4O6_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_v(double t, double p):
    result = S4O6_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_cv(double t, double p):
    result = S4O6_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_cp(double t, double p):
    result = S4O6_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_dcpdt(double t, double p):
    result = S4O6_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_alpha(double t, double p):
    result = S4O6_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_beta(double t, double p):
    result = S4O6_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_K(double t, double p):
    result = S4O6_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S4O6_n2_dew2019_Kp(double t, double p):
    result = S4O6_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S4_n2_dew2019_calc.h":
    const char *S4_n2_dew2019_identifier();
    const char *S4_n2_dew2019_name();
    const char *S4_n2_dew2019_formula();
    const double S4_n2_dew2019_mw();
    const double *S4_n2_dew2019_elements();
    double S4_n2_dew2019_g(double t, double p)
    double S4_n2_dew2019_dgdt(double t, double p)
    double S4_n2_dew2019_dgdp(double t, double p)
    double S4_n2_dew2019_d2gdt2(double t, double p)
    double S4_n2_dew2019_d2gdtdp(double t, double p)
    double S4_n2_dew2019_d2gdp2(double t, double p)
    double S4_n2_dew2019_d3gdt3(double t, double p)
    double S4_n2_dew2019_d3gdt2dp(double t, double p)
    double S4_n2_dew2019_d3gdtdp2(double t, double p)
    double S4_n2_dew2019_d3gdp3(double t, double p)
    double S4_n2_dew2019_s(double t, double p)
    double S4_n2_dew2019_v(double t, double p)
    double S4_n2_dew2019_cv(double t, double p)
    double S4_n2_dew2019_cp(double t, double p)
    double S4_n2_dew2019_dcpdt(double t, double p)
    double S4_n2_dew2019_alpha(double t, double p)
    double S4_n2_dew2019_beta(double t, double p)
    double S4_n2_dew2019_K(double t, double p)
    double S4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S4_n2_dew2019_identifier():
    result = <bytes> S4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S4_n2_dew2019_name():
    result = <bytes> S4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S4_n2_dew2019_formula():
    result = <bytes> S4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S4_n2_dew2019_mw():
    result = S4_n2_dew2019_mw()
    return result
def cy_S4_n2_dew2019_elements():
    cdef const double *e = S4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S4_n2_dew2019_g(double t, double p):
    result = S4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_dgdt(double t, double p):
    result = S4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_dgdp(double t, double p):
    result = S4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_d2gdt2(double t, double p):
    result = S4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_d2gdtdp(double t, double p):
    result = S4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_d2gdp2(double t, double p):
    result = S4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_d3gdt3(double t, double p):
    result = S4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_d3gdt2dp(double t, double p):
    result = S4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_d3gdtdp2(double t, double p):
    result = S4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_d3gdp3(double t, double p):
    result = S4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_s(double t, double p):
    result = S4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_v(double t, double p):
    result = S4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_cv(double t, double p):
    result = S4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_cp(double t, double p):
    result = S4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_dcpdt(double t, double p):
    result = S4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_alpha(double t, double p):
    result = S4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_beta(double t, double p):
    result = S4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_K(double t, double p):
    result = S4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S4_n2_dew2019_Kp(double t, double p):
    result = S4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S3O6_n2_dew2019_calc.h":
    const char *S3O6_n2_dew2019_identifier();
    const char *S3O6_n2_dew2019_name();
    const char *S3O6_n2_dew2019_formula();
    const double S3O6_n2_dew2019_mw();
    const double *S3O6_n2_dew2019_elements();
    double S3O6_n2_dew2019_g(double t, double p)
    double S3O6_n2_dew2019_dgdt(double t, double p)
    double S3O6_n2_dew2019_dgdp(double t, double p)
    double S3O6_n2_dew2019_d2gdt2(double t, double p)
    double S3O6_n2_dew2019_d2gdtdp(double t, double p)
    double S3O6_n2_dew2019_d2gdp2(double t, double p)
    double S3O6_n2_dew2019_d3gdt3(double t, double p)
    double S3O6_n2_dew2019_d3gdt2dp(double t, double p)
    double S3O6_n2_dew2019_d3gdtdp2(double t, double p)
    double S3O6_n2_dew2019_d3gdp3(double t, double p)
    double S3O6_n2_dew2019_s(double t, double p)
    double S3O6_n2_dew2019_v(double t, double p)
    double S3O6_n2_dew2019_cv(double t, double p)
    double S3O6_n2_dew2019_cp(double t, double p)
    double S3O6_n2_dew2019_dcpdt(double t, double p)
    double S3O6_n2_dew2019_alpha(double t, double p)
    double S3O6_n2_dew2019_beta(double t, double p)
    double S3O6_n2_dew2019_K(double t, double p)
    double S3O6_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S3O6_n2_dew2019_identifier():
    result = <bytes> S3O6_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S3O6_n2_dew2019_name():
    result = <bytes> S3O6_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S3O6_n2_dew2019_formula():
    result = <bytes> S3O6_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S3O6_n2_dew2019_mw():
    result = S3O6_n2_dew2019_mw()
    return result
def cy_S3O6_n2_dew2019_elements():
    cdef const double *e = S3O6_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S3O6_n2_dew2019_g(double t, double p):
    result = S3O6_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_dgdt(double t, double p):
    result = S3O6_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_dgdp(double t, double p):
    result = S3O6_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_d2gdt2(double t, double p):
    result = S3O6_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_d2gdtdp(double t, double p):
    result = S3O6_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_d2gdp2(double t, double p):
    result = S3O6_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_d3gdt3(double t, double p):
    result = S3O6_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_d3gdt2dp(double t, double p):
    result = S3O6_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_d3gdtdp2(double t, double p):
    result = S3O6_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_d3gdp3(double t, double p):
    result = S3O6_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_s(double t, double p):
    result = S3O6_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_v(double t, double p):
    result = S3O6_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_cv(double t, double p):
    result = S3O6_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_cp(double t, double p):
    result = S3O6_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_dcpdt(double t, double p):
    result = S3O6_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_alpha(double t, double p):
    result = S3O6_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_beta(double t, double p):
    result = S3O6_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_K(double t, double p):
    result = S3O6_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S3O6_n2_dew2019_Kp(double t, double p):
    result = S3O6_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S3_n2_dew2019_calc.h":
    const char *S3_n2_dew2019_identifier();
    const char *S3_n2_dew2019_name();
    const char *S3_n2_dew2019_formula();
    const double S3_n2_dew2019_mw();
    const double *S3_n2_dew2019_elements();
    double S3_n2_dew2019_g(double t, double p)
    double S3_n2_dew2019_dgdt(double t, double p)
    double S3_n2_dew2019_dgdp(double t, double p)
    double S3_n2_dew2019_d2gdt2(double t, double p)
    double S3_n2_dew2019_d2gdtdp(double t, double p)
    double S3_n2_dew2019_d2gdp2(double t, double p)
    double S3_n2_dew2019_d3gdt3(double t, double p)
    double S3_n2_dew2019_d3gdt2dp(double t, double p)
    double S3_n2_dew2019_d3gdtdp2(double t, double p)
    double S3_n2_dew2019_d3gdp3(double t, double p)
    double S3_n2_dew2019_s(double t, double p)
    double S3_n2_dew2019_v(double t, double p)
    double S3_n2_dew2019_cv(double t, double p)
    double S3_n2_dew2019_cp(double t, double p)
    double S3_n2_dew2019_dcpdt(double t, double p)
    double S3_n2_dew2019_alpha(double t, double p)
    double S3_n2_dew2019_beta(double t, double p)
    double S3_n2_dew2019_K(double t, double p)
    double S3_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S3_n2_dew2019_identifier():
    result = <bytes> S3_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S3_n2_dew2019_name():
    result = <bytes> S3_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S3_n2_dew2019_formula():
    result = <bytes> S3_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S3_n2_dew2019_mw():
    result = S3_n2_dew2019_mw()
    return result
def cy_S3_n2_dew2019_elements():
    cdef const double *e = S3_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S3_n2_dew2019_g(double t, double p):
    result = S3_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_dgdt(double t, double p):
    result = S3_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_dgdp(double t, double p):
    result = S3_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_d2gdt2(double t, double p):
    result = S3_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_d2gdtdp(double t, double p):
    result = S3_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_d2gdp2(double t, double p):
    result = S3_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_d3gdt3(double t, double p):
    result = S3_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_d3gdt2dp(double t, double p):
    result = S3_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_d3gdtdp2(double t, double p):
    result = S3_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_d3gdp3(double t, double p):
    result = S3_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_s(double t, double p):
    result = S3_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_v(double t, double p):
    result = S3_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_cv(double t, double p):
    result = S3_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_cp(double t, double p):
    result = S3_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_dcpdt(double t, double p):
    result = S3_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_alpha(double t, double p):
    result = S3_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_beta(double t, double p):
    result = S3_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_K(double t, double p):
    result = S3_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S3_n2_dew2019_Kp(double t, double p):
    result = S3_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S3_n_dew2019_calc.h":
    const char *S3_n_dew2019_identifier();
    const char *S3_n_dew2019_name();
    const char *S3_n_dew2019_formula();
    const double S3_n_dew2019_mw();
    const double *S3_n_dew2019_elements();
    double S3_n_dew2019_g(double t, double p)
    double S3_n_dew2019_dgdt(double t, double p)
    double S3_n_dew2019_dgdp(double t, double p)
    double S3_n_dew2019_d2gdt2(double t, double p)
    double S3_n_dew2019_d2gdtdp(double t, double p)
    double S3_n_dew2019_d2gdp2(double t, double p)
    double S3_n_dew2019_d3gdt3(double t, double p)
    double S3_n_dew2019_d3gdt2dp(double t, double p)
    double S3_n_dew2019_d3gdtdp2(double t, double p)
    double S3_n_dew2019_d3gdp3(double t, double p)
    double S3_n_dew2019_s(double t, double p)
    double S3_n_dew2019_v(double t, double p)
    double S3_n_dew2019_cv(double t, double p)
    double S3_n_dew2019_cp(double t, double p)
    double S3_n_dew2019_dcpdt(double t, double p)
    double S3_n_dew2019_alpha(double t, double p)
    double S3_n_dew2019_beta(double t, double p)
    double S3_n_dew2019_K(double t, double p)
    double S3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S3_n_dew2019_identifier():
    result = <bytes> S3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S3_n_dew2019_name():
    result = <bytes> S3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_S3_n_dew2019_formula():
    result = <bytes> S3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_S3_n_dew2019_mw():
    result = S3_n_dew2019_mw()
    return result
def cy_S3_n_dew2019_elements():
    cdef const double *e = S3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S3_n_dew2019_g(double t, double p):
    result = S3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_dgdt(double t, double p):
    result = S3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_dgdp(double t, double p):
    result = S3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_d2gdt2(double t, double p):
    result = S3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_d2gdtdp(double t, double p):
    result = S3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_d2gdp2(double t, double p):
    result = S3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_d3gdt3(double t, double p):
    result = S3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_d3gdt2dp(double t, double p):
    result = S3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_d3gdtdp2(double t, double p):
    result = S3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_d3gdp3(double t, double p):
    result = S3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_s(double t, double p):
    result = S3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_v(double t, double p):
    result = S3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_cv(double t, double p):
    result = S3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_cp(double t, double p):
    result = S3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_dcpdt(double t, double p):
    result = S3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_alpha(double t, double p):
    result = S3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_beta(double t, double p):
    result = S3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_K(double t, double p):
    result = S3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_S3_n_dew2019_Kp(double t, double p):
    result = S3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S2O8_n2_dew2019_calc.h":
    const char *S2O8_n2_dew2019_identifier();
    const char *S2O8_n2_dew2019_name();
    const char *S2O8_n2_dew2019_formula();
    const double S2O8_n2_dew2019_mw();
    const double *S2O8_n2_dew2019_elements();
    double S2O8_n2_dew2019_g(double t, double p)
    double S2O8_n2_dew2019_dgdt(double t, double p)
    double S2O8_n2_dew2019_dgdp(double t, double p)
    double S2O8_n2_dew2019_d2gdt2(double t, double p)
    double S2O8_n2_dew2019_d2gdtdp(double t, double p)
    double S2O8_n2_dew2019_d2gdp2(double t, double p)
    double S2O8_n2_dew2019_d3gdt3(double t, double p)
    double S2O8_n2_dew2019_d3gdt2dp(double t, double p)
    double S2O8_n2_dew2019_d3gdtdp2(double t, double p)
    double S2O8_n2_dew2019_d3gdp3(double t, double p)
    double S2O8_n2_dew2019_s(double t, double p)
    double S2O8_n2_dew2019_v(double t, double p)
    double S2O8_n2_dew2019_cv(double t, double p)
    double S2O8_n2_dew2019_cp(double t, double p)
    double S2O8_n2_dew2019_dcpdt(double t, double p)
    double S2O8_n2_dew2019_alpha(double t, double p)
    double S2O8_n2_dew2019_beta(double t, double p)
    double S2O8_n2_dew2019_K(double t, double p)
    double S2O8_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S2O8_n2_dew2019_identifier():
    result = <bytes> S2O8_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S2O8_n2_dew2019_name():
    result = <bytes> S2O8_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S2O8_n2_dew2019_formula():
    result = <bytes> S2O8_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S2O8_n2_dew2019_mw():
    result = S2O8_n2_dew2019_mw()
    return result
def cy_S2O8_n2_dew2019_elements():
    cdef const double *e = S2O8_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S2O8_n2_dew2019_g(double t, double p):
    result = S2O8_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_dgdt(double t, double p):
    result = S2O8_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_dgdp(double t, double p):
    result = S2O8_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_d2gdt2(double t, double p):
    result = S2O8_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_d2gdtdp(double t, double p):
    result = S2O8_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_d2gdp2(double t, double p):
    result = S2O8_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_d3gdt3(double t, double p):
    result = S2O8_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_d3gdt2dp(double t, double p):
    result = S2O8_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_d3gdtdp2(double t, double p):
    result = S2O8_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_d3gdp3(double t, double p):
    result = S2O8_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_s(double t, double p):
    result = S2O8_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_v(double t, double p):
    result = S2O8_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_cv(double t, double p):
    result = S2O8_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_cp(double t, double p):
    result = S2O8_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_dcpdt(double t, double p):
    result = S2O8_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_alpha(double t, double p):
    result = S2O8_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_beta(double t, double p):
    result = S2O8_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_K(double t, double p):
    result = S2O8_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S2O8_n2_dew2019_Kp(double t, double p):
    result = S2O8_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S2O6_n2_dew2019_calc.h":
    const char *S2O6_n2_dew2019_identifier();
    const char *S2O6_n2_dew2019_name();
    const char *S2O6_n2_dew2019_formula();
    const double S2O6_n2_dew2019_mw();
    const double *S2O6_n2_dew2019_elements();
    double S2O6_n2_dew2019_g(double t, double p)
    double S2O6_n2_dew2019_dgdt(double t, double p)
    double S2O6_n2_dew2019_dgdp(double t, double p)
    double S2O6_n2_dew2019_d2gdt2(double t, double p)
    double S2O6_n2_dew2019_d2gdtdp(double t, double p)
    double S2O6_n2_dew2019_d2gdp2(double t, double p)
    double S2O6_n2_dew2019_d3gdt3(double t, double p)
    double S2O6_n2_dew2019_d3gdt2dp(double t, double p)
    double S2O6_n2_dew2019_d3gdtdp2(double t, double p)
    double S2O6_n2_dew2019_d3gdp3(double t, double p)
    double S2O6_n2_dew2019_s(double t, double p)
    double S2O6_n2_dew2019_v(double t, double p)
    double S2O6_n2_dew2019_cv(double t, double p)
    double S2O6_n2_dew2019_cp(double t, double p)
    double S2O6_n2_dew2019_dcpdt(double t, double p)
    double S2O6_n2_dew2019_alpha(double t, double p)
    double S2O6_n2_dew2019_beta(double t, double p)
    double S2O6_n2_dew2019_K(double t, double p)
    double S2O6_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S2O6_n2_dew2019_identifier():
    result = <bytes> S2O6_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S2O6_n2_dew2019_name():
    result = <bytes> S2O6_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S2O6_n2_dew2019_formula():
    result = <bytes> S2O6_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S2O6_n2_dew2019_mw():
    result = S2O6_n2_dew2019_mw()
    return result
def cy_S2O6_n2_dew2019_elements():
    cdef const double *e = S2O6_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S2O6_n2_dew2019_g(double t, double p):
    result = S2O6_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_dgdt(double t, double p):
    result = S2O6_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_dgdp(double t, double p):
    result = S2O6_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_d2gdt2(double t, double p):
    result = S2O6_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_d2gdtdp(double t, double p):
    result = S2O6_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_d2gdp2(double t, double p):
    result = S2O6_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_d3gdt3(double t, double p):
    result = S2O6_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_d3gdt2dp(double t, double p):
    result = S2O6_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_d3gdtdp2(double t, double p):
    result = S2O6_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_d3gdp3(double t, double p):
    result = S2O6_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_s(double t, double p):
    result = S2O6_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_v(double t, double p):
    result = S2O6_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_cv(double t, double p):
    result = S2O6_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_cp(double t, double p):
    result = S2O6_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_dcpdt(double t, double p):
    result = S2O6_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_alpha(double t, double p):
    result = S2O6_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_beta(double t, double p):
    result = S2O6_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_K(double t, double p):
    result = S2O6_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S2O6_n2_dew2019_Kp(double t, double p):
    result = S2O6_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S2O5_n2_dew2019_calc.h":
    const char *S2O5_n2_dew2019_identifier();
    const char *S2O5_n2_dew2019_name();
    const char *S2O5_n2_dew2019_formula();
    const double S2O5_n2_dew2019_mw();
    const double *S2O5_n2_dew2019_elements();
    double S2O5_n2_dew2019_g(double t, double p)
    double S2O5_n2_dew2019_dgdt(double t, double p)
    double S2O5_n2_dew2019_dgdp(double t, double p)
    double S2O5_n2_dew2019_d2gdt2(double t, double p)
    double S2O5_n2_dew2019_d2gdtdp(double t, double p)
    double S2O5_n2_dew2019_d2gdp2(double t, double p)
    double S2O5_n2_dew2019_d3gdt3(double t, double p)
    double S2O5_n2_dew2019_d3gdt2dp(double t, double p)
    double S2O5_n2_dew2019_d3gdtdp2(double t, double p)
    double S2O5_n2_dew2019_d3gdp3(double t, double p)
    double S2O5_n2_dew2019_s(double t, double p)
    double S2O5_n2_dew2019_v(double t, double p)
    double S2O5_n2_dew2019_cv(double t, double p)
    double S2O5_n2_dew2019_cp(double t, double p)
    double S2O5_n2_dew2019_dcpdt(double t, double p)
    double S2O5_n2_dew2019_alpha(double t, double p)
    double S2O5_n2_dew2019_beta(double t, double p)
    double S2O5_n2_dew2019_K(double t, double p)
    double S2O5_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S2O5_n2_dew2019_identifier():
    result = <bytes> S2O5_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S2O5_n2_dew2019_name():
    result = <bytes> S2O5_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S2O5_n2_dew2019_formula():
    result = <bytes> S2O5_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S2O5_n2_dew2019_mw():
    result = S2O5_n2_dew2019_mw()
    return result
def cy_S2O5_n2_dew2019_elements():
    cdef const double *e = S2O5_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S2O5_n2_dew2019_g(double t, double p):
    result = S2O5_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_dgdt(double t, double p):
    result = S2O5_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_dgdp(double t, double p):
    result = S2O5_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_d2gdt2(double t, double p):
    result = S2O5_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_d2gdtdp(double t, double p):
    result = S2O5_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_d2gdp2(double t, double p):
    result = S2O5_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_d3gdt3(double t, double p):
    result = S2O5_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_d3gdt2dp(double t, double p):
    result = S2O5_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_d3gdtdp2(double t, double p):
    result = S2O5_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_d3gdp3(double t, double p):
    result = S2O5_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_s(double t, double p):
    result = S2O5_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_v(double t, double p):
    result = S2O5_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_cv(double t, double p):
    result = S2O5_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_cp(double t, double p):
    result = S2O5_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_dcpdt(double t, double p):
    result = S2O5_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_alpha(double t, double p):
    result = S2O5_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_beta(double t, double p):
    result = S2O5_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_K(double t, double p):
    result = S2O5_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S2O5_n2_dew2019_Kp(double t, double p):
    result = S2O5_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S2O4_n2_dew2019_calc.h":
    const char *S2O4_n2_dew2019_identifier();
    const char *S2O4_n2_dew2019_name();
    const char *S2O4_n2_dew2019_formula();
    const double S2O4_n2_dew2019_mw();
    const double *S2O4_n2_dew2019_elements();
    double S2O4_n2_dew2019_g(double t, double p)
    double S2O4_n2_dew2019_dgdt(double t, double p)
    double S2O4_n2_dew2019_dgdp(double t, double p)
    double S2O4_n2_dew2019_d2gdt2(double t, double p)
    double S2O4_n2_dew2019_d2gdtdp(double t, double p)
    double S2O4_n2_dew2019_d2gdp2(double t, double p)
    double S2O4_n2_dew2019_d3gdt3(double t, double p)
    double S2O4_n2_dew2019_d3gdt2dp(double t, double p)
    double S2O4_n2_dew2019_d3gdtdp2(double t, double p)
    double S2O4_n2_dew2019_d3gdp3(double t, double p)
    double S2O4_n2_dew2019_s(double t, double p)
    double S2O4_n2_dew2019_v(double t, double p)
    double S2O4_n2_dew2019_cv(double t, double p)
    double S2O4_n2_dew2019_cp(double t, double p)
    double S2O4_n2_dew2019_dcpdt(double t, double p)
    double S2O4_n2_dew2019_alpha(double t, double p)
    double S2O4_n2_dew2019_beta(double t, double p)
    double S2O4_n2_dew2019_K(double t, double p)
    double S2O4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S2O4_n2_dew2019_identifier():
    result = <bytes> S2O4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S2O4_n2_dew2019_name():
    result = <bytes> S2O4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S2O4_n2_dew2019_formula():
    result = <bytes> S2O4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S2O4_n2_dew2019_mw():
    result = S2O4_n2_dew2019_mw()
    return result
def cy_S2O4_n2_dew2019_elements():
    cdef const double *e = S2O4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S2O4_n2_dew2019_g(double t, double p):
    result = S2O4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_dgdt(double t, double p):
    result = S2O4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_dgdp(double t, double p):
    result = S2O4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_d2gdt2(double t, double p):
    result = S2O4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_d2gdtdp(double t, double p):
    result = S2O4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_d2gdp2(double t, double p):
    result = S2O4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_d3gdt3(double t, double p):
    result = S2O4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_d3gdt2dp(double t, double p):
    result = S2O4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_d3gdtdp2(double t, double p):
    result = S2O4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_d3gdp3(double t, double p):
    result = S2O4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_s(double t, double p):
    result = S2O4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_v(double t, double p):
    result = S2O4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_cv(double t, double p):
    result = S2O4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_cp(double t, double p):
    result = S2O4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_dcpdt(double t, double p):
    result = S2O4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_alpha(double t, double p):
    result = S2O4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_beta(double t, double p):
    result = S2O4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_K(double t, double p):
    result = S2O4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S2O4_n2_dew2019_Kp(double t, double p):
    result = S2O4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S2O3_n2_dew2019_calc.h":
    const char *S2O3_n2_dew2019_identifier();
    const char *S2O3_n2_dew2019_name();
    const char *S2O3_n2_dew2019_formula();
    const double S2O3_n2_dew2019_mw();
    const double *S2O3_n2_dew2019_elements();
    double S2O3_n2_dew2019_g(double t, double p)
    double S2O3_n2_dew2019_dgdt(double t, double p)
    double S2O3_n2_dew2019_dgdp(double t, double p)
    double S2O3_n2_dew2019_d2gdt2(double t, double p)
    double S2O3_n2_dew2019_d2gdtdp(double t, double p)
    double S2O3_n2_dew2019_d2gdp2(double t, double p)
    double S2O3_n2_dew2019_d3gdt3(double t, double p)
    double S2O3_n2_dew2019_d3gdt2dp(double t, double p)
    double S2O3_n2_dew2019_d3gdtdp2(double t, double p)
    double S2O3_n2_dew2019_d3gdp3(double t, double p)
    double S2O3_n2_dew2019_s(double t, double p)
    double S2O3_n2_dew2019_v(double t, double p)
    double S2O3_n2_dew2019_cv(double t, double p)
    double S2O3_n2_dew2019_cp(double t, double p)
    double S2O3_n2_dew2019_dcpdt(double t, double p)
    double S2O3_n2_dew2019_alpha(double t, double p)
    double S2O3_n2_dew2019_beta(double t, double p)
    double S2O3_n2_dew2019_K(double t, double p)
    double S2O3_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S2O3_n2_dew2019_identifier():
    result = <bytes> S2O3_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S2O3_n2_dew2019_name():
    result = <bytes> S2O3_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S2O3_n2_dew2019_formula():
    result = <bytes> S2O3_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S2O3_n2_dew2019_mw():
    result = S2O3_n2_dew2019_mw()
    return result
def cy_S2O3_n2_dew2019_elements():
    cdef const double *e = S2O3_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S2O3_n2_dew2019_g(double t, double p):
    result = S2O3_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_dgdt(double t, double p):
    result = S2O3_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_dgdp(double t, double p):
    result = S2O3_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_d2gdt2(double t, double p):
    result = S2O3_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_d2gdtdp(double t, double p):
    result = S2O3_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_d2gdp2(double t, double p):
    result = S2O3_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_d3gdt3(double t, double p):
    result = S2O3_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_d3gdt2dp(double t, double p):
    result = S2O3_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_d3gdtdp2(double t, double p):
    result = S2O3_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_d3gdp3(double t, double p):
    result = S2O3_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_s(double t, double p):
    result = S2O3_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_v(double t, double p):
    result = S2O3_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_cv(double t, double p):
    result = S2O3_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_cp(double t, double p):
    result = S2O3_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_dcpdt(double t, double p):
    result = S2O3_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_alpha(double t, double p):
    result = S2O3_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_beta(double t, double p):
    result = S2O3_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_K(double t, double p):
    result = S2O3_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S2O3_n2_dew2019_Kp(double t, double p):
    result = S2O3_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "S2_n2_dew2019_calc.h":
    const char *S2_n2_dew2019_identifier();
    const char *S2_n2_dew2019_name();
    const char *S2_n2_dew2019_formula();
    const double S2_n2_dew2019_mw();
    const double *S2_n2_dew2019_elements();
    double S2_n2_dew2019_g(double t, double p)
    double S2_n2_dew2019_dgdt(double t, double p)
    double S2_n2_dew2019_dgdp(double t, double p)
    double S2_n2_dew2019_d2gdt2(double t, double p)
    double S2_n2_dew2019_d2gdtdp(double t, double p)
    double S2_n2_dew2019_d2gdp2(double t, double p)
    double S2_n2_dew2019_d3gdt3(double t, double p)
    double S2_n2_dew2019_d3gdt2dp(double t, double p)
    double S2_n2_dew2019_d3gdtdp2(double t, double p)
    double S2_n2_dew2019_d3gdp3(double t, double p)
    double S2_n2_dew2019_s(double t, double p)
    double S2_n2_dew2019_v(double t, double p)
    double S2_n2_dew2019_cv(double t, double p)
    double S2_n2_dew2019_cp(double t, double p)
    double S2_n2_dew2019_dcpdt(double t, double p)
    double S2_n2_dew2019_alpha(double t, double p)
    double S2_n2_dew2019_beta(double t, double p)
    double S2_n2_dew2019_K(double t, double p)
    double S2_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_S2_n2_dew2019_identifier():
    result = <bytes> S2_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_S2_n2_dew2019_name():
    result = <bytes> S2_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_S2_n2_dew2019_formula():
    result = <bytes> S2_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_S2_n2_dew2019_mw():
    result = S2_n2_dew2019_mw()
    return result
def cy_S2_n2_dew2019_elements():
    cdef const double *e = S2_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_S2_n2_dew2019_g(double t, double p):
    result = S2_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_dgdt(double t, double p):
    result = S2_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_dgdp(double t, double p):
    result = S2_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_d2gdt2(double t, double p):
    result = S2_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_d2gdtdp(double t, double p):
    result = S2_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_d2gdp2(double t, double p):
    result = S2_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_d3gdt3(double t, double p):
    result = S2_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_d3gdt2dp(double t, double p):
    result = S2_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_d3gdtdp2(double t, double p):
    result = S2_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_d3gdp3(double t, double p):
    result = S2_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_s(double t, double p):
    result = S2_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_v(double t, double p):
    result = S2_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_cv(double t, double p):
    result = S2_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_cp(double t, double p):
    result = S2_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_dcpdt(double t, double p):
    result = S2_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_alpha(double t, double p):
    result = S2_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_beta(double t, double p):
    result = S2_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_K(double t, double p):
    result = S2_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_S2_n2_dew2019_Kp(double t, double p):
    result = S2_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "RN_l_AQ_r__dew2019_calc.h":
    const char *RN_l_AQ_r__dew2019_identifier();
    const char *RN_l_AQ_r__dew2019_name();
    const char *RN_l_AQ_r__dew2019_formula();
    const double RN_l_AQ_r__dew2019_mw();
    const double *RN_l_AQ_r__dew2019_elements();
    double RN_l_AQ_r__dew2019_g(double t, double p)
    double RN_l_AQ_r__dew2019_dgdt(double t, double p)
    double RN_l_AQ_r__dew2019_dgdp(double t, double p)
    double RN_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double RN_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double RN_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double RN_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double RN_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double RN_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double RN_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double RN_l_AQ_r__dew2019_s(double t, double p)
    double RN_l_AQ_r__dew2019_v(double t, double p)
    double RN_l_AQ_r__dew2019_cv(double t, double p)
    double RN_l_AQ_r__dew2019_cp(double t, double p)
    double RN_l_AQ_r__dew2019_dcpdt(double t, double p)
    double RN_l_AQ_r__dew2019_alpha(double t, double p)
    double RN_l_AQ_r__dew2019_beta(double t, double p)
    double RN_l_AQ_r__dew2019_K(double t, double p)
    double RN_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_RN_l_AQ_r__dew2019_identifier():
    result = <bytes> RN_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_RN_l_AQ_r__dew2019_name():
    result = <bytes> RN_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_RN_l_AQ_r__dew2019_formula():
    result = <bytes> RN_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_RN_l_AQ_r__dew2019_mw():
    result = RN_l_AQ_r__dew2019_mw()
    return result
def cy_RN_l_AQ_r__dew2019_elements():
    cdef const double *e = RN_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_RN_l_AQ_r__dew2019_g(double t, double p):
    result = RN_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_dgdt(double t, double p):
    result = RN_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_dgdp(double t, double p):
    result = RN_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = RN_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = RN_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = RN_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = RN_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = RN_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = RN_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = RN_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_s(double t, double p):
    result = RN_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_v(double t, double p):
    result = RN_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_cv(double t, double p):
    result = RN_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_cp(double t, double p):
    result = RN_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = RN_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_alpha(double t, double p):
    result = RN_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_beta(double t, double p):
    result = RN_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_K(double t, double p):
    result = RN_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_RN_l_AQ_r__dew2019_Kp(double t, double p):
    result = RN_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "REO4_n_dew2019_calc.h":
    const char *REO4_n_dew2019_identifier();
    const char *REO4_n_dew2019_name();
    const char *REO4_n_dew2019_formula();
    const double REO4_n_dew2019_mw();
    const double *REO4_n_dew2019_elements();
    double REO4_n_dew2019_g(double t, double p)
    double REO4_n_dew2019_dgdt(double t, double p)
    double REO4_n_dew2019_dgdp(double t, double p)
    double REO4_n_dew2019_d2gdt2(double t, double p)
    double REO4_n_dew2019_d2gdtdp(double t, double p)
    double REO4_n_dew2019_d2gdp2(double t, double p)
    double REO4_n_dew2019_d3gdt3(double t, double p)
    double REO4_n_dew2019_d3gdt2dp(double t, double p)
    double REO4_n_dew2019_d3gdtdp2(double t, double p)
    double REO4_n_dew2019_d3gdp3(double t, double p)
    double REO4_n_dew2019_s(double t, double p)
    double REO4_n_dew2019_v(double t, double p)
    double REO4_n_dew2019_cv(double t, double p)
    double REO4_n_dew2019_cp(double t, double p)
    double REO4_n_dew2019_dcpdt(double t, double p)
    double REO4_n_dew2019_alpha(double t, double p)
    double REO4_n_dew2019_beta(double t, double p)
    double REO4_n_dew2019_K(double t, double p)
    double REO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_REO4_n_dew2019_identifier():
    result = <bytes> REO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_REO4_n_dew2019_name():
    result = <bytes> REO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_REO4_n_dew2019_formula():
    result = <bytes> REO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_REO4_n_dew2019_mw():
    result = REO4_n_dew2019_mw()
    return result
def cy_REO4_n_dew2019_elements():
    cdef const double *e = REO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_REO4_n_dew2019_g(double t, double p):
    result = REO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_dgdt(double t, double p):
    result = REO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_dgdp(double t, double p):
    result = REO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_d2gdt2(double t, double p):
    result = REO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_d2gdtdp(double t, double p):
    result = REO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_d2gdp2(double t, double p):
    result = REO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_d3gdt3(double t, double p):
    result = REO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_d3gdt2dp(double t, double p):
    result = REO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_d3gdtdp2(double t, double p):
    result = REO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_d3gdp3(double t, double p):
    result = REO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_s(double t, double p):
    result = REO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_v(double t, double p):
    result = REO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_cv(double t, double p):
    result = REO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_cp(double t, double p):
    result = REO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_dcpdt(double t, double p):
    result = REO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_alpha(double t, double p):
    result = REO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_beta(double t, double p):
    result = REO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_K(double t, double p):
    result = REO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_REO4_n_dew2019_Kp(double t, double p):
    result = REO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "RB_p_dew2019_calc.h":
    const char *RB_p_dew2019_identifier();
    const char *RB_p_dew2019_name();
    const char *RB_p_dew2019_formula();
    const double RB_p_dew2019_mw();
    const double *RB_p_dew2019_elements();
    double RB_p_dew2019_g(double t, double p)
    double RB_p_dew2019_dgdt(double t, double p)
    double RB_p_dew2019_dgdp(double t, double p)
    double RB_p_dew2019_d2gdt2(double t, double p)
    double RB_p_dew2019_d2gdtdp(double t, double p)
    double RB_p_dew2019_d2gdp2(double t, double p)
    double RB_p_dew2019_d3gdt3(double t, double p)
    double RB_p_dew2019_d3gdt2dp(double t, double p)
    double RB_p_dew2019_d3gdtdp2(double t, double p)
    double RB_p_dew2019_d3gdp3(double t, double p)
    double RB_p_dew2019_s(double t, double p)
    double RB_p_dew2019_v(double t, double p)
    double RB_p_dew2019_cv(double t, double p)
    double RB_p_dew2019_cp(double t, double p)
    double RB_p_dew2019_dcpdt(double t, double p)
    double RB_p_dew2019_alpha(double t, double p)
    double RB_p_dew2019_beta(double t, double p)
    double RB_p_dew2019_K(double t, double p)
    double RB_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_RB_p_dew2019_identifier():
    result = <bytes> RB_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_RB_p_dew2019_name():
    result = <bytes> RB_p_dew2019_name()
    return result.decode('UTF-8')
def cy_RB_p_dew2019_formula():
    result = <bytes> RB_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_RB_p_dew2019_mw():
    result = RB_p_dew2019_mw()
    return result
def cy_RB_p_dew2019_elements():
    cdef const double *e = RB_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_RB_p_dew2019_g(double t, double p):
    result = RB_p_dew2019_g(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_dgdt(double t, double p):
    result = RB_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_dgdp(double t, double p):
    result = RB_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_d2gdt2(double t, double p):
    result = RB_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_d2gdtdp(double t, double p):
    result = RB_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_d2gdp2(double t, double p):
    result = RB_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_d3gdt3(double t, double p):
    result = RB_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_d3gdt2dp(double t, double p):
    result = RB_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_d3gdtdp2(double t, double p):
    result = RB_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_d3gdp3(double t, double p):
    result = RB_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_s(double t, double p):
    result = RB_p_dew2019_s(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_v(double t, double p):
    result = RB_p_dew2019_v(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_cv(double t, double p):
    result = RB_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_cp(double t, double p):
    result = RB_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_dcpdt(double t, double p):
    result = RB_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_alpha(double t, double p):
    result = RB_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_beta(double t, double p):
    result = RB_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_K(double t, double p):
    result = RB_p_dew2019_K(<double> t, <double> p)
    return result
def cy_RB_p_dew2019_Kp(double t, double p):
    result = RB_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "RA_p2_dew2019_calc.h":
    const char *RA_p2_dew2019_identifier();
    const char *RA_p2_dew2019_name();
    const char *RA_p2_dew2019_formula();
    const double RA_p2_dew2019_mw();
    const double *RA_p2_dew2019_elements();
    double RA_p2_dew2019_g(double t, double p)
    double RA_p2_dew2019_dgdt(double t, double p)
    double RA_p2_dew2019_dgdp(double t, double p)
    double RA_p2_dew2019_d2gdt2(double t, double p)
    double RA_p2_dew2019_d2gdtdp(double t, double p)
    double RA_p2_dew2019_d2gdp2(double t, double p)
    double RA_p2_dew2019_d3gdt3(double t, double p)
    double RA_p2_dew2019_d3gdt2dp(double t, double p)
    double RA_p2_dew2019_d3gdtdp2(double t, double p)
    double RA_p2_dew2019_d3gdp3(double t, double p)
    double RA_p2_dew2019_s(double t, double p)
    double RA_p2_dew2019_v(double t, double p)
    double RA_p2_dew2019_cv(double t, double p)
    double RA_p2_dew2019_cp(double t, double p)
    double RA_p2_dew2019_dcpdt(double t, double p)
    double RA_p2_dew2019_alpha(double t, double p)
    double RA_p2_dew2019_beta(double t, double p)
    double RA_p2_dew2019_K(double t, double p)
    double RA_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_RA_p2_dew2019_identifier():
    result = <bytes> RA_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_RA_p2_dew2019_name():
    result = <bytes> RA_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_RA_p2_dew2019_formula():
    result = <bytes> RA_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_RA_p2_dew2019_mw():
    result = RA_p2_dew2019_mw()
    return result
def cy_RA_p2_dew2019_elements():
    cdef const double *e = RA_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_RA_p2_dew2019_g(double t, double p):
    result = RA_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_dgdt(double t, double p):
    result = RA_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_dgdp(double t, double p):
    result = RA_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_d2gdt2(double t, double p):
    result = RA_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_d2gdtdp(double t, double p):
    result = RA_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_d2gdp2(double t, double p):
    result = RA_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_d3gdt3(double t, double p):
    result = RA_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_d3gdt2dp(double t, double p):
    result = RA_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_d3gdtdp2(double t, double p):
    result = RA_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_d3gdp3(double t, double p):
    result = RA_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_s(double t, double p):
    result = RA_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_v(double t, double p):
    result = RA_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_cv(double t, double p):
    result = RA_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_cp(double t, double p):
    result = RA_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_dcpdt(double t, double p):
    result = RA_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_alpha(double t, double p):
    result = RA_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_beta(double t, double p):
    result = RA_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_K(double t, double p):
    result = RA_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_RA_p2_dew2019_Kp(double t, double p):
    result = RA_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PROPANOL_l_AQ_r__dew2019_calc.h":
    const char *PROPANOL_l_AQ_r__dew2019_identifier();
    const char *PROPANOL_l_AQ_r__dew2019_name();
    const char *PROPANOL_l_AQ_r__dew2019_formula();
    const double PROPANOL_l_AQ_r__dew2019_mw();
    const double *PROPANOL_l_AQ_r__dew2019_elements();
    double PROPANOL_l_AQ_r__dew2019_g(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_dgdt(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_dgdp(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_s(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_v(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_cv(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_cp(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_dcpdt(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_alpha(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_beta(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_K(double t, double p)
    double PROPANOL_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PROPANOL_l_AQ_r__dew2019_identifier():
    result = <bytes> PROPANOL_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_PROPANOL_l_AQ_r__dew2019_name():
    result = <bytes> PROPANOL_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_PROPANOL_l_AQ_r__dew2019_formula():
    result = <bytes> PROPANOL_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_PROPANOL_l_AQ_r__dew2019_mw():
    result = PROPANOL_l_AQ_r__dew2019_mw()
    return result
def cy_PROPANOL_l_AQ_r__dew2019_elements():
    cdef const double *e = PROPANOL_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PROPANOL_l_AQ_r__dew2019_g(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_dgdt(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_dgdp(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_s(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_v(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_cv(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_cp(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_alpha(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_beta(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_K(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_PROPANOL_l_AQ_r__dew2019_Kp(double t, double p):
    result = PROPANOL_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "C2H5COOH_l_AQ_r__dew2019_calc.h":
    const char *C2H5COOH_l_AQ_r__dew2019_identifier();
    const char *C2H5COOH_l_AQ_r__dew2019_name();
    const char *C2H5COOH_l_AQ_r__dew2019_formula();
    const double C2H5COOH_l_AQ_r__dew2019_mw();
    const double *C2H5COOH_l_AQ_r__dew2019_elements();
    double C2H5COOH_l_AQ_r__dew2019_g(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_dgdt(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_dgdp(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_s(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_v(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_cv(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_cp(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_dcpdt(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_alpha(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_beta(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_K(double t, double p)
    double C2H5COOH_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_C2H5COOH_l_AQ_r__dew2019_identifier():
    result = <bytes> C2H5COOH_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_C2H5COOH_l_AQ_r__dew2019_name():
    result = <bytes> C2H5COOH_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_C2H5COOH_l_AQ_r__dew2019_formula():
    result = <bytes> C2H5COOH_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_C2H5COOH_l_AQ_r__dew2019_mw():
    result = C2H5COOH_l_AQ_r__dew2019_mw()
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_elements():
    cdef const double *e = C2H5COOH_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_C2H5COOH_l_AQ_r__dew2019_g(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_dgdt(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_dgdp(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_s(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_v(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_cv(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_cp(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_alpha(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_beta(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_K(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_C2H5COOH_l_AQ_r__dew2019_Kp(double t, double p):
    result = C2H5COOH_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CH3CH2COO_n_dew2019_calc.h":
    const char *CH3CH2COO_n_dew2019_identifier();
    const char *CH3CH2COO_n_dew2019_name();
    const char *CH3CH2COO_n_dew2019_formula();
    const double CH3CH2COO_n_dew2019_mw();
    const double *CH3CH2COO_n_dew2019_elements();
    double CH3CH2COO_n_dew2019_g(double t, double p)
    double CH3CH2COO_n_dew2019_dgdt(double t, double p)
    double CH3CH2COO_n_dew2019_dgdp(double t, double p)
    double CH3CH2COO_n_dew2019_d2gdt2(double t, double p)
    double CH3CH2COO_n_dew2019_d2gdtdp(double t, double p)
    double CH3CH2COO_n_dew2019_d2gdp2(double t, double p)
    double CH3CH2COO_n_dew2019_d3gdt3(double t, double p)
    double CH3CH2COO_n_dew2019_d3gdt2dp(double t, double p)
    double CH3CH2COO_n_dew2019_d3gdtdp2(double t, double p)
    double CH3CH2COO_n_dew2019_d3gdp3(double t, double p)
    double CH3CH2COO_n_dew2019_s(double t, double p)
    double CH3CH2COO_n_dew2019_v(double t, double p)
    double CH3CH2COO_n_dew2019_cv(double t, double p)
    double CH3CH2COO_n_dew2019_cp(double t, double p)
    double CH3CH2COO_n_dew2019_dcpdt(double t, double p)
    double CH3CH2COO_n_dew2019_alpha(double t, double p)
    double CH3CH2COO_n_dew2019_beta(double t, double p)
    double CH3CH2COO_n_dew2019_K(double t, double p)
    double CH3CH2COO_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CH3CH2COO_n_dew2019_identifier():
    result = <bytes> CH3CH2COO_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CH3CH2COO_n_dew2019_name():
    result = <bytes> CH3CH2COO_n_dew2019_name()
    return result.decode('UTF-8')
def cy_CH3CH2COO_n_dew2019_formula():
    result = <bytes> CH3CH2COO_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_CH3CH2COO_n_dew2019_mw():
    result = CH3CH2COO_n_dew2019_mw()
    return result
def cy_CH3CH2COO_n_dew2019_elements():
    cdef const double *e = CH3CH2COO_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CH3CH2COO_n_dew2019_g(double t, double p):
    result = CH3CH2COO_n_dew2019_g(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_dgdt(double t, double p):
    result = CH3CH2COO_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_dgdp(double t, double p):
    result = CH3CH2COO_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_d2gdt2(double t, double p):
    result = CH3CH2COO_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_d2gdtdp(double t, double p):
    result = CH3CH2COO_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_d2gdp2(double t, double p):
    result = CH3CH2COO_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_d3gdt3(double t, double p):
    result = CH3CH2COO_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_d3gdt2dp(double t, double p):
    result = CH3CH2COO_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_d3gdtdp2(double t, double p):
    result = CH3CH2COO_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_d3gdp3(double t, double p):
    result = CH3CH2COO_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_s(double t, double p):
    result = CH3CH2COO_n_dew2019_s(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_v(double t, double p):
    result = CH3CH2COO_n_dew2019_v(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_cv(double t, double p):
    result = CH3CH2COO_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_cp(double t, double p):
    result = CH3CH2COO_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_dcpdt(double t, double p):
    result = CH3CH2COO_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_alpha(double t, double p):
    result = CH3CH2COO_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_beta(double t, double p):
    result = CH3CH2COO_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_K(double t, double p):
    result = CH3CH2COO_n_dew2019_K(<double> t, <double> p)
    return result
def cy_CH3CH2COO_n_dew2019_Kp(double t, double p):
    result = CH3CH2COO_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PROPANE_l_AQ_r__dew2019_calc.h":
    const char *PROPANE_l_AQ_r__dew2019_identifier();
    const char *PROPANE_l_AQ_r__dew2019_name();
    const char *PROPANE_l_AQ_r__dew2019_formula();
    const double PROPANE_l_AQ_r__dew2019_mw();
    const double *PROPANE_l_AQ_r__dew2019_elements();
    double PROPANE_l_AQ_r__dew2019_g(double t, double p)
    double PROPANE_l_AQ_r__dew2019_dgdt(double t, double p)
    double PROPANE_l_AQ_r__dew2019_dgdp(double t, double p)
    double PROPANE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double PROPANE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double PROPANE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double PROPANE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double PROPANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double PROPANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double PROPANE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double PROPANE_l_AQ_r__dew2019_s(double t, double p)
    double PROPANE_l_AQ_r__dew2019_v(double t, double p)
    double PROPANE_l_AQ_r__dew2019_cv(double t, double p)
    double PROPANE_l_AQ_r__dew2019_cp(double t, double p)
    double PROPANE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double PROPANE_l_AQ_r__dew2019_alpha(double t, double p)
    double PROPANE_l_AQ_r__dew2019_beta(double t, double p)
    double PROPANE_l_AQ_r__dew2019_K(double t, double p)
    double PROPANE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PROPANE_l_AQ_r__dew2019_identifier():
    result = <bytes> PROPANE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_PROPANE_l_AQ_r__dew2019_name():
    result = <bytes> PROPANE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_PROPANE_l_AQ_r__dew2019_formula():
    result = <bytes> PROPANE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_PROPANE_l_AQ_r__dew2019_mw():
    result = PROPANE_l_AQ_r__dew2019_mw()
    return result
def cy_PROPANE_l_AQ_r__dew2019_elements():
    cdef const double *e = PROPANE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PROPANE_l_AQ_r__dew2019_g(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_s(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_v(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_cv(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_cp(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_alpha(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_beta(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_K(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_PROPANE_l_AQ_r__dew2019_Kp(double t, double p):
    result = PROPANE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PR_p3_dew2019_calc.h":
    const char *PR_p3_dew2019_identifier();
    const char *PR_p3_dew2019_name();
    const char *PR_p3_dew2019_formula();
    const double PR_p3_dew2019_mw();
    const double *PR_p3_dew2019_elements();
    double PR_p3_dew2019_g(double t, double p)
    double PR_p3_dew2019_dgdt(double t, double p)
    double PR_p3_dew2019_dgdp(double t, double p)
    double PR_p3_dew2019_d2gdt2(double t, double p)
    double PR_p3_dew2019_d2gdtdp(double t, double p)
    double PR_p3_dew2019_d2gdp2(double t, double p)
    double PR_p3_dew2019_d3gdt3(double t, double p)
    double PR_p3_dew2019_d3gdt2dp(double t, double p)
    double PR_p3_dew2019_d3gdtdp2(double t, double p)
    double PR_p3_dew2019_d3gdp3(double t, double p)
    double PR_p3_dew2019_s(double t, double p)
    double PR_p3_dew2019_v(double t, double p)
    double PR_p3_dew2019_cv(double t, double p)
    double PR_p3_dew2019_cp(double t, double p)
    double PR_p3_dew2019_dcpdt(double t, double p)
    double PR_p3_dew2019_alpha(double t, double p)
    double PR_p3_dew2019_beta(double t, double p)
    double PR_p3_dew2019_K(double t, double p)
    double PR_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PR_p3_dew2019_identifier():
    result = <bytes> PR_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_PR_p3_dew2019_name():
    result = <bytes> PR_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_PR_p3_dew2019_formula():
    result = <bytes> PR_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_PR_p3_dew2019_mw():
    result = PR_p3_dew2019_mw()
    return result
def cy_PR_p3_dew2019_elements():
    cdef const double *e = PR_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PR_p3_dew2019_g(double t, double p):
    result = PR_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_dgdt(double t, double p):
    result = PR_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_dgdp(double t, double p):
    result = PR_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_d2gdt2(double t, double p):
    result = PR_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_d2gdtdp(double t, double p):
    result = PR_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_d2gdp2(double t, double p):
    result = PR_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_d3gdt3(double t, double p):
    result = PR_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_d3gdt2dp(double t, double p):
    result = PR_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_d3gdtdp2(double t, double p):
    result = PR_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_d3gdp3(double t, double p):
    result = PR_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_s(double t, double p):
    result = PR_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_v(double t, double p):
    result = PR_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_cv(double t, double p):
    result = PR_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_cp(double t, double p):
    result = PR_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_dcpdt(double t, double p):
    result = PR_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_alpha(double t, double p):
    result = PR_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_beta(double t, double p):
    result = PR_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_K(double t, double p):
    result = PR_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_PR_p3_dew2019_Kp(double t, double p):
    result = PR_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PO4_n3_dew2019_calc.h":
    const char *PO4_n3_dew2019_identifier();
    const char *PO4_n3_dew2019_name();
    const char *PO4_n3_dew2019_formula();
    const double PO4_n3_dew2019_mw();
    const double *PO4_n3_dew2019_elements();
    double PO4_n3_dew2019_g(double t, double p)
    double PO4_n3_dew2019_dgdt(double t, double p)
    double PO4_n3_dew2019_dgdp(double t, double p)
    double PO4_n3_dew2019_d2gdt2(double t, double p)
    double PO4_n3_dew2019_d2gdtdp(double t, double p)
    double PO4_n3_dew2019_d2gdp2(double t, double p)
    double PO4_n3_dew2019_d3gdt3(double t, double p)
    double PO4_n3_dew2019_d3gdt2dp(double t, double p)
    double PO4_n3_dew2019_d3gdtdp2(double t, double p)
    double PO4_n3_dew2019_d3gdp3(double t, double p)
    double PO4_n3_dew2019_s(double t, double p)
    double PO4_n3_dew2019_v(double t, double p)
    double PO4_n3_dew2019_cv(double t, double p)
    double PO4_n3_dew2019_cp(double t, double p)
    double PO4_n3_dew2019_dcpdt(double t, double p)
    double PO4_n3_dew2019_alpha(double t, double p)
    double PO4_n3_dew2019_beta(double t, double p)
    double PO4_n3_dew2019_K(double t, double p)
    double PO4_n3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PO4_n3_dew2019_identifier():
    result = <bytes> PO4_n3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_PO4_n3_dew2019_name():
    result = <bytes> PO4_n3_dew2019_name()
    return result.decode('UTF-8')
def cy_PO4_n3_dew2019_formula():
    result = <bytes> PO4_n3_dew2019_formula()
    return result.decode('UTF-8')
def cy_PO4_n3_dew2019_mw():
    result = PO4_n3_dew2019_mw()
    return result
def cy_PO4_n3_dew2019_elements():
    cdef const double *e = PO4_n3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PO4_n3_dew2019_g(double t, double p):
    result = PO4_n3_dew2019_g(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_dgdt(double t, double p):
    result = PO4_n3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_dgdp(double t, double p):
    result = PO4_n3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_d2gdt2(double t, double p):
    result = PO4_n3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_d2gdtdp(double t, double p):
    result = PO4_n3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_d2gdp2(double t, double p):
    result = PO4_n3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_d3gdt3(double t, double p):
    result = PO4_n3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_d3gdt2dp(double t, double p):
    result = PO4_n3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_d3gdtdp2(double t, double p):
    result = PO4_n3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_d3gdp3(double t, double p):
    result = PO4_n3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_s(double t, double p):
    result = PO4_n3_dew2019_s(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_v(double t, double p):
    result = PO4_n3_dew2019_v(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_cv(double t, double p):
    result = PO4_n3_dew2019_cv(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_cp(double t, double p):
    result = PO4_n3_dew2019_cp(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_dcpdt(double t, double p):
    result = PO4_n3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_alpha(double t, double p):
    result = PO4_n3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_beta(double t, double p):
    result = PO4_n3_dew2019_beta(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_K(double t, double p):
    result = PO4_n3_dew2019_K(<double> t, <double> p)
    return result
def cy_PO4_n3_dew2019_Kp(double t, double p):
    result = PO4_n3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PD_p2_dew2019_calc.h":
    const char *PD_p2_dew2019_identifier();
    const char *PD_p2_dew2019_name();
    const char *PD_p2_dew2019_formula();
    const double PD_p2_dew2019_mw();
    const double *PD_p2_dew2019_elements();
    double PD_p2_dew2019_g(double t, double p)
    double PD_p2_dew2019_dgdt(double t, double p)
    double PD_p2_dew2019_dgdp(double t, double p)
    double PD_p2_dew2019_d2gdt2(double t, double p)
    double PD_p2_dew2019_d2gdtdp(double t, double p)
    double PD_p2_dew2019_d2gdp2(double t, double p)
    double PD_p2_dew2019_d3gdt3(double t, double p)
    double PD_p2_dew2019_d3gdt2dp(double t, double p)
    double PD_p2_dew2019_d3gdtdp2(double t, double p)
    double PD_p2_dew2019_d3gdp3(double t, double p)
    double PD_p2_dew2019_s(double t, double p)
    double PD_p2_dew2019_v(double t, double p)
    double PD_p2_dew2019_cv(double t, double p)
    double PD_p2_dew2019_cp(double t, double p)
    double PD_p2_dew2019_dcpdt(double t, double p)
    double PD_p2_dew2019_alpha(double t, double p)
    double PD_p2_dew2019_beta(double t, double p)
    double PD_p2_dew2019_K(double t, double p)
    double PD_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PD_p2_dew2019_identifier():
    result = <bytes> PD_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_PD_p2_dew2019_name():
    result = <bytes> PD_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_PD_p2_dew2019_formula():
    result = <bytes> PD_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_PD_p2_dew2019_mw():
    result = PD_p2_dew2019_mw()
    return result
def cy_PD_p2_dew2019_elements():
    cdef const double *e = PD_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PD_p2_dew2019_g(double t, double p):
    result = PD_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_dgdt(double t, double p):
    result = PD_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_dgdp(double t, double p):
    result = PD_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_d2gdt2(double t, double p):
    result = PD_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_d2gdtdp(double t, double p):
    result = PD_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_d2gdp2(double t, double p):
    result = PD_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_d3gdt3(double t, double p):
    result = PD_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_d3gdt2dp(double t, double p):
    result = PD_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_d3gdtdp2(double t, double p):
    result = PD_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_d3gdp3(double t, double p):
    result = PD_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_s(double t, double p):
    result = PD_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_v(double t, double p):
    result = PD_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_cv(double t, double p):
    result = PD_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_cp(double t, double p):
    result = PD_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_dcpdt(double t, double p):
    result = PD_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_alpha(double t, double p):
    result = PD_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_beta(double t, double p):
    result = PD_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_K(double t, double p):
    result = PD_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_PD_p2_dew2019_Kp(double t, double p):
    result = PD_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PBCL3_n_dew2019_calc.h":
    const char *PBCL3_n_dew2019_identifier();
    const char *PBCL3_n_dew2019_name();
    const char *PBCL3_n_dew2019_formula();
    const double PBCL3_n_dew2019_mw();
    const double *PBCL3_n_dew2019_elements();
    double PBCL3_n_dew2019_g(double t, double p)
    double PBCL3_n_dew2019_dgdt(double t, double p)
    double PBCL3_n_dew2019_dgdp(double t, double p)
    double PBCL3_n_dew2019_d2gdt2(double t, double p)
    double PBCL3_n_dew2019_d2gdtdp(double t, double p)
    double PBCL3_n_dew2019_d2gdp2(double t, double p)
    double PBCL3_n_dew2019_d3gdt3(double t, double p)
    double PBCL3_n_dew2019_d3gdt2dp(double t, double p)
    double PBCL3_n_dew2019_d3gdtdp2(double t, double p)
    double PBCL3_n_dew2019_d3gdp3(double t, double p)
    double PBCL3_n_dew2019_s(double t, double p)
    double PBCL3_n_dew2019_v(double t, double p)
    double PBCL3_n_dew2019_cv(double t, double p)
    double PBCL3_n_dew2019_cp(double t, double p)
    double PBCL3_n_dew2019_dcpdt(double t, double p)
    double PBCL3_n_dew2019_alpha(double t, double p)
    double PBCL3_n_dew2019_beta(double t, double p)
    double PBCL3_n_dew2019_K(double t, double p)
    double PBCL3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PBCL3_n_dew2019_identifier():
    result = <bytes> PBCL3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_PBCL3_n_dew2019_name():
    result = <bytes> PBCL3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_PBCL3_n_dew2019_formula():
    result = <bytes> PBCL3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_PBCL3_n_dew2019_mw():
    result = PBCL3_n_dew2019_mw()
    return result
def cy_PBCL3_n_dew2019_elements():
    cdef const double *e = PBCL3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PBCL3_n_dew2019_g(double t, double p):
    result = PBCL3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_dgdt(double t, double p):
    result = PBCL3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_dgdp(double t, double p):
    result = PBCL3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_d2gdt2(double t, double p):
    result = PBCL3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_d2gdtdp(double t, double p):
    result = PBCL3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_d2gdp2(double t, double p):
    result = PBCL3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_d3gdt3(double t, double p):
    result = PBCL3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_d3gdt2dp(double t, double p):
    result = PBCL3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_d3gdtdp2(double t, double p):
    result = PBCL3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_d3gdp3(double t, double p):
    result = PBCL3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_s(double t, double p):
    result = PBCL3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_v(double t, double p):
    result = PBCL3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_cv(double t, double p):
    result = PBCL3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_cp(double t, double p):
    result = PBCL3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_dcpdt(double t, double p):
    result = PBCL3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_alpha(double t, double p):
    result = PBCL3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_beta(double t, double p):
    result = PBCL3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_K(double t, double p):
    result = PBCL3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_PBCL3_n_dew2019_Kp(double t, double p):
    result = PBCL3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PBCL2_l_AQ_r__dew2019_calc.h":
    const char *PBCL2_l_AQ_r__dew2019_identifier();
    const char *PBCL2_l_AQ_r__dew2019_name();
    const char *PBCL2_l_AQ_r__dew2019_formula();
    const double PBCL2_l_AQ_r__dew2019_mw();
    const double *PBCL2_l_AQ_r__dew2019_elements();
    double PBCL2_l_AQ_r__dew2019_g(double t, double p)
    double PBCL2_l_AQ_r__dew2019_dgdt(double t, double p)
    double PBCL2_l_AQ_r__dew2019_dgdp(double t, double p)
    double PBCL2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double PBCL2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double PBCL2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double PBCL2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double PBCL2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double PBCL2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double PBCL2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double PBCL2_l_AQ_r__dew2019_s(double t, double p)
    double PBCL2_l_AQ_r__dew2019_v(double t, double p)
    double PBCL2_l_AQ_r__dew2019_cv(double t, double p)
    double PBCL2_l_AQ_r__dew2019_cp(double t, double p)
    double PBCL2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double PBCL2_l_AQ_r__dew2019_alpha(double t, double p)
    double PBCL2_l_AQ_r__dew2019_beta(double t, double p)
    double PBCL2_l_AQ_r__dew2019_K(double t, double p)
    double PBCL2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PBCL2_l_AQ_r__dew2019_identifier():
    result = <bytes> PBCL2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_PBCL2_l_AQ_r__dew2019_name():
    result = <bytes> PBCL2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_PBCL2_l_AQ_r__dew2019_formula():
    result = <bytes> PBCL2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_PBCL2_l_AQ_r__dew2019_mw():
    result = PBCL2_l_AQ_r__dew2019_mw()
    return result
def cy_PBCL2_l_AQ_r__dew2019_elements():
    cdef const double *e = PBCL2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PBCL2_l_AQ_r__dew2019_g(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_s(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_v(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_cv(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_cp(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_alpha(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_beta(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_K(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_PBCL2_l_AQ_r__dew2019_Kp(double t, double p):
    result = PBCL2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PBCL_p_dew2019_calc.h":
    const char *PBCL_p_dew2019_identifier();
    const char *PBCL_p_dew2019_name();
    const char *PBCL_p_dew2019_formula();
    const double PBCL_p_dew2019_mw();
    const double *PBCL_p_dew2019_elements();
    double PBCL_p_dew2019_g(double t, double p)
    double PBCL_p_dew2019_dgdt(double t, double p)
    double PBCL_p_dew2019_dgdp(double t, double p)
    double PBCL_p_dew2019_d2gdt2(double t, double p)
    double PBCL_p_dew2019_d2gdtdp(double t, double p)
    double PBCL_p_dew2019_d2gdp2(double t, double p)
    double PBCL_p_dew2019_d3gdt3(double t, double p)
    double PBCL_p_dew2019_d3gdt2dp(double t, double p)
    double PBCL_p_dew2019_d3gdtdp2(double t, double p)
    double PBCL_p_dew2019_d3gdp3(double t, double p)
    double PBCL_p_dew2019_s(double t, double p)
    double PBCL_p_dew2019_v(double t, double p)
    double PBCL_p_dew2019_cv(double t, double p)
    double PBCL_p_dew2019_cp(double t, double p)
    double PBCL_p_dew2019_dcpdt(double t, double p)
    double PBCL_p_dew2019_alpha(double t, double p)
    double PBCL_p_dew2019_beta(double t, double p)
    double PBCL_p_dew2019_K(double t, double p)
    double PBCL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PBCL_p_dew2019_identifier():
    result = <bytes> PBCL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_PBCL_p_dew2019_name():
    result = <bytes> PBCL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_PBCL_p_dew2019_formula():
    result = <bytes> PBCL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_PBCL_p_dew2019_mw():
    result = PBCL_p_dew2019_mw()
    return result
def cy_PBCL_p_dew2019_elements():
    cdef const double *e = PBCL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PBCL_p_dew2019_g(double t, double p):
    result = PBCL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_dgdt(double t, double p):
    result = PBCL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_dgdp(double t, double p):
    result = PBCL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_d2gdt2(double t, double p):
    result = PBCL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_d2gdtdp(double t, double p):
    result = PBCL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_d2gdp2(double t, double p):
    result = PBCL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_d3gdt3(double t, double p):
    result = PBCL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_d3gdt2dp(double t, double p):
    result = PBCL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_d3gdtdp2(double t, double p):
    result = PBCL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_d3gdp3(double t, double p):
    result = PBCL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_s(double t, double p):
    result = PBCL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_v(double t, double p):
    result = PBCL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_cv(double t, double p):
    result = PBCL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_cp(double t, double p):
    result = PBCL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_dcpdt(double t, double p):
    result = PBCL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_alpha(double t, double p):
    result = PBCL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_beta(double t, double p):
    result = PBCL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_K(double t, double p):
    result = PBCL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_PBCL_p_dew2019_Kp(double t, double p):
    result = PBCL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "PB_p2_dew2019_calc.h":
    const char *PB_p2_dew2019_identifier();
    const char *PB_p2_dew2019_name();
    const char *PB_p2_dew2019_formula();
    const double PB_p2_dew2019_mw();
    const double *PB_p2_dew2019_elements();
    double PB_p2_dew2019_g(double t, double p)
    double PB_p2_dew2019_dgdt(double t, double p)
    double PB_p2_dew2019_dgdp(double t, double p)
    double PB_p2_dew2019_d2gdt2(double t, double p)
    double PB_p2_dew2019_d2gdtdp(double t, double p)
    double PB_p2_dew2019_d2gdp2(double t, double p)
    double PB_p2_dew2019_d3gdt3(double t, double p)
    double PB_p2_dew2019_d3gdt2dp(double t, double p)
    double PB_p2_dew2019_d3gdtdp2(double t, double p)
    double PB_p2_dew2019_d3gdp3(double t, double p)
    double PB_p2_dew2019_s(double t, double p)
    double PB_p2_dew2019_v(double t, double p)
    double PB_p2_dew2019_cv(double t, double p)
    double PB_p2_dew2019_cp(double t, double p)
    double PB_p2_dew2019_dcpdt(double t, double p)
    double PB_p2_dew2019_alpha(double t, double p)
    double PB_p2_dew2019_beta(double t, double p)
    double PB_p2_dew2019_K(double t, double p)
    double PB_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_PB_p2_dew2019_identifier():
    result = <bytes> PB_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_PB_p2_dew2019_name():
    result = <bytes> PB_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_PB_p2_dew2019_formula():
    result = <bytes> PB_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_PB_p2_dew2019_mw():
    result = PB_p2_dew2019_mw()
    return result
def cy_PB_p2_dew2019_elements():
    cdef const double *e = PB_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_PB_p2_dew2019_g(double t, double p):
    result = PB_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_dgdt(double t, double p):
    result = PB_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_dgdp(double t, double p):
    result = PB_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_d2gdt2(double t, double p):
    result = PB_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_d2gdtdp(double t, double p):
    result = PB_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_d2gdp2(double t, double p):
    result = PB_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_d3gdt3(double t, double p):
    result = PB_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_d3gdt2dp(double t, double p):
    result = PB_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_d3gdtdp2(double t, double p):
    result = PB_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_d3gdp3(double t, double p):
    result = PB_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_s(double t, double p):
    result = PB_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_v(double t, double p):
    result = PB_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_cv(double t, double p):
    result = PB_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_cp(double t, double p):
    result = PB_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_dcpdt(double t, double p):
    result = PB_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_alpha(double t, double p):
    result = PB_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_beta(double t, double p):
    result = PB_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_K(double t, double p):
    result = PB_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_PB_p2_dew2019_Kp(double t, double p):
    result = PB_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "OH_n_dew2019_calc.h":
    const char *OH_n_dew2019_identifier();
    const char *OH_n_dew2019_name();
    const char *OH_n_dew2019_formula();
    const double OH_n_dew2019_mw();
    const double *OH_n_dew2019_elements();
    double OH_n_dew2019_g(double t, double p)
    double OH_n_dew2019_dgdt(double t, double p)
    double OH_n_dew2019_dgdp(double t, double p)
    double OH_n_dew2019_d2gdt2(double t, double p)
    double OH_n_dew2019_d2gdtdp(double t, double p)
    double OH_n_dew2019_d2gdp2(double t, double p)
    double OH_n_dew2019_d3gdt3(double t, double p)
    double OH_n_dew2019_d3gdt2dp(double t, double p)
    double OH_n_dew2019_d3gdtdp2(double t, double p)
    double OH_n_dew2019_d3gdp3(double t, double p)
    double OH_n_dew2019_s(double t, double p)
    double OH_n_dew2019_v(double t, double p)
    double OH_n_dew2019_cv(double t, double p)
    double OH_n_dew2019_cp(double t, double p)
    double OH_n_dew2019_dcpdt(double t, double p)
    double OH_n_dew2019_alpha(double t, double p)
    double OH_n_dew2019_beta(double t, double p)
    double OH_n_dew2019_K(double t, double p)
    double OH_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_OH_n_dew2019_identifier():
    result = <bytes> OH_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_OH_n_dew2019_name():
    result = <bytes> OH_n_dew2019_name()
    return result.decode('UTF-8')
def cy_OH_n_dew2019_formula():
    result = <bytes> OH_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_OH_n_dew2019_mw():
    result = OH_n_dew2019_mw()
    return result
def cy_OH_n_dew2019_elements():
    cdef const double *e = OH_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_OH_n_dew2019_g(double t, double p):
    result = OH_n_dew2019_g(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_dgdt(double t, double p):
    result = OH_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_dgdp(double t, double p):
    result = OH_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_d2gdt2(double t, double p):
    result = OH_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_d2gdtdp(double t, double p):
    result = OH_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_d2gdp2(double t, double p):
    result = OH_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_d3gdt3(double t, double p):
    result = OH_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_d3gdt2dp(double t, double p):
    result = OH_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_d3gdtdp2(double t, double p):
    result = OH_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_d3gdp3(double t, double p):
    result = OH_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_s(double t, double p):
    result = OH_n_dew2019_s(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_v(double t, double p):
    result = OH_n_dew2019_v(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_cv(double t, double p):
    result = OH_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_cp(double t, double p):
    result = OH_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_dcpdt(double t, double p):
    result = OH_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_alpha(double t, double p):
    result = OH_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_beta(double t, double p):
    result = OH_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_K(double t, double p):
    result = OH_n_dew2019_K(<double> t, <double> p)
    return result
def cy_OH_n_dew2019_Kp(double t, double p):
    result = OH_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "O2_l_AQ_r__dew2019_calc.h":
    const char *O2_l_AQ_r__dew2019_identifier();
    const char *O2_l_AQ_r__dew2019_name();
    const char *O2_l_AQ_r__dew2019_formula();
    const double O2_l_AQ_r__dew2019_mw();
    const double *O2_l_AQ_r__dew2019_elements();
    double O2_l_AQ_r__dew2019_g(double t, double p)
    double O2_l_AQ_r__dew2019_dgdt(double t, double p)
    double O2_l_AQ_r__dew2019_dgdp(double t, double p)
    double O2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double O2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double O2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double O2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double O2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double O2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double O2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double O2_l_AQ_r__dew2019_s(double t, double p)
    double O2_l_AQ_r__dew2019_v(double t, double p)
    double O2_l_AQ_r__dew2019_cv(double t, double p)
    double O2_l_AQ_r__dew2019_cp(double t, double p)
    double O2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double O2_l_AQ_r__dew2019_alpha(double t, double p)
    double O2_l_AQ_r__dew2019_beta(double t, double p)
    double O2_l_AQ_r__dew2019_K(double t, double p)
    double O2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_O2_l_AQ_r__dew2019_identifier():
    result = <bytes> O2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_O2_l_AQ_r__dew2019_name():
    result = <bytes> O2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_O2_l_AQ_r__dew2019_formula():
    result = <bytes> O2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_O2_l_AQ_r__dew2019_mw():
    result = O2_l_AQ_r__dew2019_mw()
    return result
def cy_O2_l_AQ_r__dew2019_elements():
    cdef const double *e = O2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_O2_l_AQ_r__dew2019_g(double t, double p):
    result = O2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = O2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = O2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = O2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = O2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = O2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = O2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = O2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = O2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = O2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_s(double t, double p):
    result = O2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_v(double t, double p):
    result = O2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_cv(double t, double p):
    result = O2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_cp(double t, double p):
    result = O2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = O2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_alpha(double t, double p):
    result = O2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_beta(double t, double p):
    result = O2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_K(double t, double p):
    result = O2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_O2_l_AQ_r__dew2019_Kp(double t, double p):
    result = O2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NO3_n_dew2019_calc.h":
    const char *NO3_n_dew2019_identifier();
    const char *NO3_n_dew2019_name();
    const char *NO3_n_dew2019_formula();
    const double NO3_n_dew2019_mw();
    const double *NO3_n_dew2019_elements();
    double NO3_n_dew2019_g(double t, double p)
    double NO3_n_dew2019_dgdt(double t, double p)
    double NO3_n_dew2019_dgdp(double t, double p)
    double NO3_n_dew2019_d2gdt2(double t, double p)
    double NO3_n_dew2019_d2gdtdp(double t, double p)
    double NO3_n_dew2019_d2gdp2(double t, double p)
    double NO3_n_dew2019_d3gdt3(double t, double p)
    double NO3_n_dew2019_d3gdt2dp(double t, double p)
    double NO3_n_dew2019_d3gdtdp2(double t, double p)
    double NO3_n_dew2019_d3gdp3(double t, double p)
    double NO3_n_dew2019_s(double t, double p)
    double NO3_n_dew2019_v(double t, double p)
    double NO3_n_dew2019_cv(double t, double p)
    double NO3_n_dew2019_cp(double t, double p)
    double NO3_n_dew2019_dcpdt(double t, double p)
    double NO3_n_dew2019_alpha(double t, double p)
    double NO3_n_dew2019_beta(double t, double p)
    double NO3_n_dew2019_K(double t, double p)
    double NO3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NO3_n_dew2019_identifier():
    result = <bytes> NO3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_NO3_n_dew2019_name():
    result = <bytes> NO3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_NO3_n_dew2019_formula():
    result = <bytes> NO3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_NO3_n_dew2019_mw():
    result = NO3_n_dew2019_mw()
    return result
def cy_NO3_n_dew2019_elements():
    cdef const double *e = NO3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NO3_n_dew2019_g(double t, double p):
    result = NO3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_dgdt(double t, double p):
    result = NO3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_dgdp(double t, double p):
    result = NO3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_d2gdt2(double t, double p):
    result = NO3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_d2gdtdp(double t, double p):
    result = NO3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_d2gdp2(double t, double p):
    result = NO3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_d3gdt3(double t, double p):
    result = NO3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_d3gdt2dp(double t, double p):
    result = NO3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_d3gdtdp2(double t, double p):
    result = NO3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_d3gdp3(double t, double p):
    result = NO3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_s(double t, double p):
    result = NO3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_v(double t, double p):
    result = NO3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_cv(double t, double p):
    result = NO3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_cp(double t, double p):
    result = NO3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_dcpdt(double t, double p):
    result = NO3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_alpha(double t, double p):
    result = NO3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_beta(double t, double p):
    result = NO3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_K(double t, double p):
    result = NO3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_NO3_n_dew2019_Kp(double t, double p):
    result = NO3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NO2_n_dew2019_calc.h":
    const char *NO2_n_dew2019_identifier();
    const char *NO2_n_dew2019_name();
    const char *NO2_n_dew2019_formula();
    const double NO2_n_dew2019_mw();
    const double *NO2_n_dew2019_elements();
    double NO2_n_dew2019_g(double t, double p)
    double NO2_n_dew2019_dgdt(double t, double p)
    double NO2_n_dew2019_dgdp(double t, double p)
    double NO2_n_dew2019_d2gdt2(double t, double p)
    double NO2_n_dew2019_d2gdtdp(double t, double p)
    double NO2_n_dew2019_d2gdp2(double t, double p)
    double NO2_n_dew2019_d3gdt3(double t, double p)
    double NO2_n_dew2019_d3gdt2dp(double t, double p)
    double NO2_n_dew2019_d3gdtdp2(double t, double p)
    double NO2_n_dew2019_d3gdp3(double t, double p)
    double NO2_n_dew2019_s(double t, double p)
    double NO2_n_dew2019_v(double t, double p)
    double NO2_n_dew2019_cv(double t, double p)
    double NO2_n_dew2019_cp(double t, double p)
    double NO2_n_dew2019_dcpdt(double t, double p)
    double NO2_n_dew2019_alpha(double t, double p)
    double NO2_n_dew2019_beta(double t, double p)
    double NO2_n_dew2019_K(double t, double p)
    double NO2_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NO2_n_dew2019_identifier():
    result = <bytes> NO2_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_NO2_n_dew2019_name():
    result = <bytes> NO2_n_dew2019_name()
    return result.decode('UTF-8')
def cy_NO2_n_dew2019_formula():
    result = <bytes> NO2_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_NO2_n_dew2019_mw():
    result = NO2_n_dew2019_mw()
    return result
def cy_NO2_n_dew2019_elements():
    cdef const double *e = NO2_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NO2_n_dew2019_g(double t, double p):
    result = NO2_n_dew2019_g(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_dgdt(double t, double p):
    result = NO2_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_dgdp(double t, double p):
    result = NO2_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_d2gdt2(double t, double p):
    result = NO2_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_d2gdtdp(double t, double p):
    result = NO2_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_d2gdp2(double t, double p):
    result = NO2_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_d3gdt3(double t, double p):
    result = NO2_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_d3gdt2dp(double t, double p):
    result = NO2_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_d3gdtdp2(double t, double p):
    result = NO2_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_d3gdp3(double t, double p):
    result = NO2_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_s(double t, double p):
    result = NO2_n_dew2019_s(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_v(double t, double p):
    result = NO2_n_dew2019_v(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_cv(double t, double p):
    result = NO2_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_cp(double t, double p):
    result = NO2_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_dcpdt(double t, double p):
    result = NO2_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_alpha(double t, double p):
    result = NO2_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_beta(double t, double p):
    result = NO2_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_K(double t, double p):
    result = NO2_n_dew2019_K(<double> t, <double> p)
    return result
def cy_NO2_n_dew2019_Kp(double t, double p):
    result = NO2_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NI_p2_dew2019_calc.h":
    const char *NI_p2_dew2019_identifier();
    const char *NI_p2_dew2019_name();
    const char *NI_p2_dew2019_formula();
    const double NI_p2_dew2019_mw();
    const double *NI_p2_dew2019_elements();
    double NI_p2_dew2019_g(double t, double p)
    double NI_p2_dew2019_dgdt(double t, double p)
    double NI_p2_dew2019_dgdp(double t, double p)
    double NI_p2_dew2019_d2gdt2(double t, double p)
    double NI_p2_dew2019_d2gdtdp(double t, double p)
    double NI_p2_dew2019_d2gdp2(double t, double p)
    double NI_p2_dew2019_d3gdt3(double t, double p)
    double NI_p2_dew2019_d3gdt2dp(double t, double p)
    double NI_p2_dew2019_d3gdtdp2(double t, double p)
    double NI_p2_dew2019_d3gdp3(double t, double p)
    double NI_p2_dew2019_s(double t, double p)
    double NI_p2_dew2019_v(double t, double p)
    double NI_p2_dew2019_cv(double t, double p)
    double NI_p2_dew2019_cp(double t, double p)
    double NI_p2_dew2019_dcpdt(double t, double p)
    double NI_p2_dew2019_alpha(double t, double p)
    double NI_p2_dew2019_beta(double t, double p)
    double NI_p2_dew2019_K(double t, double p)
    double NI_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NI_p2_dew2019_identifier():
    result = <bytes> NI_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_NI_p2_dew2019_name():
    result = <bytes> NI_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_NI_p2_dew2019_formula():
    result = <bytes> NI_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_NI_p2_dew2019_mw():
    result = NI_p2_dew2019_mw()
    return result
def cy_NI_p2_dew2019_elements():
    cdef const double *e = NI_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NI_p2_dew2019_g(double t, double p):
    result = NI_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_dgdt(double t, double p):
    result = NI_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_dgdp(double t, double p):
    result = NI_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_d2gdt2(double t, double p):
    result = NI_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_d2gdtdp(double t, double p):
    result = NI_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_d2gdp2(double t, double p):
    result = NI_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_d3gdt3(double t, double p):
    result = NI_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_d3gdt2dp(double t, double p):
    result = NI_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_d3gdtdp2(double t, double p):
    result = NI_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_d3gdp3(double t, double p):
    result = NI_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_s(double t, double p):
    result = NI_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_v(double t, double p):
    result = NI_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_cv(double t, double p):
    result = NI_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_cp(double t, double p):
    result = NI_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_dcpdt(double t, double p):
    result = NI_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_alpha(double t, double p):
    result = NI_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_beta(double t, double p):
    result = NI_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_K(double t, double p):
    result = NI_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_NI_p2_dew2019_Kp(double t, double p):
    result = NI_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NH4_p_dew2019_calc.h":
    const char *NH4_p_dew2019_identifier();
    const char *NH4_p_dew2019_name();
    const char *NH4_p_dew2019_formula();
    const double NH4_p_dew2019_mw();
    const double *NH4_p_dew2019_elements();
    double NH4_p_dew2019_g(double t, double p)
    double NH4_p_dew2019_dgdt(double t, double p)
    double NH4_p_dew2019_dgdp(double t, double p)
    double NH4_p_dew2019_d2gdt2(double t, double p)
    double NH4_p_dew2019_d2gdtdp(double t, double p)
    double NH4_p_dew2019_d2gdp2(double t, double p)
    double NH4_p_dew2019_d3gdt3(double t, double p)
    double NH4_p_dew2019_d3gdt2dp(double t, double p)
    double NH4_p_dew2019_d3gdtdp2(double t, double p)
    double NH4_p_dew2019_d3gdp3(double t, double p)
    double NH4_p_dew2019_s(double t, double p)
    double NH4_p_dew2019_v(double t, double p)
    double NH4_p_dew2019_cv(double t, double p)
    double NH4_p_dew2019_cp(double t, double p)
    double NH4_p_dew2019_dcpdt(double t, double p)
    double NH4_p_dew2019_alpha(double t, double p)
    double NH4_p_dew2019_beta(double t, double p)
    double NH4_p_dew2019_K(double t, double p)
    double NH4_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NH4_p_dew2019_identifier():
    result = <bytes> NH4_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_NH4_p_dew2019_name():
    result = <bytes> NH4_p_dew2019_name()
    return result.decode('UTF-8')
def cy_NH4_p_dew2019_formula():
    result = <bytes> NH4_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_NH4_p_dew2019_mw():
    result = NH4_p_dew2019_mw()
    return result
def cy_NH4_p_dew2019_elements():
    cdef const double *e = NH4_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NH4_p_dew2019_g(double t, double p):
    result = NH4_p_dew2019_g(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_dgdt(double t, double p):
    result = NH4_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_dgdp(double t, double p):
    result = NH4_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_d2gdt2(double t, double p):
    result = NH4_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_d2gdtdp(double t, double p):
    result = NH4_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_d2gdp2(double t, double p):
    result = NH4_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_d3gdt3(double t, double p):
    result = NH4_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_d3gdt2dp(double t, double p):
    result = NH4_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_d3gdtdp2(double t, double p):
    result = NH4_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_d3gdp3(double t, double p):
    result = NH4_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_s(double t, double p):
    result = NH4_p_dew2019_s(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_v(double t, double p):
    result = NH4_p_dew2019_v(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_cv(double t, double p):
    result = NH4_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_cp(double t, double p):
    result = NH4_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_dcpdt(double t, double p):
    result = NH4_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_alpha(double t, double p):
    result = NH4_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_beta(double t, double p):
    result = NH4_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_K(double t, double p):
    result = NH4_p_dew2019_K(<double> t, <double> p)
    return result
def cy_NH4_p_dew2019_Kp(double t, double p):
    result = NH4_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NH3_l_AQ_r__dew2019_calc.h":
    const char *NH3_l_AQ_r__dew2019_identifier();
    const char *NH3_l_AQ_r__dew2019_name();
    const char *NH3_l_AQ_r__dew2019_formula();
    const double NH3_l_AQ_r__dew2019_mw();
    const double *NH3_l_AQ_r__dew2019_elements();
    double NH3_l_AQ_r__dew2019_g(double t, double p)
    double NH3_l_AQ_r__dew2019_dgdt(double t, double p)
    double NH3_l_AQ_r__dew2019_dgdp(double t, double p)
    double NH3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double NH3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double NH3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double NH3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double NH3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double NH3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double NH3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double NH3_l_AQ_r__dew2019_s(double t, double p)
    double NH3_l_AQ_r__dew2019_v(double t, double p)
    double NH3_l_AQ_r__dew2019_cv(double t, double p)
    double NH3_l_AQ_r__dew2019_cp(double t, double p)
    double NH3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double NH3_l_AQ_r__dew2019_alpha(double t, double p)
    double NH3_l_AQ_r__dew2019_beta(double t, double p)
    double NH3_l_AQ_r__dew2019_K(double t, double p)
    double NH3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NH3_l_AQ_r__dew2019_identifier():
    result = <bytes> NH3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_NH3_l_AQ_r__dew2019_name():
    result = <bytes> NH3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_NH3_l_AQ_r__dew2019_formula():
    result = <bytes> NH3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_NH3_l_AQ_r__dew2019_mw():
    result = NH3_l_AQ_r__dew2019_mw()
    return result
def cy_NH3_l_AQ_r__dew2019_elements():
    cdef const double *e = NH3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NH3_l_AQ_r__dew2019_g(double t, double p):
    result = NH3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = NH3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = NH3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = NH3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = NH3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = NH3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = NH3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = NH3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = NH3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = NH3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_s(double t, double p):
    result = NH3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_v(double t, double p):
    result = NH3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_cv(double t, double p):
    result = NH3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_cp(double t, double p):
    result = NH3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = NH3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_alpha(double t, double p):
    result = NH3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_beta(double t, double p):
    result = NH3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_K(double t, double p):
    result = NH3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_NH3_l_AQ_r__dew2019_Kp(double t, double p):
    result = NH3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NE_l_AQ_r__dew2019_calc.h":
    const char *NE_l_AQ_r__dew2019_identifier();
    const char *NE_l_AQ_r__dew2019_name();
    const char *NE_l_AQ_r__dew2019_formula();
    const double NE_l_AQ_r__dew2019_mw();
    const double *NE_l_AQ_r__dew2019_elements();
    double NE_l_AQ_r__dew2019_g(double t, double p)
    double NE_l_AQ_r__dew2019_dgdt(double t, double p)
    double NE_l_AQ_r__dew2019_dgdp(double t, double p)
    double NE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double NE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double NE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double NE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double NE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double NE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double NE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double NE_l_AQ_r__dew2019_s(double t, double p)
    double NE_l_AQ_r__dew2019_v(double t, double p)
    double NE_l_AQ_r__dew2019_cv(double t, double p)
    double NE_l_AQ_r__dew2019_cp(double t, double p)
    double NE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double NE_l_AQ_r__dew2019_alpha(double t, double p)
    double NE_l_AQ_r__dew2019_beta(double t, double p)
    double NE_l_AQ_r__dew2019_K(double t, double p)
    double NE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NE_l_AQ_r__dew2019_identifier():
    result = <bytes> NE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_NE_l_AQ_r__dew2019_name():
    result = <bytes> NE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_NE_l_AQ_r__dew2019_formula():
    result = <bytes> NE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_NE_l_AQ_r__dew2019_mw():
    result = NE_l_AQ_r__dew2019_mw()
    return result
def cy_NE_l_AQ_r__dew2019_elements():
    cdef const double *e = NE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NE_l_AQ_r__dew2019_g(double t, double p):
    result = NE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = NE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = NE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = NE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = NE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = NE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = NE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = NE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = NE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = NE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_s(double t, double p):
    result = NE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_v(double t, double p):
    result = NE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_cv(double t, double p):
    result = NE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_cp(double t, double p):
    result = NE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = NE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_alpha(double t, double p):
    result = NE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_beta(double t, double p):
    result = NE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_K(double t, double p):
    result = NE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_NE_l_AQ_r__dew2019_Kp(double t, double p):
    result = NE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ND_p3_dew2019_calc.h":
    const char *ND_p3_dew2019_identifier();
    const char *ND_p3_dew2019_name();
    const char *ND_p3_dew2019_formula();
    const double ND_p3_dew2019_mw();
    const double *ND_p3_dew2019_elements();
    double ND_p3_dew2019_g(double t, double p)
    double ND_p3_dew2019_dgdt(double t, double p)
    double ND_p3_dew2019_dgdp(double t, double p)
    double ND_p3_dew2019_d2gdt2(double t, double p)
    double ND_p3_dew2019_d2gdtdp(double t, double p)
    double ND_p3_dew2019_d2gdp2(double t, double p)
    double ND_p3_dew2019_d3gdt3(double t, double p)
    double ND_p3_dew2019_d3gdt2dp(double t, double p)
    double ND_p3_dew2019_d3gdtdp2(double t, double p)
    double ND_p3_dew2019_d3gdp3(double t, double p)
    double ND_p3_dew2019_s(double t, double p)
    double ND_p3_dew2019_v(double t, double p)
    double ND_p3_dew2019_cv(double t, double p)
    double ND_p3_dew2019_cp(double t, double p)
    double ND_p3_dew2019_dcpdt(double t, double p)
    double ND_p3_dew2019_alpha(double t, double p)
    double ND_p3_dew2019_beta(double t, double p)
    double ND_p3_dew2019_K(double t, double p)
    double ND_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ND_p3_dew2019_identifier():
    result = <bytes> ND_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_ND_p3_dew2019_name():
    result = <bytes> ND_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_ND_p3_dew2019_formula():
    result = <bytes> ND_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_ND_p3_dew2019_mw():
    result = ND_p3_dew2019_mw()
    return result
def cy_ND_p3_dew2019_elements():
    cdef const double *e = ND_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ND_p3_dew2019_g(double t, double p):
    result = ND_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_dgdt(double t, double p):
    result = ND_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_dgdp(double t, double p):
    result = ND_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_d2gdt2(double t, double p):
    result = ND_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_d2gdtdp(double t, double p):
    result = ND_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_d2gdp2(double t, double p):
    result = ND_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_d3gdt3(double t, double p):
    result = ND_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_d3gdt2dp(double t, double p):
    result = ND_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_d3gdtdp2(double t, double p):
    result = ND_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_d3gdp3(double t, double p):
    result = ND_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_s(double t, double p):
    result = ND_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_v(double t, double p):
    result = ND_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_cv(double t, double p):
    result = ND_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_cp(double t, double p):
    result = ND_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_dcpdt(double t, double p):
    result = ND_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_alpha(double t, double p):
    result = ND_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_beta(double t, double p):
    result = ND_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_K(double t, double p):
    result = ND_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_ND_p3_dew2019_Kp(double t, double p):
    result = ND_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NAOH_l_AQ_r__dew2019_calc.h":
    const char *NAOH_l_AQ_r__dew2019_identifier();
    const char *NAOH_l_AQ_r__dew2019_name();
    const char *NAOH_l_AQ_r__dew2019_formula();
    const double NAOH_l_AQ_r__dew2019_mw();
    const double *NAOH_l_AQ_r__dew2019_elements();
    double NAOH_l_AQ_r__dew2019_g(double t, double p)
    double NAOH_l_AQ_r__dew2019_dgdt(double t, double p)
    double NAOH_l_AQ_r__dew2019_dgdp(double t, double p)
    double NAOH_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double NAOH_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double NAOH_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double NAOH_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double NAOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double NAOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double NAOH_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double NAOH_l_AQ_r__dew2019_s(double t, double p)
    double NAOH_l_AQ_r__dew2019_v(double t, double p)
    double NAOH_l_AQ_r__dew2019_cv(double t, double p)
    double NAOH_l_AQ_r__dew2019_cp(double t, double p)
    double NAOH_l_AQ_r__dew2019_dcpdt(double t, double p)
    double NAOH_l_AQ_r__dew2019_alpha(double t, double p)
    double NAOH_l_AQ_r__dew2019_beta(double t, double p)
    double NAOH_l_AQ_r__dew2019_K(double t, double p)
    double NAOH_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NAOH_l_AQ_r__dew2019_identifier():
    result = <bytes> NAOH_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_NAOH_l_AQ_r__dew2019_name():
    result = <bytes> NAOH_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_NAOH_l_AQ_r__dew2019_formula():
    result = <bytes> NAOH_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_NAOH_l_AQ_r__dew2019_mw():
    result = NAOH_l_AQ_r__dew2019_mw()
    return result
def cy_NAOH_l_AQ_r__dew2019_elements():
    cdef const double *e = NAOH_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NAOH_l_AQ_r__dew2019_g(double t, double p):
    result = NAOH_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_dgdt(double t, double p):
    result = NAOH_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_dgdp(double t, double p):
    result = NAOH_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = NAOH_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = NAOH_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = NAOH_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = NAOH_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = NAOH_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = NAOH_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = NAOH_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_s(double t, double p):
    result = NAOH_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_v(double t, double p):
    result = NAOH_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_cv(double t, double p):
    result = NAOH_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_cp(double t, double p):
    result = NAOH_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = NAOH_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_alpha(double t, double p):
    result = NAOH_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_beta(double t, double p):
    result = NAOH_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_K(double t, double p):
    result = NAOH_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_NAOH_l_AQ_r__dew2019_Kp(double t, double p):
    result = NAOH_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NAHSIO3_l_AQ_r__dew2019_calc.h":
    const char *NAHSIO3_l_AQ_r__dew2019_identifier();
    const char *NAHSIO3_l_AQ_r__dew2019_name();
    const char *NAHSIO3_l_AQ_r__dew2019_formula();
    const double NAHSIO3_l_AQ_r__dew2019_mw();
    const double *NAHSIO3_l_AQ_r__dew2019_elements();
    double NAHSIO3_l_AQ_r__dew2019_g(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_dgdt(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_dgdp(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_s(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_v(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_cv(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_cp(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_alpha(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_beta(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_K(double t, double p)
    double NAHSIO3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NAHSIO3_l_AQ_r__dew2019_identifier():
    result = <bytes> NAHSIO3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_NAHSIO3_l_AQ_r__dew2019_name():
    result = <bytes> NAHSIO3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_NAHSIO3_l_AQ_r__dew2019_formula():
    result = <bytes> NAHSIO3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_NAHSIO3_l_AQ_r__dew2019_mw():
    result = NAHSIO3_l_AQ_r__dew2019_mw()
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_elements():
    cdef const double *e = NAHSIO3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NAHSIO3_l_AQ_r__dew2019_g(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_s(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_v(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_cv(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_cp(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_alpha(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_beta(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_K(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_NAHSIO3_l_AQ_r__dew2019_Kp(double t, double p):
    result = NAHSIO3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NAHCO3_l_AQ_r__dew2019_calc.h":
    const char *NAHCO3_l_AQ_r__dew2019_identifier();
    const char *NAHCO3_l_AQ_r__dew2019_name();
    const char *NAHCO3_l_AQ_r__dew2019_formula();
    const double NAHCO3_l_AQ_r__dew2019_mw();
    const double *NAHCO3_l_AQ_r__dew2019_elements();
    double NAHCO3_l_AQ_r__dew2019_g(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_dgdt(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_dgdp(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_s(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_v(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_cv(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_cp(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_alpha(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_beta(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_K(double t, double p)
    double NAHCO3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NAHCO3_l_AQ_r__dew2019_identifier():
    result = <bytes> NAHCO3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_NAHCO3_l_AQ_r__dew2019_name():
    result = <bytes> NAHCO3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_NAHCO3_l_AQ_r__dew2019_formula():
    result = <bytes> NAHCO3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_NAHCO3_l_AQ_r__dew2019_mw():
    result = NAHCO3_l_AQ_r__dew2019_mw()
    return result
def cy_NAHCO3_l_AQ_r__dew2019_elements():
    cdef const double *e = NAHCO3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NAHCO3_l_AQ_r__dew2019_g(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_s(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_v(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_cv(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_cp(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_alpha(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_beta(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_K(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_NAHCO3_l_AQ_r__dew2019_Kp(double t, double p):
    result = NAHCO3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NACO3_n_dew2019_calc.h":
    const char *NACO3_n_dew2019_identifier();
    const char *NACO3_n_dew2019_name();
    const char *NACO3_n_dew2019_formula();
    const double NACO3_n_dew2019_mw();
    const double *NACO3_n_dew2019_elements();
    double NACO3_n_dew2019_g(double t, double p)
    double NACO3_n_dew2019_dgdt(double t, double p)
    double NACO3_n_dew2019_dgdp(double t, double p)
    double NACO3_n_dew2019_d2gdt2(double t, double p)
    double NACO3_n_dew2019_d2gdtdp(double t, double p)
    double NACO3_n_dew2019_d2gdp2(double t, double p)
    double NACO3_n_dew2019_d3gdt3(double t, double p)
    double NACO3_n_dew2019_d3gdt2dp(double t, double p)
    double NACO3_n_dew2019_d3gdtdp2(double t, double p)
    double NACO3_n_dew2019_d3gdp3(double t, double p)
    double NACO3_n_dew2019_s(double t, double p)
    double NACO3_n_dew2019_v(double t, double p)
    double NACO3_n_dew2019_cv(double t, double p)
    double NACO3_n_dew2019_cp(double t, double p)
    double NACO3_n_dew2019_dcpdt(double t, double p)
    double NACO3_n_dew2019_alpha(double t, double p)
    double NACO3_n_dew2019_beta(double t, double p)
    double NACO3_n_dew2019_K(double t, double p)
    double NACO3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NACO3_n_dew2019_identifier():
    result = <bytes> NACO3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_NACO3_n_dew2019_name():
    result = <bytes> NACO3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_NACO3_n_dew2019_formula():
    result = <bytes> NACO3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_NACO3_n_dew2019_mw():
    result = NACO3_n_dew2019_mw()
    return result
def cy_NACO3_n_dew2019_elements():
    cdef const double *e = NACO3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NACO3_n_dew2019_g(double t, double p):
    result = NACO3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_dgdt(double t, double p):
    result = NACO3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_dgdp(double t, double p):
    result = NACO3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_d2gdt2(double t, double p):
    result = NACO3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_d2gdtdp(double t, double p):
    result = NACO3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_d2gdp2(double t, double p):
    result = NACO3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_d3gdt3(double t, double p):
    result = NACO3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_d3gdt2dp(double t, double p):
    result = NACO3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_d3gdtdp2(double t, double p):
    result = NACO3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_d3gdp3(double t, double p):
    result = NACO3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_s(double t, double p):
    result = NACO3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_v(double t, double p):
    result = NACO3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_cv(double t, double p):
    result = NACO3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_cp(double t, double p):
    result = NACO3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_dcpdt(double t, double p):
    result = NACO3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_alpha(double t, double p):
    result = NACO3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_beta(double t, double p):
    result = NACO3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_K(double t, double p):
    result = NACO3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_NACO3_n_dew2019_Kp(double t, double p):
    result = NACO3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NACL_l_AQ_r__dew2019_calc.h":
    const char *NACL_l_AQ_r__dew2019_identifier();
    const char *NACL_l_AQ_r__dew2019_name();
    const char *NACL_l_AQ_r__dew2019_formula();
    const double NACL_l_AQ_r__dew2019_mw();
    const double *NACL_l_AQ_r__dew2019_elements();
    double NACL_l_AQ_r__dew2019_g(double t, double p)
    double NACL_l_AQ_r__dew2019_dgdt(double t, double p)
    double NACL_l_AQ_r__dew2019_dgdp(double t, double p)
    double NACL_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double NACL_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double NACL_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double NACL_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double NACL_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double NACL_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double NACL_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double NACL_l_AQ_r__dew2019_s(double t, double p)
    double NACL_l_AQ_r__dew2019_v(double t, double p)
    double NACL_l_AQ_r__dew2019_cv(double t, double p)
    double NACL_l_AQ_r__dew2019_cp(double t, double p)
    double NACL_l_AQ_r__dew2019_dcpdt(double t, double p)
    double NACL_l_AQ_r__dew2019_alpha(double t, double p)
    double NACL_l_AQ_r__dew2019_beta(double t, double p)
    double NACL_l_AQ_r__dew2019_K(double t, double p)
    double NACL_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NACL_l_AQ_r__dew2019_identifier():
    result = <bytes> NACL_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_NACL_l_AQ_r__dew2019_name():
    result = <bytes> NACL_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_NACL_l_AQ_r__dew2019_formula():
    result = <bytes> NACL_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_NACL_l_AQ_r__dew2019_mw():
    result = NACL_l_AQ_r__dew2019_mw()
    return result
def cy_NACL_l_AQ_r__dew2019_elements():
    cdef const double *e = NACL_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NACL_l_AQ_r__dew2019_g(double t, double p):
    result = NACL_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_dgdt(double t, double p):
    result = NACL_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_dgdp(double t, double p):
    result = NACL_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = NACL_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = NACL_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = NACL_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = NACL_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = NACL_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = NACL_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = NACL_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_s(double t, double p):
    result = NACL_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_v(double t, double p):
    result = NACL_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_cv(double t, double p):
    result = NACL_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_cp(double t, double p):
    result = NACL_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = NACL_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_alpha(double t, double p):
    result = NACL_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_beta(double t, double p):
    result = NACL_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_K(double t, double p):
    result = NACL_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_NACL_l_AQ_r__dew2019_Kp(double t, double p):
    result = NACL_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NA_p_dew2019_calc.h":
    const char *NA_p_dew2019_identifier();
    const char *NA_p_dew2019_name();
    const char *NA_p_dew2019_formula();
    const double NA_p_dew2019_mw();
    const double *NA_p_dew2019_elements();
    double NA_p_dew2019_g(double t, double p)
    double NA_p_dew2019_dgdt(double t, double p)
    double NA_p_dew2019_dgdp(double t, double p)
    double NA_p_dew2019_d2gdt2(double t, double p)
    double NA_p_dew2019_d2gdtdp(double t, double p)
    double NA_p_dew2019_d2gdp2(double t, double p)
    double NA_p_dew2019_d3gdt3(double t, double p)
    double NA_p_dew2019_d3gdt2dp(double t, double p)
    double NA_p_dew2019_d3gdtdp2(double t, double p)
    double NA_p_dew2019_d3gdp3(double t, double p)
    double NA_p_dew2019_s(double t, double p)
    double NA_p_dew2019_v(double t, double p)
    double NA_p_dew2019_cv(double t, double p)
    double NA_p_dew2019_cp(double t, double p)
    double NA_p_dew2019_dcpdt(double t, double p)
    double NA_p_dew2019_alpha(double t, double p)
    double NA_p_dew2019_beta(double t, double p)
    double NA_p_dew2019_K(double t, double p)
    double NA_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NA_p_dew2019_identifier():
    result = <bytes> NA_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_NA_p_dew2019_name():
    result = <bytes> NA_p_dew2019_name()
    return result.decode('UTF-8')
def cy_NA_p_dew2019_formula():
    result = <bytes> NA_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_NA_p_dew2019_mw():
    result = NA_p_dew2019_mw()
    return result
def cy_NA_p_dew2019_elements():
    cdef const double *e = NA_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NA_p_dew2019_g(double t, double p):
    result = NA_p_dew2019_g(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_dgdt(double t, double p):
    result = NA_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_dgdp(double t, double p):
    result = NA_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_d2gdt2(double t, double p):
    result = NA_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_d2gdtdp(double t, double p):
    result = NA_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_d2gdp2(double t, double p):
    result = NA_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_d3gdt3(double t, double p):
    result = NA_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_d3gdt2dp(double t, double p):
    result = NA_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_d3gdtdp2(double t, double p):
    result = NA_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_d3gdp3(double t, double p):
    result = NA_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_s(double t, double p):
    result = NA_p_dew2019_s(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_v(double t, double p):
    result = NA_p_dew2019_v(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_cv(double t, double p):
    result = NA_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_cp(double t, double p):
    result = NA_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_dcpdt(double t, double p):
    result = NA_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_alpha(double t, double p):
    result = NA_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_beta(double t, double p):
    result = NA_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_K(double t, double p):
    result = NA_p_dew2019_K(<double> t, <double> p)
    return result
def cy_NA_p_dew2019_Kp(double t, double p):
    result = NA_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NA_l_AC_r_2_n_dew2019_calc.h":
    const char *NA_l_AC_r_2_n_dew2019_identifier();
    const char *NA_l_AC_r_2_n_dew2019_name();
    const char *NA_l_AC_r_2_n_dew2019_formula();
    const double NA_l_AC_r_2_n_dew2019_mw();
    const double *NA_l_AC_r_2_n_dew2019_elements();
    double NA_l_AC_r_2_n_dew2019_g(double t, double p)
    double NA_l_AC_r_2_n_dew2019_dgdt(double t, double p)
    double NA_l_AC_r_2_n_dew2019_dgdp(double t, double p)
    double NA_l_AC_r_2_n_dew2019_d2gdt2(double t, double p)
    double NA_l_AC_r_2_n_dew2019_d2gdtdp(double t, double p)
    double NA_l_AC_r_2_n_dew2019_d2gdp2(double t, double p)
    double NA_l_AC_r_2_n_dew2019_d3gdt3(double t, double p)
    double NA_l_AC_r_2_n_dew2019_d3gdt2dp(double t, double p)
    double NA_l_AC_r_2_n_dew2019_d3gdtdp2(double t, double p)
    double NA_l_AC_r_2_n_dew2019_d3gdp3(double t, double p)
    double NA_l_AC_r_2_n_dew2019_s(double t, double p)
    double NA_l_AC_r_2_n_dew2019_v(double t, double p)
    double NA_l_AC_r_2_n_dew2019_cv(double t, double p)
    double NA_l_AC_r_2_n_dew2019_cp(double t, double p)
    double NA_l_AC_r_2_n_dew2019_dcpdt(double t, double p)
    double NA_l_AC_r_2_n_dew2019_alpha(double t, double p)
    double NA_l_AC_r_2_n_dew2019_beta(double t, double p)
    double NA_l_AC_r_2_n_dew2019_K(double t, double p)
    double NA_l_AC_r_2_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NA_l_AC_r_2_n_dew2019_identifier():
    result = <bytes> NA_l_AC_r_2_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_NA_l_AC_r_2_n_dew2019_name():
    result = <bytes> NA_l_AC_r_2_n_dew2019_name()
    return result.decode('UTF-8')
def cy_NA_l_AC_r_2_n_dew2019_formula():
    result = <bytes> NA_l_AC_r_2_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_NA_l_AC_r_2_n_dew2019_mw():
    result = NA_l_AC_r_2_n_dew2019_mw()
    return result
def cy_NA_l_AC_r_2_n_dew2019_elements():
    cdef const double *e = NA_l_AC_r_2_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NA_l_AC_r_2_n_dew2019_g(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_g(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_dgdt(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_dgdp(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_d2gdt2(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_d2gdtdp(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_d2gdp2(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_d3gdt3(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_d3gdt2dp(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_d3gdtdp2(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_d3gdp3(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_s(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_s(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_v(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_v(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_cv(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_cp(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_dcpdt(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_alpha(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_beta(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_K(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_K(<double> t, <double> p)
    return result
def cy_NA_l_AC_r_2_n_dew2019_Kp(double t, double p):
    result = NA_l_AC_r_2_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "NA_l_AC_r__l_AQ_r__dew2019_calc.h":
    const char *NA_l_AC_r__l_AQ_r__dew2019_identifier();
    const char *NA_l_AC_r__l_AQ_r__dew2019_name();
    const char *NA_l_AC_r__l_AQ_r__dew2019_formula();
    const double NA_l_AC_r__l_AQ_r__dew2019_mw();
    const double *NA_l_AC_r__l_AQ_r__dew2019_elements();
    double NA_l_AC_r__l_AQ_r__dew2019_g(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_dgdt(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_dgdp(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_d2gdt2(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_d2gdp2(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_d3gdt3(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_d3gdp3(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_s(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_v(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_cv(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_cp(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_dcpdt(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_alpha(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_beta(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_K(double t, double p)
    double NA_l_AC_r__l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_NA_l_AC_r__l_AQ_r__dew2019_identifier():
    result = <bytes> NA_l_AC_r__l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_NA_l_AC_r__l_AQ_r__dew2019_name():
    result = <bytes> NA_l_AC_r__l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_NA_l_AC_r__l_AQ_r__dew2019_formula():
    result = <bytes> NA_l_AC_r__l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_NA_l_AC_r__l_AQ_r__dew2019_mw():
    result = NA_l_AC_r__l_AQ_r__dew2019_mw()
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_elements():
    cdef const double *e = NA_l_AC_r__l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_NA_l_AC_r__l_AQ_r__dew2019_g(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_dgdt(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_dgdp(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_s(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_v(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_cv(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_cp(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_dcpdt(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_alpha(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_beta(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_K(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_NA_l_AC_r__l_AQ_r__dew2019_Kp(double t, double p):
    result = NA_l_AC_r__l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "N2_l_AQ_r__dew2019_calc.h":
    const char *N2_l_AQ_r__dew2019_identifier();
    const char *N2_l_AQ_r__dew2019_name();
    const char *N2_l_AQ_r__dew2019_formula();
    const double N2_l_AQ_r__dew2019_mw();
    const double *N2_l_AQ_r__dew2019_elements();
    double N2_l_AQ_r__dew2019_g(double t, double p)
    double N2_l_AQ_r__dew2019_dgdt(double t, double p)
    double N2_l_AQ_r__dew2019_dgdp(double t, double p)
    double N2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double N2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double N2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double N2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double N2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double N2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double N2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double N2_l_AQ_r__dew2019_s(double t, double p)
    double N2_l_AQ_r__dew2019_v(double t, double p)
    double N2_l_AQ_r__dew2019_cv(double t, double p)
    double N2_l_AQ_r__dew2019_cp(double t, double p)
    double N2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double N2_l_AQ_r__dew2019_alpha(double t, double p)
    double N2_l_AQ_r__dew2019_beta(double t, double p)
    double N2_l_AQ_r__dew2019_K(double t, double p)
    double N2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_N2_l_AQ_r__dew2019_identifier():
    result = <bytes> N2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_N2_l_AQ_r__dew2019_name():
    result = <bytes> N2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_N2_l_AQ_r__dew2019_formula():
    result = <bytes> N2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_N2_l_AQ_r__dew2019_mw():
    result = N2_l_AQ_r__dew2019_mw()
    return result
def cy_N2_l_AQ_r__dew2019_elements():
    cdef const double *e = N2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_N2_l_AQ_r__dew2019_g(double t, double p):
    result = N2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = N2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = N2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = N2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = N2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = N2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = N2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = N2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = N2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = N2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_s(double t, double p):
    result = N2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_v(double t, double p):
    result = N2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_cv(double t, double p):
    result = N2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_cp(double t, double p):
    result = N2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = N2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_alpha(double t, double p):
    result = N2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_beta(double t, double p):
    result = N2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_K(double t, double p):
    result = N2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_N2_l_AQ_r__dew2019_Kp(double t, double p):
    result = N2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MOO4_n2_dew2019_calc.h":
    const char *MOO4_n2_dew2019_identifier();
    const char *MOO4_n2_dew2019_name();
    const char *MOO4_n2_dew2019_formula();
    const double MOO4_n2_dew2019_mw();
    const double *MOO4_n2_dew2019_elements();
    double MOO4_n2_dew2019_g(double t, double p)
    double MOO4_n2_dew2019_dgdt(double t, double p)
    double MOO4_n2_dew2019_dgdp(double t, double p)
    double MOO4_n2_dew2019_d2gdt2(double t, double p)
    double MOO4_n2_dew2019_d2gdtdp(double t, double p)
    double MOO4_n2_dew2019_d2gdp2(double t, double p)
    double MOO4_n2_dew2019_d3gdt3(double t, double p)
    double MOO4_n2_dew2019_d3gdt2dp(double t, double p)
    double MOO4_n2_dew2019_d3gdtdp2(double t, double p)
    double MOO4_n2_dew2019_d3gdp3(double t, double p)
    double MOO4_n2_dew2019_s(double t, double p)
    double MOO4_n2_dew2019_v(double t, double p)
    double MOO4_n2_dew2019_cv(double t, double p)
    double MOO4_n2_dew2019_cp(double t, double p)
    double MOO4_n2_dew2019_dcpdt(double t, double p)
    double MOO4_n2_dew2019_alpha(double t, double p)
    double MOO4_n2_dew2019_beta(double t, double p)
    double MOO4_n2_dew2019_K(double t, double p)
    double MOO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MOO4_n2_dew2019_identifier():
    result = <bytes> MOO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MOO4_n2_dew2019_name():
    result = <bytes> MOO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_MOO4_n2_dew2019_formula():
    result = <bytes> MOO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_MOO4_n2_dew2019_mw():
    result = MOO4_n2_dew2019_mw()
    return result
def cy_MOO4_n2_dew2019_elements():
    cdef const double *e = MOO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MOO4_n2_dew2019_g(double t, double p):
    result = MOO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_dgdt(double t, double p):
    result = MOO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_dgdp(double t, double p):
    result = MOO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_d2gdt2(double t, double p):
    result = MOO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_d2gdtdp(double t, double p):
    result = MOO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_d2gdp2(double t, double p):
    result = MOO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_d3gdt3(double t, double p):
    result = MOO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = MOO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = MOO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_d3gdp3(double t, double p):
    result = MOO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_s(double t, double p):
    result = MOO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_v(double t, double p):
    result = MOO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_cv(double t, double p):
    result = MOO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_cp(double t, double p):
    result = MOO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_dcpdt(double t, double p):
    result = MOO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_alpha(double t, double p):
    result = MOO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_beta(double t, double p):
    result = MOO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_K(double t, double p):
    result = MOO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_MOO4_n2_dew2019_Kp(double t, double p):
    result = MOO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MNSO4_l_AQ_r__dew2019_calc.h":
    const char *MNSO4_l_AQ_r__dew2019_identifier();
    const char *MNSO4_l_AQ_r__dew2019_name();
    const char *MNSO4_l_AQ_r__dew2019_formula();
    const double MNSO4_l_AQ_r__dew2019_mw();
    const double *MNSO4_l_AQ_r__dew2019_elements();
    double MNSO4_l_AQ_r__dew2019_g(double t, double p)
    double MNSO4_l_AQ_r__dew2019_dgdt(double t, double p)
    double MNSO4_l_AQ_r__dew2019_dgdp(double t, double p)
    double MNSO4_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double MNSO4_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double MNSO4_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double MNSO4_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double MNSO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double MNSO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double MNSO4_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double MNSO4_l_AQ_r__dew2019_s(double t, double p)
    double MNSO4_l_AQ_r__dew2019_v(double t, double p)
    double MNSO4_l_AQ_r__dew2019_cv(double t, double p)
    double MNSO4_l_AQ_r__dew2019_cp(double t, double p)
    double MNSO4_l_AQ_r__dew2019_dcpdt(double t, double p)
    double MNSO4_l_AQ_r__dew2019_alpha(double t, double p)
    double MNSO4_l_AQ_r__dew2019_beta(double t, double p)
    double MNSO4_l_AQ_r__dew2019_K(double t, double p)
    double MNSO4_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MNSO4_l_AQ_r__dew2019_identifier():
    result = <bytes> MNSO4_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_MNSO4_l_AQ_r__dew2019_name():
    result = <bytes> MNSO4_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_MNSO4_l_AQ_r__dew2019_formula():
    result = <bytes> MNSO4_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_MNSO4_l_AQ_r__dew2019_mw():
    result = MNSO4_l_AQ_r__dew2019_mw()
    return result
def cy_MNSO4_l_AQ_r__dew2019_elements():
    cdef const double *e = MNSO4_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MNSO4_l_AQ_r__dew2019_g(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_dgdt(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_dgdp(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_s(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_v(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_cv(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_cp(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_alpha(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_beta(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_K(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_MNSO4_l_AQ_r__dew2019_Kp(double t, double p):
    result = MNSO4_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MNO4_n2_dew2019_calc.h":
    const char *MNO4_n2_dew2019_identifier();
    const char *MNO4_n2_dew2019_name();
    const char *MNO4_n2_dew2019_formula();
    const double MNO4_n2_dew2019_mw();
    const double *MNO4_n2_dew2019_elements();
    double MNO4_n2_dew2019_g(double t, double p)
    double MNO4_n2_dew2019_dgdt(double t, double p)
    double MNO4_n2_dew2019_dgdp(double t, double p)
    double MNO4_n2_dew2019_d2gdt2(double t, double p)
    double MNO4_n2_dew2019_d2gdtdp(double t, double p)
    double MNO4_n2_dew2019_d2gdp2(double t, double p)
    double MNO4_n2_dew2019_d3gdt3(double t, double p)
    double MNO4_n2_dew2019_d3gdt2dp(double t, double p)
    double MNO4_n2_dew2019_d3gdtdp2(double t, double p)
    double MNO4_n2_dew2019_d3gdp3(double t, double p)
    double MNO4_n2_dew2019_s(double t, double p)
    double MNO4_n2_dew2019_v(double t, double p)
    double MNO4_n2_dew2019_cv(double t, double p)
    double MNO4_n2_dew2019_cp(double t, double p)
    double MNO4_n2_dew2019_dcpdt(double t, double p)
    double MNO4_n2_dew2019_alpha(double t, double p)
    double MNO4_n2_dew2019_beta(double t, double p)
    double MNO4_n2_dew2019_K(double t, double p)
    double MNO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MNO4_n2_dew2019_identifier():
    result = <bytes> MNO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MNO4_n2_dew2019_name():
    result = <bytes> MNO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_MNO4_n2_dew2019_formula():
    result = <bytes> MNO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_MNO4_n2_dew2019_mw():
    result = MNO4_n2_dew2019_mw()
    return result
def cy_MNO4_n2_dew2019_elements():
    cdef const double *e = MNO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MNO4_n2_dew2019_g(double t, double p):
    result = MNO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_dgdt(double t, double p):
    result = MNO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_dgdp(double t, double p):
    result = MNO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_d2gdt2(double t, double p):
    result = MNO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_d2gdtdp(double t, double p):
    result = MNO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_d2gdp2(double t, double p):
    result = MNO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_d3gdt3(double t, double p):
    result = MNO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = MNO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = MNO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_d3gdp3(double t, double p):
    result = MNO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_s(double t, double p):
    result = MNO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_v(double t, double p):
    result = MNO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_cv(double t, double p):
    result = MNO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_cp(double t, double p):
    result = MNO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_dcpdt(double t, double p):
    result = MNO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_alpha(double t, double p):
    result = MNO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_beta(double t, double p):
    result = MNO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_K(double t, double p):
    result = MNO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_MNO4_n2_dew2019_Kp(double t, double p):
    result = MNO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MNO4_n_dew2019_calc.h":
    const char *MNO4_n_dew2019_identifier();
    const char *MNO4_n_dew2019_name();
    const char *MNO4_n_dew2019_formula();
    const double MNO4_n_dew2019_mw();
    const double *MNO4_n_dew2019_elements();
    double MNO4_n_dew2019_g(double t, double p)
    double MNO4_n_dew2019_dgdt(double t, double p)
    double MNO4_n_dew2019_dgdp(double t, double p)
    double MNO4_n_dew2019_d2gdt2(double t, double p)
    double MNO4_n_dew2019_d2gdtdp(double t, double p)
    double MNO4_n_dew2019_d2gdp2(double t, double p)
    double MNO4_n_dew2019_d3gdt3(double t, double p)
    double MNO4_n_dew2019_d3gdt2dp(double t, double p)
    double MNO4_n_dew2019_d3gdtdp2(double t, double p)
    double MNO4_n_dew2019_d3gdp3(double t, double p)
    double MNO4_n_dew2019_s(double t, double p)
    double MNO4_n_dew2019_v(double t, double p)
    double MNO4_n_dew2019_cv(double t, double p)
    double MNO4_n_dew2019_cp(double t, double p)
    double MNO4_n_dew2019_dcpdt(double t, double p)
    double MNO4_n_dew2019_alpha(double t, double p)
    double MNO4_n_dew2019_beta(double t, double p)
    double MNO4_n_dew2019_K(double t, double p)
    double MNO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MNO4_n_dew2019_identifier():
    result = <bytes> MNO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MNO4_n_dew2019_name():
    result = <bytes> MNO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_MNO4_n_dew2019_formula():
    result = <bytes> MNO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_MNO4_n_dew2019_mw():
    result = MNO4_n_dew2019_mw()
    return result
def cy_MNO4_n_dew2019_elements():
    cdef const double *e = MNO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MNO4_n_dew2019_g(double t, double p):
    result = MNO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_dgdt(double t, double p):
    result = MNO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_dgdp(double t, double p):
    result = MNO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_d2gdt2(double t, double p):
    result = MNO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_d2gdtdp(double t, double p):
    result = MNO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_d2gdp2(double t, double p):
    result = MNO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_d3gdt3(double t, double p):
    result = MNO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_d3gdt2dp(double t, double p):
    result = MNO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_d3gdtdp2(double t, double p):
    result = MNO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_d3gdp3(double t, double p):
    result = MNO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_s(double t, double p):
    result = MNO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_v(double t, double p):
    result = MNO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_cv(double t, double p):
    result = MNO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_cp(double t, double p):
    result = MNO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_dcpdt(double t, double p):
    result = MNO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_alpha(double t, double p):
    result = MNO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_beta(double t, double p):
    result = MNO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_K(double t, double p):
    result = MNO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_MNO4_n_dew2019_Kp(double t, double p):
    result = MNO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MNCL_p_dew2019_calc.h":
    const char *MNCL_p_dew2019_identifier();
    const char *MNCL_p_dew2019_name();
    const char *MNCL_p_dew2019_formula();
    const double MNCL_p_dew2019_mw();
    const double *MNCL_p_dew2019_elements();
    double MNCL_p_dew2019_g(double t, double p)
    double MNCL_p_dew2019_dgdt(double t, double p)
    double MNCL_p_dew2019_dgdp(double t, double p)
    double MNCL_p_dew2019_d2gdt2(double t, double p)
    double MNCL_p_dew2019_d2gdtdp(double t, double p)
    double MNCL_p_dew2019_d2gdp2(double t, double p)
    double MNCL_p_dew2019_d3gdt3(double t, double p)
    double MNCL_p_dew2019_d3gdt2dp(double t, double p)
    double MNCL_p_dew2019_d3gdtdp2(double t, double p)
    double MNCL_p_dew2019_d3gdp3(double t, double p)
    double MNCL_p_dew2019_s(double t, double p)
    double MNCL_p_dew2019_v(double t, double p)
    double MNCL_p_dew2019_cv(double t, double p)
    double MNCL_p_dew2019_cp(double t, double p)
    double MNCL_p_dew2019_dcpdt(double t, double p)
    double MNCL_p_dew2019_alpha(double t, double p)
    double MNCL_p_dew2019_beta(double t, double p)
    double MNCL_p_dew2019_K(double t, double p)
    double MNCL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MNCL_p_dew2019_identifier():
    result = <bytes> MNCL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MNCL_p_dew2019_name():
    result = <bytes> MNCL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_MNCL_p_dew2019_formula():
    result = <bytes> MNCL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_MNCL_p_dew2019_mw():
    result = MNCL_p_dew2019_mw()
    return result
def cy_MNCL_p_dew2019_elements():
    cdef const double *e = MNCL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MNCL_p_dew2019_g(double t, double p):
    result = MNCL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_dgdt(double t, double p):
    result = MNCL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_dgdp(double t, double p):
    result = MNCL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_d2gdt2(double t, double p):
    result = MNCL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_d2gdtdp(double t, double p):
    result = MNCL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_d2gdp2(double t, double p):
    result = MNCL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_d3gdt3(double t, double p):
    result = MNCL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_d3gdt2dp(double t, double p):
    result = MNCL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_d3gdtdp2(double t, double p):
    result = MNCL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_d3gdp3(double t, double p):
    result = MNCL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_s(double t, double p):
    result = MNCL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_v(double t, double p):
    result = MNCL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_cv(double t, double p):
    result = MNCL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_cp(double t, double p):
    result = MNCL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_dcpdt(double t, double p):
    result = MNCL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_alpha(double t, double p):
    result = MNCL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_beta(double t, double p):
    result = MNCL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_K(double t, double p):
    result = MNCL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_MNCL_p_dew2019_Kp(double t, double p):
    result = MNCL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MN_p2_dew2019_calc.h":
    const char *MN_p2_dew2019_identifier();
    const char *MN_p2_dew2019_name();
    const char *MN_p2_dew2019_formula();
    const double MN_p2_dew2019_mw();
    const double *MN_p2_dew2019_elements();
    double MN_p2_dew2019_g(double t, double p)
    double MN_p2_dew2019_dgdt(double t, double p)
    double MN_p2_dew2019_dgdp(double t, double p)
    double MN_p2_dew2019_d2gdt2(double t, double p)
    double MN_p2_dew2019_d2gdtdp(double t, double p)
    double MN_p2_dew2019_d2gdp2(double t, double p)
    double MN_p2_dew2019_d3gdt3(double t, double p)
    double MN_p2_dew2019_d3gdt2dp(double t, double p)
    double MN_p2_dew2019_d3gdtdp2(double t, double p)
    double MN_p2_dew2019_d3gdp3(double t, double p)
    double MN_p2_dew2019_s(double t, double p)
    double MN_p2_dew2019_v(double t, double p)
    double MN_p2_dew2019_cv(double t, double p)
    double MN_p2_dew2019_cp(double t, double p)
    double MN_p2_dew2019_dcpdt(double t, double p)
    double MN_p2_dew2019_alpha(double t, double p)
    double MN_p2_dew2019_beta(double t, double p)
    double MN_p2_dew2019_K(double t, double p)
    double MN_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MN_p2_dew2019_identifier():
    result = <bytes> MN_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MN_p2_dew2019_name():
    result = <bytes> MN_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_MN_p2_dew2019_formula():
    result = <bytes> MN_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_MN_p2_dew2019_mw():
    result = MN_p2_dew2019_mw()
    return result
def cy_MN_p2_dew2019_elements():
    cdef const double *e = MN_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MN_p2_dew2019_g(double t, double p):
    result = MN_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_dgdt(double t, double p):
    result = MN_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_dgdp(double t, double p):
    result = MN_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_d2gdt2(double t, double p):
    result = MN_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_d2gdtdp(double t, double p):
    result = MN_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_d2gdp2(double t, double p):
    result = MN_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_d3gdt3(double t, double p):
    result = MN_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_d3gdt2dp(double t, double p):
    result = MN_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_d3gdtdp2(double t, double p):
    result = MN_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_d3gdp3(double t, double p):
    result = MN_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_s(double t, double p):
    result = MN_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_v(double t, double p):
    result = MN_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_cv(double t, double p):
    result = MN_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_cp(double t, double p):
    result = MN_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_dcpdt(double t, double p):
    result = MN_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_alpha(double t, double p):
    result = MN_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_beta(double t, double p):
    result = MN_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_K(double t, double p):
    result = MN_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_MN_p2_dew2019_Kp(double t, double p):
    result = MN_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MGSO4_l_AQ_r__dew2019_calc.h":
    const char *MGSO4_l_AQ_r__dew2019_identifier();
    const char *MGSO4_l_AQ_r__dew2019_name();
    const char *MGSO4_l_AQ_r__dew2019_formula();
    const double MGSO4_l_AQ_r__dew2019_mw();
    const double *MGSO4_l_AQ_r__dew2019_elements();
    double MGSO4_l_AQ_r__dew2019_g(double t, double p)
    double MGSO4_l_AQ_r__dew2019_dgdt(double t, double p)
    double MGSO4_l_AQ_r__dew2019_dgdp(double t, double p)
    double MGSO4_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double MGSO4_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double MGSO4_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double MGSO4_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double MGSO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double MGSO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double MGSO4_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double MGSO4_l_AQ_r__dew2019_s(double t, double p)
    double MGSO4_l_AQ_r__dew2019_v(double t, double p)
    double MGSO4_l_AQ_r__dew2019_cv(double t, double p)
    double MGSO4_l_AQ_r__dew2019_cp(double t, double p)
    double MGSO4_l_AQ_r__dew2019_dcpdt(double t, double p)
    double MGSO4_l_AQ_r__dew2019_alpha(double t, double p)
    double MGSO4_l_AQ_r__dew2019_beta(double t, double p)
    double MGSO4_l_AQ_r__dew2019_K(double t, double p)
    double MGSO4_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MGSO4_l_AQ_r__dew2019_identifier():
    result = <bytes> MGSO4_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_MGSO4_l_AQ_r__dew2019_name():
    result = <bytes> MGSO4_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_MGSO4_l_AQ_r__dew2019_formula():
    result = <bytes> MGSO4_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_MGSO4_l_AQ_r__dew2019_mw():
    result = MGSO4_l_AQ_r__dew2019_mw()
    return result
def cy_MGSO4_l_AQ_r__dew2019_elements():
    cdef const double *e = MGSO4_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MGSO4_l_AQ_r__dew2019_g(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_dgdt(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_dgdp(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_s(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_v(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_cv(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_cp(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_alpha(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_beta(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_K(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_MGSO4_l_AQ_r__dew2019_Kp(double t, double p):
    result = MGSO4_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MGSIC_p_dew2019_calc.h":
    const char *MGSIC_p_dew2019_identifier();
    const char *MGSIC_p_dew2019_name();
    const char *MGSIC_p_dew2019_formula();
    const double MGSIC_p_dew2019_mw();
    const double *MGSIC_p_dew2019_elements();
    double MGSIC_p_dew2019_g(double t, double p)
    double MGSIC_p_dew2019_dgdt(double t, double p)
    double MGSIC_p_dew2019_dgdp(double t, double p)
    double MGSIC_p_dew2019_d2gdt2(double t, double p)
    double MGSIC_p_dew2019_d2gdtdp(double t, double p)
    double MGSIC_p_dew2019_d2gdp2(double t, double p)
    double MGSIC_p_dew2019_d3gdt3(double t, double p)
    double MGSIC_p_dew2019_d3gdt2dp(double t, double p)
    double MGSIC_p_dew2019_d3gdtdp2(double t, double p)
    double MGSIC_p_dew2019_d3gdp3(double t, double p)
    double MGSIC_p_dew2019_s(double t, double p)
    double MGSIC_p_dew2019_v(double t, double p)
    double MGSIC_p_dew2019_cv(double t, double p)
    double MGSIC_p_dew2019_cp(double t, double p)
    double MGSIC_p_dew2019_dcpdt(double t, double p)
    double MGSIC_p_dew2019_alpha(double t, double p)
    double MGSIC_p_dew2019_beta(double t, double p)
    double MGSIC_p_dew2019_K(double t, double p)
    double MGSIC_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MGSIC_p_dew2019_identifier():
    result = <bytes> MGSIC_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MGSIC_p_dew2019_name():
    result = <bytes> MGSIC_p_dew2019_name()
    return result.decode('UTF-8')
def cy_MGSIC_p_dew2019_formula():
    result = <bytes> MGSIC_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_MGSIC_p_dew2019_mw():
    result = MGSIC_p_dew2019_mw()
    return result
def cy_MGSIC_p_dew2019_elements():
    cdef const double *e = MGSIC_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MGSIC_p_dew2019_g(double t, double p):
    result = MGSIC_p_dew2019_g(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_dgdt(double t, double p):
    result = MGSIC_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_dgdp(double t, double p):
    result = MGSIC_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_d2gdt2(double t, double p):
    result = MGSIC_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_d2gdtdp(double t, double p):
    result = MGSIC_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_d2gdp2(double t, double p):
    result = MGSIC_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_d3gdt3(double t, double p):
    result = MGSIC_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_d3gdt2dp(double t, double p):
    result = MGSIC_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_d3gdtdp2(double t, double p):
    result = MGSIC_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_d3gdp3(double t, double p):
    result = MGSIC_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_s(double t, double p):
    result = MGSIC_p_dew2019_s(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_v(double t, double p):
    result = MGSIC_p_dew2019_v(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_cv(double t, double p):
    result = MGSIC_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_cp(double t, double p):
    result = MGSIC_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_dcpdt(double t, double p):
    result = MGSIC_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_alpha(double t, double p):
    result = MGSIC_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_beta(double t, double p):
    result = MGSIC_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_K(double t, double p):
    result = MGSIC_p_dew2019_K(<double> t, <double> p)
    return result
def cy_MGSIC_p_dew2019_Kp(double t, double p):
    result = MGSIC_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MG_l_OH_r__p_dew2019_calc.h":
    const char *MG_l_OH_r__p_dew2019_identifier();
    const char *MG_l_OH_r__p_dew2019_name();
    const char *MG_l_OH_r__p_dew2019_formula();
    const double MG_l_OH_r__p_dew2019_mw();
    const double *MG_l_OH_r__p_dew2019_elements();
    double MG_l_OH_r__p_dew2019_g(double t, double p)
    double MG_l_OH_r__p_dew2019_dgdt(double t, double p)
    double MG_l_OH_r__p_dew2019_dgdp(double t, double p)
    double MG_l_OH_r__p_dew2019_d2gdt2(double t, double p)
    double MG_l_OH_r__p_dew2019_d2gdtdp(double t, double p)
    double MG_l_OH_r__p_dew2019_d2gdp2(double t, double p)
    double MG_l_OH_r__p_dew2019_d3gdt3(double t, double p)
    double MG_l_OH_r__p_dew2019_d3gdt2dp(double t, double p)
    double MG_l_OH_r__p_dew2019_d3gdtdp2(double t, double p)
    double MG_l_OH_r__p_dew2019_d3gdp3(double t, double p)
    double MG_l_OH_r__p_dew2019_s(double t, double p)
    double MG_l_OH_r__p_dew2019_v(double t, double p)
    double MG_l_OH_r__p_dew2019_cv(double t, double p)
    double MG_l_OH_r__p_dew2019_cp(double t, double p)
    double MG_l_OH_r__p_dew2019_dcpdt(double t, double p)
    double MG_l_OH_r__p_dew2019_alpha(double t, double p)
    double MG_l_OH_r__p_dew2019_beta(double t, double p)
    double MG_l_OH_r__p_dew2019_K(double t, double p)
    double MG_l_OH_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MG_l_OH_r__p_dew2019_identifier():
    result = <bytes> MG_l_OH_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MG_l_OH_r__p_dew2019_name():
    result = <bytes> MG_l_OH_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_MG_l_OH_r__p_dew2019_formula():
    result = <bytes> MG_l_OH_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_MG_l_OH_r__p_dew2019_mw():
    result = MG_l_OH_r__p_dew2019_mw()
    return result
def cy_MG_l_OH_r__p_dew2019_elements():
    cdef const double *e = MG_l_OH_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MG_l_OH_r__p_dew2019_g(double t, double p):
    result = MG_l_OH_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_dgdt(double t, double p):
    result = MG_l_OH_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_dgdp(double t, double p):
    result = MG_l_OH_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_d2gdt2(double t, double p):
    result = MG_l_OH_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_d2gdtdp(double t, double p):
    result = MG_l_OH_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_d2gdp2(double t, double p):
    result = MG_l_OH_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_d3gdt3(double t, double p):
    result = MG_l_OH_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_d3gdt2dp(double t, double p):
    result = MG_l_OH_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_d3gdtdp2(double t, double p):
    result = MG_l_OH_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_d3gdp3(double t, double p):
    result = MG_l_OH_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_s(double t, double p):
    result = MG_l_OH_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_v(double t, double p):
    result = MG_l_OH_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_cv(double t, double p):
    result = MG_l_OH_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_cp(double t, double p):
    result = MG_l_OH_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_dcpdt(double t, double p):
    result = MG_l_OH_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_alpha(double t, double p):
    result = MG_l_OH_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_beta(double t, double p):
    result = MG_l_OH_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_K(double t, double p):
    result = MG_l_OH_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_MG_l_OH_r__p_dew2019_Kp(double t, double p):
    result = MG_l_OH_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MG_l_OH_r_2_l_AQ_r__dew2019_calc.h":
    const char *MG_l_OH_r_2_l_AQ_r__dew2019_identifier();
    const char *MG_l_OH_r_2_l_AQ_r__dew2019_name();
    const char *MG_l_OH_r_2_l_AQ_r__dew2019_formula();
    const double MG_l_OH_r_2_l_AQ_r__dew2019_mw();
    const double *MG_l_OH_r_2_l_AQ_r__dew2019_elements();
    double MG_l_OH_r_2_l_AQ_r__dew2019_g(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_dgdt(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_dgdp(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_s(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_v(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_cv(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_cp(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_alpha(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_beta(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_K(double t, double p)
    double MG_l_OH_r_2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_identifier():
    result = <bytes> MG_l_OH_r_2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_name():
    result = <bytes> MG_l_OH_r_2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_formula():
    result = <bytes> MG_l_OH_r_2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_mw():
    result = MG_l_OH_r_2_l_AQ_r__dew2019_mw()
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_elements():
    cdef const double *e = MG_l_OH_r_2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_g(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_s(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_v(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_cv(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_cp(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_alpha(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_beta(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_K(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_MG_l_OH_r_2_l_AQ_r__dew2019_Kp(double t, double p):
    result = MG_l_OH_r_2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MGCO3_l_AQ_r__dew2019_calc.h":
    const char *MGCO3_l_AQ_r__dew2019_identifier();
    const char *MGCO3_l_AQ_r__dew2019_name();
    const char *MGCO3_l_AQ_r__dew2019_formula();
    const double MGCO3_l_AQ_r__dew2019_mw();
    const double *MGCO3_l_AQ_r__dew2019_elements();
    double MGCO3_l_AQ_r__dew2019_g(double t, double p)
    double MGCO3_l_AQ_r__dew2019_dgdt(double t, double p)
    double MGCO3_l_AQ_r__dew2019_dgdp(double t, double p)
    double MGCO3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double MGCO3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double MGCO3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double MGCO3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double MGCO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double MGCO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double MGCO3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double MGCO3_l_AQ_r__dew2019_s(double t, double p)
    double MGCO3_l_AQ_r__dew2019_v(double t, double p)
    double MGCO3_l_AQ_r__dew2019_cv(double t, double p)
    double MGCO3_l_AQ_r__dew2019_cp(double t, double p)
    double MGCO3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double MGCO3_l_AQ_r__dew2019_alpha(double t, double p)
    double MGCO3_l_AQ_r__dew2019_beta(double t, double p)
    double MGCO3_l_AQ_r__dew2019_K(double t, double p)
    double MGCO3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MGCO3_l_AQ_r__dew2019_identifier():
    result = <bytes> MGCO3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_MGCO3_l_AQ_r__dew2019_name():
    result = <bytes> MGCO3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_MGCO3_l_AQ_r__dew2019_formula():
    result = <bytes> MGCO3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_MGCO3_l_AQ_r__dew2019_mw():
    result = MGCO3_l_AQ_r__dew2019_mw()
    return result
def cy_MGCO3_l_AQ_r__dew2019_elements():
    cdef const double *e = MGCO3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MGCO3_l_AQ_r__dew2019_g(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_s(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_v(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_cv(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_cp(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_alpha(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_beta(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_K(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_MGCO3_l_AQ_r__dew2019_Kp(double t, double p):
    result = MGCO3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MGCL_p_dew2019_calc.h":
    const char *MGCL_p_dew2019_identifier();
    const char *MGCL_p_dew2019_name();
    const char *MGCL_p_dew2019_formula();
    const double MGCL_p_dew2019_mw();
    const double *MGCL_p_dew2019_elements();
    double MGCL_p_dew2019_g(double t, double p)
    double MGCL_p_dew2019_dgdt(double t, double p)
    double MGCL_p_dew2019_dgdp(double t, double p)
    double MGCL_p_dew2019_d2gdt2(double t, double p)
    double MGCL_p_dew2019_d2gdtdp(double t, double p)
    double MGCL_p_dew2019_d2gdp2(double t, double p)
    double MGCL_p_dew2019_d3gdt3(double t, double p)
    double MGCL_p_dew2019_d3gdt2dp(double t, double p)
    double MGCL_p_dew2019_d3gdtdp2(double t, double p)
    double MGCL_p_dew2019_d3gdp3(double t, double p)
    double MGCL_p_dew2019_s(double t, double p)
    double MGCL_p_dew2019_v(double t, double p)
    double MGCL_p_dew2019_cv(double t, double p)
    double MGCL_p_dew2019_cp(double t, double p)
    double MGCL_p_dew2019_dcpdt(double t, double p)
    double MGCL_p_dew2019_alpha(double t, double p)
    double MGCL_p_dew2019_beta(double t, double p)
    double MGCL_p_dew2019_K(double t, double p)
    double MGCL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MGCL_p_dew2019_identifier():
    result = <bytes> MGCL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MGCL_p_dew2019_name():
    result = <bytes> MGCL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_MGCL_p_dew2019_formula():
    result = <bytes> MGCL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_MGCL_p_dew2019_mw():
    result = MGCL_p_dew2019_mw()
    return result
def cy_MGCL_p_dew2019_elements():
    cdef const double *e = MGCL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MGCL_p_dew2019_g(double t, double p):
    result = MGCL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_dgdt(double t, double p):
    result = MGCL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_dgdp(double t, double p):
    result = MGCL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_d2gdt2(double t, double p):
    result = MGCL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_d2gdtdp(double t, double p):
    result = MGCL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_d2gdp2(double t, double p):
    result = MGCL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_d3gdt3(double t, double p):
    result = MGCL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_d3gdt2dp(double t, double p):
    result = MGCL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_d3gdtdp2(double t, double p):
    result = MGCL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_d3gdp3(double t, double p):
    result = MGCL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_s(double t, double p):
    result = MGCL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_v(double t, double p):
    result = MGCL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_cv(double t, double p):
    result = MGCL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_cp(double t, double p):
    result = MGCL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_dcpdt(double t, double p):
    result = MGCL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_alpha(double t, double p):
    result = MGCL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_beta(double t, double p):
    result = MGCL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_K(double t, double p):
    result = MGCL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_MGCL_p_dew2019_Kp(double t, double p):
    result = MGCL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MG_p2_dew2019_calc.h":
    const char *MG_p2_dew2019_identifier();
    const char *MG_p2_dew2019_name();
    const char *MG_p2_dew2019_formula();
    const double MG_p2_dew2019_mw();
    const double *MG_p2_dew2019_elements();
    double MG_p2_dew2019_g(double t, double p)
    double MG_p2_dew2019_dgdt(double t, double p)
    double MG_p2_dew2019_dgdp(double t, double p)
    double MG_p2_dew2019_d2gdt2(double t, double p)
    double MG_p2_dew2019_d2gdtdp(double t, double p)
    double MG_p2_dew2019_d2gdp2(double t, double p)
    double MG_p2_dew2019_d3gdt3(double t, double p)
    double MG_p2_dew2019_d3gdt2dp(double t, double p)
    double MG_p2_dew2019_d3gdtdp2(double t, double p)
    double MG_p2_dew2019_d3gdp3(double t, double p)
    double MG_p2_dew2019_s(double t, double p)
    double MG_p2_dew2019_v(double t, double p)
    double MG_p2_dew2019_cv(double t, double p)
    double MG_p2_dew2019_cp(double t, double p)
    double MG_p2_dew2019_dcpdt(double t, double p)
    double MG_p2_dew2019_alpha(double t, double p)
    double MG_p2_dew2019_beta(double t, double p)
    double MG_p2_dew2019_K(double t, double p)
    double MG_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MG_p2_dew2019_identifier():
    result = <bytes> MG_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MG_p2_dew2019_name():
    result = <bytes> MG_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_MG_p2_dew2019_formula():
    result = <bytes> MG_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_MG_p2_dew2019_mw():
    result = MG_p2_dew2019_mw()
    return result
def cy_MG_p2_dew2019_elements():
    cdef const double *e = MG_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MG_p2_dew2019_g(double t, double p):
    result = MG_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_dgdt(double t, double p):
    result = MG_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_dgdp(double t, double p):
    result = MG_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_d2gdt2(double t, double p):
    result = MG_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_d2gdtdp(double t, double p):
    result = MG_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_d2gdp2(double t, double p):
    result = MG_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_d3gdt3(double t, double p):
    result = MG_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_d3gdt2dp(double t, double p):
    result = MG_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_d3gdtdp2(double t, double p):
    result = MG_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_d3gdp3(double t, double p):
    result = MG_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_s(double t, double p):
    result = MG_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_v(double t, double p):
    result = MG_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_cv(double t, double p):
    result = MG_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_cp(double t, double p):
    result = MG_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_dcpdt(double t, double p):
    result = MG_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_alpha(double t, double p):
    result = MG_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_beta(double t, double p):
    result = MG_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_K(double t, double p):
    result = MG_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_MG_p2_dew2019_Kp(double t, double p):
    result = MG_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MG_l_H3SIO4_r__p_dew2019_calc.h":
    const char *MG_l_H3SIO4_r__p_dew2019_identifier();
    const char *MG_l_H3SIO4_r__p_dew2019_name();
    const char *MG_l_H3SIO4_r__p_dew2019_formula();
    const double MG_l_H3SIO4_r__p_dew2019_mw();
    const double *MG_l_H3SIO4_r__p_dew2019_elements();
    double MG_l_H3SIO4_r__p_dew2019_g(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_dgdt(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_dgdp(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_d2gdt2(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_d2gdtdp(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_d2gdp2(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_d3gdt3(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_d3gdt2dp(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_d3gdtdp2(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_d3gdp3(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_s(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_v(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_cv(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_cp(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_dcpdt(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_alpha(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_beta(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_K(double t, double p)
    double MG_l_H3SIO4_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MG_l_H3SIO4_r__p_dew2019_identifier():
    result = <bytes> MG_l_H3SIO4_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MG_l_H3SIO4_r__p_dew2019_name():
    result = <bytes> MG_l_H3SIO4_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_MG_l_H3SIO4_r__p_dew2019_formula():
    result = <bytes> MG_l_H3SIO4_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_MG_l_H3SIO4_r__p_dew2019_mw():
    result = MG_l_H3SIO4_r__p_dew2019_mw()
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_elements():
    cdef const double *e = MG_l_H3SIO4_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MG_l_H3SIO4_r__p_dew2019_g(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_dgdt(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_dgdp(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_d2gdt2(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_d2gdtdp(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_d2gdp2(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_d3gdt3(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_d3gdt2dp(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_d3gdtdp2(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_d3gdp3(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_s(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_v(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_cv(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_cp(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_dcpdt(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_alpha(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_beta(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_K(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_MG_l_H3SIO4_r__p_dew2019_Kp(double t, double p):
    result = MG_l_H3SIO4_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "MG_l_HCO3_r__p_dew2019_calc.h":
    const char *MG_l_HCO3_r__p_dew2019_identifier();
    const char *MG_l_HCO3_r__p_dew2019_name();
    const char *MG_l_HCO3_r__p_dew2019_formula();
    const double MG_l_HCO3_r__p_dew2019_mw();
    const double *MG_l_HCO3_r__p_dew2019_elements();
    double MG_l_HCO3_r__p_dew2019_g(double t, double p)
    double MG_l_HCO3_r__p_dew2019_dgdt(double t, double p)
    double MG_l_HCO3_r__p_dew2019_dgdp(double t, double p)
    double MG_l_HCO3_r__p_dew2019_d2gdt2(double t, double p)
    double MG_l_HCO3_r__p_dew2019_d2gdtdp(double t, double p)
    double MG_l_HCO3_r__p_dew2019_d2gdp2(double t, double p)
    double MG_l_HCO3_r__p_dew2019_d3gdt3(double t, double p)
    double MG_l_HCO3_r__p_dew2019_d3gdt2dp(double t, double p)
    double MG_l_HCO3_r__p_dew2019_d3gdtdp2(double t, double p)
    double MG_l_HCO3_r__p_dew2019_d3gdp3(double t, double p)
    double MG_l_HCO3_r__p_dew2019_s(double t, double p)
    double MG_l_HCO3_r__p_dew2019_v(double t, double p)
    double MG_l_HCO3_r__p_dew2019_cv(double t, double p)
    double MG_l_HCO3_r__p_dew2019_cp(double t, double p)
    double MG_l_HCO3_r__p_dew2019_dcpdt(double t, double p)
    double MG_l_HCO3_r__p_dew2019_alpha(double t, double p)
    double MG_l_HCO3_r__p_dew2019_beta(double t, double p)
    double MG_l_HCO3_r__p_dew2019_K(double t, double p)
    double MG_l_HCO3_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_MG_l_HCO3_r__p_dew2019_identifier():
    result = <bytes> MG_l_HCO3_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_MG_l_HCO3_r__p_dew2019_name():
    result = <bytes> MG_l_HCO3_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_MG_l_HCO3_r__p_dew2019_formula():
    result = <bytes> MG_l_HCO3_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_MG_l_HCO3_r__p_dew2019_mw():
    result = MG_l_HCO3_r__p_dew2019_mw()
    return result
def cy_MG_l_HCO3_r__p_dew2019_elements():
    cdef const double *e = MG_l_HCO3_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_MG_l_HCO3_r__p_dew2019_g(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_dgdt(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_dgdp(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_d2gdt2(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_d2gdtdp(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_d2gdp2(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_d3gdt3(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_d3gdt2dp(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_d3gdtdp2(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_d3gdp3(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_s(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_v(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_cv(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_cp(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_dcpdt(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_alpha(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_beta(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_K(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_MG_l_HCO3_r__p_dew2019_Kp(double t, double p):
    result = MG_l_HCO3_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "METHANOL_l_AQ_r__dew2019_calc.h":
    const char *METHANOL_l_AQ_r__dew2019_identifier();
    const char *METHANOL_l_AQ_r__dew2019_name();
    const char *METHANOL_l_AQ_r__dew2019_formula();
    const double METHANOL_l_AQ_r__dew2019_mw();
    const double *METHANOL_l_AQ_r__dew2019_elements();
    double METHANOL_l_AQ_r__dew2019_g(double t, double p)
    double METHANOL_l_AQ_r__dew2019_dgdt(double t, double p)
    double METHANOL_l_AQ_r__dew2019_dgdp(double t, double p)
    double METHANOL_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double METHANOL_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double METHANOL_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double METHANOL_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double METHANOL_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double METHANOL_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double METHANOL_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double METHANOL_l_AQ_r__dew2019_s(double t, double p)
    double METHANOL_l_AQ_r__dew2019_v(double t, double p)
    double METHANOL_l_AQ_r__dew2019_cv(double t, double p)
    double METHANOL_l_AQ_r__dew2019_cp(double t, double p)
    double METHANOL_l_AQ_r__dew2019_dcpdt(double t, double p)
    double METHANOL_l_AQ_r__dew2019_alpha(double t, double p)
    double METHANOL_l_AQ_r__dew2019_beta(double t, double p)
    double METHANOL_l_AQ_r__dew2019_K(double t, double p)
    double METHANOL_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_METHANOL_l_AQ_r__dew2019_identifier():
    result = <bytes> METHANOL_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_METHANOL_l_AQ_r__dew2019_name():
    result = <bytes> METHANOL_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_METHANOL_l_AQ_r__dew2019_formula():
    result = <bytes> METHANOL_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_METHANOL_l_AQ_r__dew2019_mw():
    result = METHANOL_l_AQ_r__dew2019_mw()
    return result
def cy_METHANOL_l_AQ_r__dew2019_elements():
    cdef const double *e = METHANOL_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_METHANOL_l_AQ_r__dew2019_g(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_dgdt(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_dgdp(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_s(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_v(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_cv(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_cp(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_alpha(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_beta(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_K(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_METHANOL_l_AQ_r__dew2019_Kp(double t, double p):
    result = METHANOL_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "METHANE_l_AQ_r__dew2019_calc.h":
    const char *METHANE_l_AQ_r__dew2019_identifier();
    const char *METHANE_l_AQ_r__dew2019_name();
    const char *METHANE_l_AQ_r__dew2019_formula();
    const double METHANE_l_AQ_r__dew2019_mw();
    const double *METHANE_l_AQ_r__dew2019_elements();
    double METHANE_l_AQ_r__dew2019_g(double t, double p)
    double METHANE_l_AQ_r__dew2019_dgdt(double t, double p)
    double METHANE_l_AQ_r__dew2019_dgdp(double t, double p)
    double METHANE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double METHANE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double METHANE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double METHANE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double METHANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double METHANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double METHANE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double METHANE_l_AQ_r__dew2019_s(double t, double p)
    double METHANE_l_AQ_r__dew2019_v(double t, double p)
    double METHANE_l_AQ_r__dew2019_cv(double t, double p)
    double METHANE_l_AQ_r__dew2019_cp(double t, double p)
    double METHANE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double METHANE_l_AQ_r__dew2019_alpha(double t, double p)
    double METHANE_l_AQ_r__dew2019_beta(double t, double p)
    double METHANE_l_AQ_r__dew2019_K(double t, double p)
    double METHANE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_METHANE_l_AQ_r__dew2019_identifier():
    result = <bytes> METHANE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_METHANE_l_AQ_r__dew2019_name():
    result = <bytes> METHANE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_METHANE_l_AQ_r__dew2019_formula():
    result = <bytes> METHANE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_METHANE_l_AQ_r__dew2019_mw():
    result = METHANE_l_AQ_r__dew2019_mw()
    return result
def cy_METHANE_l_AQ_r__dew2019_elements():
    cdef const double *e = METHANE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_METHANE_l_AQ_r__dew2019_g(double t, double p):
    result = METHANE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = METHANE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = METHANE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = METHANE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = METHANE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = METHANE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = METHANE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = METHANE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = METHANE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = METHANE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_s(double t, double p):
    result = METHANE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_v(double t, double p):
    result = METHANE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_cv(double t, double p):
    result = METHANE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_cp(double t, double p):
    result = METHANE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = METHANE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_alpha(double t, double p):
    result = METHANE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_beta(double t, double p):
    result = METHANE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_K(double t, double p):
    result = METHANE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_METHANE_l_AQ_r__dew2019_Kp(double t, double p):
    result = METHANE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "LU_p3_dew2019_calc.h":
    const char *LU_p3_dew2019_identifier();
    const char *LU_p3_dew2019_name();
    const char *LU_p3_dew2019_formula();
    const double LU_p3_dew2019_mw();
    const double *LU_p3_dew2019_elements();
    double LU_p3_dew2019_g(double t, double p)
    double LU_p3_dew2019_dgdt(double t, double p)
    double LU_p3_dew2019_dgdp(double t, double p)
    double LU_p3_dew2019_d2gdt2(double t, double p)
    double LU_p3_dew2019_d2gdtdp(double t, double p)
    double LU_p3_dew2019_d2gdp2(double t, double p)
    double LU_p3_dew2019_d3gdt3(double t, double p)
    double LU_p3_dew2019_d3gdt2dp(double t, double p)
    double LU_p3_dew2019_d3gdtdp2(double t, double p)
    double LU_p3_dew2019_d3gdp3(double t, double p)
    double LU_p3_dew2019_s(double t, double p)
    double LU_p3_dew2019_v(double t, double p)
    double LU_p3_dew2019_cv(double t, double p)
    double LU_p3_dew2019_cp(double t, double p)
    double LU_p3_dew2019_dcpdt(double t, double p)
    double LU_p3_dew2019_alpha(double t, double p)
    double LU_p3_dew2019_beta(double t, double p)
    double LU_p3_dew2019_K(double t, double p)
    double LU_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_LU_p3_dew2019_identifier():
    result = <bytes> LU_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_LU_p3_dew2019_name():
    result = <bytes> LU_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_LU_p3_dew2019_formula():
    result = <bytes> LU_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_LU_p3_dew2019_mw():
    result = LU_p3_dew2019_mw()
    return result
def cy_LU_p3_dew2019_elements():
    cdef const double *e = LU_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_LU_p3_dew2019_g(double t, double p):
    result = LU_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_dgdt(double t, double p):
    result = LU_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_dgdp(double t, double p):
    result = LU_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_d2gdt2(double t, double p):
    result = LU_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_d2gdtdp(double t, double p):
    result = LU_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_d2gdp2(double t, double p):
    result = LU_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_d3gdt3(double t, double p):
    result = LU_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_d3gdt2dp(double t, double p):
    result = LU_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_d3gdtdp2(double t, double p):
    result = LU_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_d3gdp3(double t, double p):
    result = LU_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_s(double t, double p):
    result = LU_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_v(double t, double p):
    result = LU_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_cv(double t, double p):
    result = LU_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_cp(double t, double p):
    result = LU_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_dcpdt(double t, double p):
    result = LU_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_alpha(double t, double p):
    result = LU_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_beta(double t, double p):
    result = LU_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_K(double t, double p):
    result = LU_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_LU_p3_dew2019_Kp(double t, double p):
    result = LU_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "LI_p_dew2019_calc.h":
    const char *LI_p_dew2019_identifier();
    const char *LI_p_dew2019_name();
    const char *LI_p_dew2019_formula();
    const double LI_p_dew2019_mw();
    const double *LI_p_dew2019_elements();
    double LI_p_dew2019_g(double t, double p)
    double LI_p_dew2019_dgdt(double t, double p)
    double LI_p_dew2019_dgdp(double t, double p)
    double LI_p_dew2019_d2gdt2(double t, double p)
    double LI_p_dew2019_d2gdtdp(double t, double p)
    double LI_p_dew2019_d2gdp2(double t, double p)
    double LI_p_dew2019_d3gdt3(double t, double p)
    double LI_p_dew2019_d3gdt2dp(double t, double p)
    double LI_p_dew2019_d3gdtdp2(double t, double p)
    double LI_p_dew2019_d3gdp3(double t, double p)
    double LI_p_dew2019_s(double t, double p)
    double LI_p_dew2019_v(double t, double p)
    double LI_p_dew2019_cv(double t, double p)
    double LI_p_dew2019_cp(double t, double p)
    double LI_p_dew2019_dcpdt(double t, double p)
    double LI_p_dew2019_alpha(double t, double p)
    double LI_p_dew2019_beta(double t, double p)
    double LI_p_dew2019_K(double t, double p)
    double LI_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_LI_p_dew2019_identifier():
    result = <bytes> LI_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_LI_p_dew2019_name():
    result = <bytes> LI_p_dew2019_name()
    return result.decode('UTF-8')
def cy_LI_p_dew2019_formula():
    result = <bytes> LI_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_LI_p_dew2019_mw():
    result = LI_p_dew2019_mw()
    return result
def cy_LI_p_dew2019_elements():
    cdef const double *e = LI_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_LI_p_dew2019_g(double t, double p):
    result = LI_p_dew2019_g(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_dgdt(double t, double p):
    result = LI_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_dgdp(double t, double p):
    result = LI_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_d2gdt2(double t, double p):
    result = LI_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_d2gdtdp(double t, double p):
    result = LI_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_d2gdp2(double t, double p):
    result = LI_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_d3gdt3(double t, double p):
    result = LI_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_d3gdt2dp(double t, double p):
    result = LI_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_d3gdtdp2(double t, double p):
    result = LI_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_d3gdp3(double t, double p):
    result = LI_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_s(double t, double p):
    result = LI_p_dew2019_s(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_v(double t, double p):
    result = LI_p_dew2019_v(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_cv(double t, double p):
    result = LI_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_cp(double t, double p):
    result = LI_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_dcpdt(double t, double p):
    result = LI_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_alpha(double t, double p):
    result = LI_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_beta(double t, double p):
    result = LI_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_K(double t, double p):
    result = LI_p_dew2019_K(<double> t, <double> p)
    return result
def cy_LI_p_dew2019_Kp(double t, double p):
    result = LI_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "LEUCINE_l_AQ_r__dew2019_calc.h":
    const char *LEUCINE_l_AQ_r__dew2019_identifier();
    const char *LEUCINE_l_AQ_r__dew2019_name();
    const char *LEUCINE_l_AQ_r__dew2019_formula();
    const double LEUCINE_l_AQ_r__dew2019_mw();
    const double *LEUCINE_l_AQ_r__dew2019_elements();
    double LEUCINE_l_AQ_r__dew2019_g(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_dgdt(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_dgdp(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_s(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_v(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_cv(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_cp(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_alpha(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_beta(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_K(double t, double p)
    double LEUCINE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_LEUCINE_l_AQ_r__dew2019_identifier():
    result = <bytes> LEUCINE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_LEUCINE_l_AQ_r__dew2019_name():
    result = <bytes> LEUCINE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_LEUCINE_l_AQ_r__dew2019_formula():
    result = <bytes> LEUCINE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_LEUCINE_l_AQ_r__dew2019_mw():
    result = LEUCINE_l_AQ_r__dew2019_mw()
    return result
def cy_LEUCINE_l_AQ_r__dew2019_elements():
    cdef const double *e = LEUCINE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_LEUCINE_l_AQ_r__dew2019_g(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_s(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_v(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_cv(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_cp(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_alpha(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_beta(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_K(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_LEUCINE_l_AQ_r__dew2019_Kp(double t, double p):
    result = LEUCINE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "LACTIC_l_AQ_r__dew2019_calc.h":
    const char *LACTIC_l_AQ_r__dew2019_identifier();
    const char *LACTIC_l_AQ_r__dew2019_name();
    const char *LACTIC_l_AQ_r__dew2019_formula();
    const double LACTIC_l_AQ_r__dew2019_mw();
    const double *LACTIC_l_AQ_r__dew2019_elements();
    double LACTIC_l_AQ_r__dew2019_g(double t, double p)
    double LACTIC_l_AQ_r__dew2019_dgdt(double t, double p)
    double LACTIC_l_AQ_r__dew2019_dgdp(double t, double p)
    double LACTIC_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double LACTIC_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double LACTIC_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double LACTIC_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double LACTIC_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double LACTIC_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double LACTIC_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double LACTIC_l_AQ_r__dew2019_s(double t, double p)
    double LACTIC_l_AQ_r__dew2019_v(double t, double p)
    double LACTIC_l_AQ_r__dew2019_cv(double t, double p)
    double LACTIC_l_AQ_r__dew2019_cp(double t, double p)
    double LACTIC_l_AQ_r__dew2019_dcpdt(double t, double p)
    double LACTIC_l_AQ_r__dew2019_alpha(double t, double p)
    double LACTIC_l_AQ_r__dew2019_beta(double t, double p)
    double LACTIC_l_AQ_r__dew2019_K(double t, double p)
    double LACTIC_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_LACTIC_l_AQ_r__dew2019_identifier():
    result = <bytes> LACTIC_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_LACTIC_l_AQ_r__dew2019_name():
    result = <bytes> LACTIC_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_LACTIC_l_AQ_r__dew2019_formula():
    result = <bytes> LACTIC_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_LACTIC_l_AQ_r__dew2019_mw():
    result = LACTIC_l_AQ_r__dew2019_mw()
    return result
def cy_LACTIC_l_AQ_r__dew2019_elements():
    cdef const double *e = LACTIC_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_LACTIC_l_AQ_r__dew2019_g(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_dgdt(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_dgdp(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_s(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_v(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_cv(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_cp(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_alpha(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_beta(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_K(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_LACTIC_l_AQ_r__dew2019_Kp(double t, double p):
    result = LACTIC_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "LACTATE_n_dew2019_calc.h":
    const char *LACTATE_n_dew2019_identifier();
    const char *LACTATE_n_dew2019_name();
    const char *LACTATE_n_dew2019_formula();
    const double LACTATE_n_dew2019_mw();
    const double *LACTATE_n_dew2019_elements();
    double LACTATE_n_dew2019_g(double t, double p)
    double LACTATE_n_dew2019_dgdt(double t, double p)
    double LACTATE_n_dew2019_dgdp(double t, double p)
    double LACTATE_n_dew2019_d2gdt2(double t, double p)
    double LACTATE_n_dew2019_d2gdtdp(double t, double p)
    double LACTATE_n_dew2019_d2gdp2(double t, double p)
    double LACTATE_n_dew2019_d3gdt3(double t, double p)
    double LACTATE_n_dew2019_d3gdt2dp(double t, double p)
    double LACTATE_n_dew2019_d3gdtdp2(double t, double p)
    double LACTATE_n_dew2019_d3gdp3(double t, double p)
    double LACTATE_n_dew2019_s(double t, double p)
    double LACTATE_n_dew2019_v(double t, double p)
    double LACTATE_n_dew2019_cv(double t, double p)
    double LACTATE_n_dew2019_cp(double t, double p)
    double LACTATE_n_dew2019_dcpdt(double t, double p)
    double LACTATE_n_dew2019_alpha(double t, double p)
    double LACTATE_n_dew2019_beta(double t, double p)
    double LACTATE_n_dew2019_K(double t, double p)
    double LACTATE_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_LACTATE_n_dew2019_identifier():
    result = <bytes> LACTATE_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_LACTATE_n_dew2019_name():
    result = <bytes> LACTATE_n_dew2019_name()
    return result.decode('UTF-8')
def cy_LACTATE_n_dew2019_formula():
    result = <bytes> LACTATE_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_LACTATE_n_dew2019_mw():
    result = LACTATE_n_dew2019_mw()
    return result
def cy_LACTATE_n_dew2019_elements():
    cdef const double *e = LACTATE_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_LACTATE_n_dew2019_g(double t, double p):
    result = LACTATE_n_dew2019_g(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_dgdt(double t, double p):
    result = LACTATE_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_dgdp(double t, double p):
    result = LACTATE_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_d2gdt2(double t, double p):
    result = LACTATE_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_d2gdtdp(double t, double p):
    result = LACTATE_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_d2gdp2(double t, double p):
    result = LACTATE_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_d3gdt3(double t, double p):
    result = LACTATE_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_d3gdt2dp(double t, double p):
    result = LACTATE_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_d3gdtdp2(double t, double p):
    result = LACTATE_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_d3gdp3(double t, double p):
    result = LACTATE_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_s(double t, double p):
    result = LACTATE_n_dew2019_s(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_v(double t, double p):
    result = LACTATE_n_dew2019_v(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_cv(double t, double p):
    result = LACTATE_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_cp(double t, double p):
    result = LACTATE_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_dcpdt(double t, double p):
    result = LACTATE_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_alpha(double t, double p):
    result = LACTATE_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_beta(double t, double p):
    result = LACTATE_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_K(double t, double p):
    result = LACTATE_n_dew2019_K(<double> t, <double> p)
    return result
def cy_LACTATE_n_dew2019_Kp(double t, double p):
    result = LACTATE_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "LA_p3_dew2019_calc.h":
    const char *LA_p3_dew2019_identifier();
    const char *LA_p3_dew2019_name();
    const char *LA_p3_dew2019_formula();
    const double LA_p3_dew2019_mw();
    const double *LA_p3_dew2019_elements();
    double LA_p3_dew2019_g(double t, double p)
    double LA_p3_dew2019_dgdt(double t, double p)
    double LA_p3_dew2019_dgdp(double t, double p)
    double LA_p3_dew2019_d2gdt2(double t, double p)
    double LA_p3_dew2019_d2gdtdp(double t, double p)
    double LA_p3_dew2019_d2gdp2(double t, double p)
    double LA_p3_dew2019_d3gdt3(double t, double p)
    double LA_p3_dew2019_d3gdt2dp(double t, double p)
    double LA_p3_dew2019_d3gdtdp2(double t, double p)
    double LA_p3_dew2019_d3gdp3(double t, double p)
    double LA_p3_dew2019_s(double t, double p)
    double LA_p3_dew2019_v(double t, double p)
    double LA_p3_dew2019_cv(double t, double p)
    double LA_p3_dew2019_cp(double t, double p)
    double LA_p3_dew2019_dcpdt(double t, double p)
    double LA_p3_dew2019_alpha(double t, double p)
    double LA_p3_dew2019_beta(double t, double p)
    double LA_p3_dew2019_K(double t, double p)
    double LA_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_LA_p3_dew2019_identifier():
    result = <bytes> LA_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_LA_p3_dew2019_name():
    result = <bytes> LA_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_LA_p3_dew2019_formula():
    result = <bytes> LA_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_LA_p3_dew2019_mw():
    result = LA_p3_dew2019_mw()
    return result
def cy_LA_p3_dew2019_elements():
    cdef const double *e = LA_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_LA_p3_dew2019_g(double t, double p):
    result = LA_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_dgdt(double t, double p):
    result = LA_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_dgdp(double t, double p):
    result = LA_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_d2gdt2(double t, double p):
    result = LA_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_d2gdtdp(double t, double p):
    result = LA_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_d2gdp2(double t, double p):
    result = LA_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_d3gdt3(double t, double p):
    result = LA_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_d3gdt2dp(double t, double p):
    result = LA_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_d3gdtdp2(double t, double p):
    result = LA_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_d3gdp3(double t, double p):
    result = LA_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_s(double t, double p):
    result = LA_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_v(double t, double p):
    result = LA_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_cv(double t, double p):
    result = LA_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_cp(double t, double p):
    result = LA_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_dcpdt(double t, double p):
    result = LA_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_alpha(double t, double p):
    result = LA_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_beta(double t, double p):
    result = LA_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_K(double t, double p):
    result = LA_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_LA_p3_dew2019_Kp(double t, double p):
    result = LA_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "KSO4_n_dew2019_calc.h":
    const char *KSO4_n_dew2019_identifier();
    const char *KSO4_n_dew2019_name();
    const char *KSO4_n_dew2019_formula();
    const double KSO4_n_dew2019_mw();
    const double *KSO4_n_dew2019_elements();
    double KSO4_n_dew2019_g(double t, double p)
    double KSO4_n_dew2019_dgdt(double t, double p)
    double KSO4_n_dew2019_dgdp(double t, double p)
    double KSO4_n_dew2019_d2gdt2(double t, double p)
    double KSO4_n_dew2019_d2gdtdp(double t, double p)
    double KSO4_n_dew2019_d2gdp2(double t, double p)
    double KSO4_n_dew2019_d3gdt3(double t, double p)
    double KSO4_n_dew2019_d3gdt2dp(double t, double p)
    double KSO4_n_dew2019_d3gdtdp2(double t, double p)
    double KSO4_n_dew2019_d3gdp3(double t, double p)
    double KSO4_n_dew2019_s(double t, double p)
    double KSO4_n_dew2019_v(double t, double p)
    double KSO4_n_dew2019_cv(double t, double p)
    double KSO4_n_dew2019_cp(double t, double p)
    double KSO4_n_dew2019_dcpdt(double t, double p)
    double KSO4_n_dew2019_alpha(double t, double p)
    double KSO4_n_dew2019_beta(double t, double p)
    double KSO4_n_dew2019_K(double t, double p)
    double KSO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_KSO4_n_dew2019_identifier():
    result = <bytes> KSO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_KSO4_n_dew2019_name():
    result = <bytes> KSO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_KSO4_n_dew2019_formula():
    result = <bytes> KSO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_KSO4_n_dew2019_mw():
    result = KSO4_n_dew2019_mw()
    return result
def cy_KSO4_n_dew2019_elements():
    cdef const double *e = KSO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_KSO4_n_dew2019_g(double t, double p):
    result = KSO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_dgdt(double t, double p):
    result = KSO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_dgdp(double t, double p):
    result = KSO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_d2gdt2(double t, double p):
    result = KSO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_d2gdtdp(double t, double p):
    result = KSO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_d2gdp2(double t, double p):
    result = KSO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_d3gdt3(double t, double p):
    result = KSO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_d3gdt2dp(double t, double p):
    result = KSO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_d3gdtdp2(double t, double p):
    result = KSO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_d3gdp3(double t, double p):
    result = KSO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_s(double t, double p):
    result = KSO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_v(double t, double p):
    result = KSO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_cv(double t, double p):
    result = KSO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_cp(double t, double p):
    result = KSO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_dcpdt(double t, double p):
    result = KSO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_alpha(double t, double p):
    result = KSO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_beta(double t, double p):
    result = KSO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_K(double t, double p):
    result = KSO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_KSO4_n_dew2019_Kp(double t, double p):
    result = KSO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "KR_l_AQ_r__dew2019_calc.h":
    const char *KR_l_AQ_r__dew2019_identifier();
    const char *KR_l_AQ_r__dew2019_name();
    const char *KR_l_AQ_r__dew2019_formula();
    const double KR_l_AQ_r__dew2019_mw();
    const double *KR_l_AQ_r__dew2019_elements();
    double KR_l_AQ_r__dew2019_g(double t, double p)
    double KR_l_AQ_r__dew2019_dgdt(double t, double p)
    double KR_l_AQ_r__dew2019_dgdp(double t, double p)
    double KR_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double KR_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double KR_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double KR_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double KR_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double KR_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double KR_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double KR_l_AQ_r__dew2019_s(double t, double p)
    double KR_l_AQ_r__dew2019_v(double t, double p)
    double KR_l_AQ_r__dew2019_cv(double t, double p)
    double KR_l_AQ_r__dew2019_cp(double t, double p)
    double KR_l_AQ_r__dew2019_dcpdt(double t, double p)
    double KR_l_AQ_r__dew2019_alpha(double t, double p)
    double KR_l_AQ_r__dew2019_beta(double t, double p)
    double KR_l_AQ_r__dew2019_K(double t, double p)
    double KR_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_KR_l_AQ_r__dew2019_identifier():
    result = <bytes> KR_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_KR_l_AQ_r__dew2019_name():
    result = <bytes> KR_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_KR_l_AQ_r__dew2019_formula():
    result = <bytes> KR_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_KR_l_AQ_r__dew2019_mw():
    result = KR_l_AQ_r__dew2019_mw()
    return result
def cy_KR_l_AQ_r__dew2019_elements():
    cdef const double *e = KR_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_KR_l_AQ_r__dew2019_g(double t, double p):
    result = KR_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_dgdt(double t, double p):
    result = KR_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_dgdp(double t, double p):
    result = KR_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = KR_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = KR_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = KR_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = KR_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = KR_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = KR_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = KR_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_s(double t, double p):
    result = KR_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_v(double t, double p):
    result = KR_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_cv(double t, double p):
    result = KR_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_cp(double t, double p):
    result = KR_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = KR_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_alpha(double t, double p):
    result = KR_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_beta(double t, double p):
    result = KR_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_K(double t, double p):
    result = KR_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_KR_l_AQ_r__dew2019_Kp(double t, double p):
    result = KR_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "KOH_l_AQ_r__dew2019_calc.h":
    const char *KOH_l_AQ_r__dew2019_identifier();
    const char *KOH_l_AQ_r__dew2019_name();
    const char *KOH_l_AQ_r__dew2019_formula();
    const double KOH_l_AQ_r__dew2019_mw();
    const double *KOH_l_AQ_r__dew2019_elements();
    double KOH_l_AQ_r__dew2019_g(double t, double p)
    double KOH_l_AQ_r__dew2019_dgdt(double t, double p)
    double KOH_l_AQ_r__dew2019_dgdp(double t, double p)
    double KOH_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double KOH_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double KOH_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double KOH_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double KOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double KOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double KOH_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double KOH_l_AQ_r__dew2019_s(double t, double p)
    double KOH_l_AQ_r__dew2019_v(double t, double p)
    double KOH_l_AQ_r__dew2019_cv(double t, double p)
    double KOH_l_AQ_r__dew2019_cp(double t, double p)
    double KOH_l_AQ_r__dew2019_dcpdt(double t, double p)
    double KOH_l_AQ_r__dew2019_alpha(double t, double p)
    double KOH_l_AQ_r__dew2019_beta(double t, double p)
    double KOH_l_AQ_r__dew2019_K(double t, double p)
    double KOH_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_KOH_l_AQ_r__dew2019_identifier():
    result = <bytes> KOH_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_KOH_l_AQ_r__dew2019_name():
    result = <bytes> KOH_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_KOH_l_AQ_r__dew2019_formula():
    result = <bytes> KOH_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_KOH_l_AQ_r__dew2019_mw():
    result = KOH_l_AQ_r__dew2019_mw()
    return result
def cy_KOH_l_AQ_r__dew2019_elements():
    cdef const double *e = KOH_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_KOH_l_AQ_r__dew2019_g(double t, double p):
    result = KOH_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_dgdt(double t, double p):
    result = KOH_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_dgdp(double t, double p):
    result = KOH_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = KOH_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = KOH_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = KOH_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = KOH_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = KOH_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = KOH_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = KOH_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_s(double t, double p):
    result = KOH_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_v(double t, double p):
    result = KOH_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_cv(double t, double p):
    result = KOH_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_cp(double t, double p):
    result = KOH_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = KOH_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_alpha(double t, double p):
    result = KOH_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_beta(double t, double p):
    result = KOH_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_K(double t, double p):
    result = KOH_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_KOH_l_AQ_r__dew2019_Kp(double t, double p):
    result = KOH_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "KCL_l_AQ_r__dew2019_calc.h":
    const char *KCL_l_AQ_r__dew2019_identifier();
    const char *KCL_l_AQ_r__dew2019_name();
    const char *KCL_l_AQ_r__dew2019_formula();
    const double KCL_l_AQ_r__dew2019_mw();
    const double *KCL_l_AQ_r__dew2019_elements();
    double KCL_l_AQ_r__dew2019_g(double t, double p)
    double KCL_l_AQ_r__dew2019_dgdt(double t, double p)
    double KCL_l_AQ_r__dew2019_dgdp(double t, double p)
    double KCL_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double KCL_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double KCL_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double KCL_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double KCL_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double KCL_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double KCL_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double KCL_l_AQ_r__dew2019_s(double t, double p)
    double KCL_l_AQ_r__dew2019_v(double t, double p)
    double KCL_l_AQ_r__dew2019_cv(double t, double p)
    double KCL_l_AQ_r__dew2019_cp(double t, double p)
    double KCL_l_AQ_r__dew2019_dcpdt(double t, double p)
    double KCL_l_AQ_r__dew2019_alpha(double t, double p)
    double KCL_l_AQ_r__dew2019_beta(double t, double p)
    double KCL_l_AQ_r__dew2019_K(double t, double p)
    double KCL_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_KCL_l_AQ_r__dew2019_identifier():
    result = <bytes> KCL_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_KCL_l_AQ_r__dew2019_name():
    result = <bytes> KCL_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_KCL_l_AQ_r__dew2019_formula():
    result = <bytes> KCL_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_KCL_l_AQ_r__dew2019_mw():
    result = KCL_l_AQ_r__dew2019_mw()
    return result
def cy_KCL_l_AQ_r__dew2019_elements():
    cdef const double *e = KCL_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_KCL_l_AQ_r__dew2019_g(double t, double p):
    result = KCL_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_dgdt(double t, double p):
    result = KCL_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_dgdp(double t, double p):
    result = KCL_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = KCL_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = KCL_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = KCL_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = KCL_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = KCL_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = KCL_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = KCL_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_s(double t, double p):
    result = KCL_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_v(double t, double p):
    result = KCL_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_cv(double t, double p):
    result = KCL_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_cp(double t, double p):
    result = KCL_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = KCL_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_alpha(double t, double p):
    result = KCL_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_beta(double t, double p):
    result = KCL_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_K(double t, double p):
    result = KCL_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_KCL_l_AQ_r__dew2019_Kp(double t, double p):
    result = KCL_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "K_p_dew2019_calc.h":
    const char *K_p_dew2019_identifier();
    const char *K_p_dew2019_name();
    const char *K_p_dew2019_formula();
    const double K_p_dew2019_mw();
    const double *K_p_dew2019_elements();
    double K_p_dew2019_g(double t, double p)
    double K_p_dew2019_dgdt(double t, double p)
    double K_p_dew2019_dgdp(double t, double p)
    double K_p_dew2019_d2gdt2(double t, double p)
    double K_p_dew2019_d2gdtdp(double t, double p)
    double K_p_dew2019_d2gdp2(double t, double p)
    double K_p_dew2019_d3gdt3(double t, double p)
    double K_p_dew2019_d3gdt2dp(double t, double p)
    double K_p_dew2019_d3gdtdp2(double t, double p)
    double K_p_dew2019_d3gdp3(double t, double p)
    double K_p_dew2019_s(double t, double p)
    double K_p_dew2019_v(double t, double p)
    double K_p_dew2019_cv(double t, double p)
    double K_p_dew2019_cp(double t, double p)
    double K_p_dew2019_dcpdt(double t, double p)
    double K_p_dew2019_alpha(double t, double p)
    double K_p_dew2019_beta(double t, double p)
    double K_p_dew2019_K(double t, double p)
    double K_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_K_p_dew2019_identifier():
    result = <bytes> K_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_K_p_dew2019_name():
    result = <bytes> K_p_dew2019_name()
    return result.decode('UTF-8')
def cy_K_p_dew2019_formula():
    result = <bytes> K_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_K_p_dew2019_mw():
    result = K_p_dew2019_mw()
    return result
def cy_K_p_dew2019_elements():
    cdef const double *e = K_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_K_p_dew2019_g(double t, double p):
    result = K_p_dew2019_g(<double> t, <double> p)
    return result
def cy_K_p_dew2019_dgdt(double t, double p):
    result = K_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_K_p_dew2019_dgdp(double t, double p):
    result = K_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_K_p_dew2019_d2gdt2(double t, double p):
    result = K_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_K_p_dew2019_d2gdtdp(double t, double p):
    result = K_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_K_p_dew2019_d2gdp2(double t, double p):
    result = K_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_K_p_dew2019_d3gdt3(double t, double p):
    result = K_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_K_p_dew2019_d3gdt2dp(double t, double p):
    result = K_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_K_p_dew2019_d3gdtdp2(double t, double p):
    result = K_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_K_p_dew2019_d3gdp3(double t, double p):
    result = K_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_K_p_dew2019_s(double t, double p):
    result = K_p_dew2019_s(<double> t, <double> p)
    return result
def cy_K_p_dew2019_v(double t, double p):
    result = K_p_dew2019_v(<double> t, <double> p)
    return result
def cy_K_p_dew2019_cv(double t, double p):
    result = K_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_K_p_dew2019_cp(double t, double p):
    result = K_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_K_p_dew2019_dcpdt(double t, double p):
    result = K_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_K_p_dew2019_alpha(double t, double p):
    result = K_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_K_p_dew2019_beta(double t, double p):
    result = K_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_K_p_dew2019_K(double t, double p):
    result = K_p_dew2019_K(<double> t, <double> p)
    return result
def cy_K_p_dew2019_Kp(double t, double p):
    result = K_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ISOBUTANE_l_AQ_r__dew2019_calc.h":
    const char *ISOBUTANE_l_AQ_r__dew2019_identifier();
    const char *ISOBUTANE_l_AQ_r__dew2019_name();
    const char *ISOBUTANE_l_AQ_r__dew2019_formula();
    const double ISOBUTANE_l_AQ_r__dew2019_mw();
    const double *ISOBUTANE_l_AQ_r__dew2019_elements();
    double ISOBUTANE_l_AQ_r__dew2019_g(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_dgdt(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_dgdp(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_s(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_v(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_cv(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_cp(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_alpha(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_beta(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_K(double t, double p)
    double ISOBUTANE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ISOBUTANE_l_AQ_r__dew2019_identifier():
    result = <bytes> ISOBUTANE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_ISOBUTANE_l_AQ_r__dew2019_name():
    result = <bytes> ISOBUTANE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_ISOBUTANE_l_AQ_r__dew2019_formula():
    result = <bytes> ISOBUTANE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_ISOBUTANE_l_AQ_r__dew2019_mw():
    result = ISOBUTANE_l_AQ_r__dew2019_mw()
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_elements():
    cdef const double *e = ISOBUTANE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ISOBUTANE_l_AQ_r__dew2019_g(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_s(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_v(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_cv(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_cp(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_alpha(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_beta(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_K(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_ISOBUTANE_l_AQ_r__dew2019_Kp(double t, double p):
    result = ISOBUTANE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "IN_p3_dew2019_calc.h":
    const char *IN_p3_dew2019_identifier();
    const char *IN_p3_dew2019_name();
    const char *IN_p3_dew2019_formula();
    const double IN_p3_dew2019_mw();
    const double *IN_p3_dew2019_elements();
    double IN_p3_dew2019_g(double t, double p)
    double IN_p3_dew2019_dgdt(double t, double p)
    double IN_p3_dew2019_dgdp(double t, double p)
    double IN_p3_dew2019_d2gdt2(double t, double p)
    double IN_p3_dew2019_d2gdtdp(double t, double p)
    double IN_p3_dew2019_d2gdp2(double t, double p)
    double IN_p3_dew2019_d3gdt3(double t, double p)
    double IN_p3_dew2019_d3gdt2dp(double t, double p)
    double IN_p3_dew2019_d3gdtdp2(double t, double p)
    double IN_p3_dew2019_d3gdp3(double t, double p)
    double IN_p3_dew2019_s(double t, double p)
    double IN_p3_dew2019_v(double t, double p)
    double IN_p3_dew2019_cv(double t, double p)
    double IN_p3_dew2019_cp(double t, double p)
    double IN_p3_dew2019_dcpdt(double t, double p)
    double IN_p3_dew2019_alpha(double t, double p)
    double IN_p3_dew2019_beta(double t, double p)
    double IN_p3_dew2019_K(double t, double p)
    double IN_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_IN_p3_dew2019_identifier():
    result = <bytes> IN_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_IN_p3_dew2019_name():
    result = <bytes> IN_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_IN_p3_dew2019_formula():
    result = <bytes> IN_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_IN_p3_dew2019_mw():
    result = IN_p3_dew2019_mw()
    return result
def cy_IN_p3_dew2019_elements():
    cdef const double *e = IN_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_IN_p3_dew2019_g(double t, double p):
    result = IN_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_dgdt(double t, double p):
    result = IN_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_dgdp(double t, double p):
    result = IN_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_d2gdt2(double t, double p):
    result = IN_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_d2gdtdp(double t, double p):
    result = IN_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_d2gdp2(double t, double p):
    result = IN_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_d3gdt3(double t, double p):
    result = IN_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_d3gdt2dp(double t, double p):
    result = IN_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_d3gdtdp2(double t, double p):
    result = IN_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_d3gdp3(double t, double p):
    result = IN_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_s(double t, double p):
    result = IN_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_v(double t, double p):
    result = IN_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_cv(double t, double p):
    result = IN_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_cp(double t, double p):
    result = IN_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_dcpdt(double t, double p):
    result = IN_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_alpha(double t, double p):
    result = IN_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_beta(double t, double p):
    result = IN_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_K(double t, double p):
    result = IN_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_IN_p3_dew2019_Kp(double t, double p):
    result = IN_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "I_n_dew2019_calc.h":
    const char *I_n_dew2019_identifier();
    const char *I_n_dew2019_name();
    const char *I_n_dew2019_formula();
    const double I_n_dew2019_mw();
    const double *I_n_dew2019_elements();
    double I_n_dew2019_g(double t, double p)
    double I_n_dew2019_dgdt(double t, double p)
    double I_n_dew2019_dgdp(double t, double p)
    double I_n_dew2019_d2gdt2(double t, double p)
    double I_n_dew2019_d2gdtdp(double t, double p)
    double I_n_dew2019_d2gdp2(double t, double p)
    double I_n_dew2019_d3gdt3(double t, double p)
    double I_n_dew2019_d3gdt2dp(double t, double p)
    double I_n_dew2019_d3gdtdp2(double t, double p)
    double I_n_dew2019_d3gdp3(double t, double p)
    double I_n_dew2019_s(double t, double p)
    double I_n_dew2019_v(double t, double p)
    double I_n_dew2019_cv(double t, double p)
    double I_n_dew2019_cp(double t, double p)
    double I_n_dew2019_dcpdt(double t, double p)
    double I_n_dew2019_alpha(double t, double p)
    double I_n_dew2019_beta(double t, double p)
    double I_n_dew2019_K(double t, double p)
    double I_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_I_n_dew2019_identifier():
    result = <bytes> I_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_I_n_dew2019_name():
    result = <bytes> I_n_dew2019_name()
    return result.decode('UTF-8')
def cy_I_n_dew2019_formula():
    result = <bytes> I_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_I_n_dew2019_mw():
    result = I_n_dew2019_mw()
    return result
def cy_I_n_dew2019_elements():
    cdef const double *e = I_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_I_n_dew2019_g(double t, double p):
    result = I_n_dew2019_g(<double> t, <double> p)
    return result
def cy_I_n_dew2019_dgdt(double t, double p):
    result = I_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_I_n_dew2019_dgdp(double t, double p):
    result = I_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_I_n_dew2019_d2gdt2(double t, double p):
    result = I_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_I_n_dew2019_d2gdtdp(double t, double p):
    result = I_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_I_n_dew2019_d2gdp2(double t, double p):
    result = I_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_I_n_dew2019_d3gdt3(double t, double p):
    result = I_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_I_n_dew2019_d3gdt2dp(double t, double p):
    result = I_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_I_n_dew2019_d3gdtdp2(double t, double p):
    result = I_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_I_n_dew2019_d3gdp3(double t, double p):
    result = I_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_I_n_dew2019_s(double t, double p):
    result = I_n_dew2019_s(<double> t, <double> p)
    return result
def cy_I_n_dew2019_v(double t, double p):
    result = I_n_dew2019_v(<double> t, <double> p)
    return result
def cy_I_n_dew2019_cv(double t, double p):
    result = I_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_I_n_dew2019_cp(double t, double p):
    result = I_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_I_n_dew2019_dcpdt(double t, double p):
    result = I_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_I_n_dew2019_alpha(double t, double p):
    result = I_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_I_n_dew2019_beta(double t, double p):
    result = I_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_I_n_dew2019_K(double t, double p):
    result = I_n_dew2019_K(<double> t, <double> p)
    return result
def cy_I_n_dew2019_Kp(double t, double p):
    result = I_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HVO4_n2_dew2019_calc.h":
    const char *HVO4_n2_dew2019_identifier();
    const char *HVO4_n2_dew2019_name();
    const char *HVO4_n2_dew2019_formula();
    const double HVO4_n2_dew2019_mw();
    const double *HVO4_n2_dew2019_elements();
    double HVO4_n2_dew2019_g(double t, double p)
    double HVO4_n2_dew2019_dgdt(double t, double p)
    double HVO4_n2_dew2019_dgdp(double t, double p)
    double HVO4_n2_dew2019_d2gdt2(double t, double p)
    double HVO4_n2_dew2019_d2gdtdp(double t, double p)
    double HVO4_n2_dew2019_d2gdp2(double t, double p)
    double HVO4_n2_dew2019_d3gdt3(double t, double p)
    double HVO4_n2_dew2019_d3gdt2dp(double t, double p)
    double HVO4_n2_dew2019_d3gdtdp2(double t, double p)
    double HVO4_n2_dew2019_d3gdp3(double t, double p)
    double HVO4_n2_dew2019_s(double t, double p)
    double HVO4_n2_dew2019_v(double t, double p)
    double HVO4_n2_dew2019_cv(double t, double p)
    double HVO4_n2_dew2019_cp(double t, double p)
    double HVO4_n2_dew2019_dcpdt(double t, double p)
    double HVO4_n2_dew2019_alpha(double t, double p)
    double HVO4_n2_dew2019_beta(double t, double p)
    double HVO4_n2_dew2019_K(double t, double p)
    double HVO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HVO4_n2_dew2019_identifier():
    result = <bytes> HVO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HVO4_n2_dew2019_name():
    result = <bytes> HVO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_HVO4_n2_dew2019_formula():
    result = <bytes> HVO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_HVO4_n2_dew2019_mw():
    result = HVO4_n2_dew2019_mw()
    return result
def cy_HVO4_n2_dew2019_elements():
    cdef const double *e = HVO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HVO4_n2_dew2019_g(double t, double p):
    result = HVO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_dgdt(double t, double p):
    result = HVO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_dgdp(double t, double p):
    result = HVO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_d2gdt2(double t, double p):
    result = HVO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_d2gdtdp(double t, double p):
    result = HVO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_d2gdp2(double t, double p):
    result = HVO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_d3gdt3(double t, double p):
    result = HVO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = HVO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = HVO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_d3gdp3(double t, double p):
    result = HVO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_s(double t, double p):
    result = HVO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_v(double t, double p):
    result = HVO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_cv(double t, double p):
    result = HVO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_cp(double t, double p):
    result = HVO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_dcpdt(double t, double p):
    result = HVO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_alpha(double t, double p):
    result = HVO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_beta(double t, double p):
    result = HVO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_K(double t, double p):
    result = HVO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_HVO4_n2_dew2019_Kp(double t, double p):
    result = HVO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HSO5_n_dew2019_calc.h":
    const char *HSO5_n_dew2019_identifier();
    const char *HSO5_n_dew2019_name();
    const char *HSO5_n_dew2019_formula();
    const double HSO5_n_dew2019_mw();
    const double *HSO5_n_dew2019_elements();
    double HSO5_n_dew2019_g(double t, double p)
    double HSO5_n_dew2019_dgdt(double t, double p)
    double HSO5_n_dew2019_dgdp(double t, double p)
    double HSO5_n_dew2019_d2gdt2(double t, double p)
    double HSO5_n_dew2019_d2gdtdp(double t, double p)
    double HSO5_n_dew2019_d2gdp2(double t, double p)
    double HSO5_n_dew2019_d3gdt3(double t, double p)
    double HSO5_n_dew2019_d3gdt2dp(double t, double p)
    double HSO5_n_dew2019_d3gdtdp2(double t, double p)
    double HSO5_n_dew2019_d3gdp3(double t, double p)
    double HSO5_n_dew2019_s(double t, double p)
    double HSO5_n_dew2019_v(double t, double p)
    double HSO5_n_dew2019_cv(double t, double p)
    double HSO5_n_dew2019_cp(double t, double p)
    double HSO5_n_dew2019_dcpdt(double t, double p)
    double HSO5_n_dew2019_alpha(double t, double p)
    double HSO5_n_dew2019_beta(double t, double p)
    double HSO5_n_dew2019_K(double t, double p)
    double HSO5_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HSO5_n_dew2019_identifier():
    result = <bytes> HSO5_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HSO5_n_dew2019_name():
    result = <bytes> HSO5_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HSO5_n_dew2019_formula():
    result = <bytes> HSO5_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HSO5_n_dew2019_mw():
    result = HSO5_n_dew2019_mw()
    return result
def cy_HSO5_n_dew2019_elements():
    cdef const double *e = HSO5_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HSO5_n_dew2019_g(double t, double p):
    result = HSO5_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_dgdt(double t, double p):
    result = HSO5_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_dgdp(double t, double p):
    result = HSO5_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_d2gdt2(double t, double p):
    result = HSO5_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_d2gdtdp(double t, double p):
    result = HSO5_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_d2gdp2(double t, double p):
    result = HSO5_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_d3gdt3(double t, double p):
    result = HSO5_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_d3gdt2dp(double t, double p):
    result = HSO5_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_d3gdtdp2(double t, double p):
    result = HSO5_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_d3gdp3(double t, double p):
    result = HSO5_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_s(double t, double p):
    result = HSO5_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_v(double t, double p):
    result = HSO5_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_cv(double t, double p):
    result = HSO5_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_cp(double t, double p):
    result = HSO5_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_dcpdt(double t, double p):
    result = HSO5_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_alpha(double t, double p):
    result = HSO5_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_beta(double t, double p):
    result = HSO5_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_K(double t, double p):
    result = HSO5_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HSO5_n_dew2019_Kp(double t, double p):
    result = HSO5_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HSO4_n_dew2019_calc.h":
    const char *HSO4_n_dew2019_identifier();
    const char *HSO4_n_dew2019_name();
    const char *HSO4_n_dew2019_formula();
    const double HSO4_n_dew2019_mw();
    const double *HSO4_n_dew2019_elements();
    double HSO4_n_dew2019_g(double t, double p)
    double HSO4_n_dew2019_dgdt(double t, double p)
    double HSO4_n_dew2019_dgdp(double t, double p)
    double HSO4_n_dew2019_d2gdt2(double t, double p)
    double HSO4_n_dew2019_d2gdtdp(double t, double p)
    double HSO4_n_dew2019_d2gdp2(double t, double p)
    double HSO4_n_dew2019_d3gdt3(double t, double p)
    double HSO4_n_dew2019_d3gdt2dp(double t, double p)
    double HSO4_n_dew2019_d3gdtdp2(double t, double p)
    double HSO4_n_dew2019_d3gdp3(double t, double p)
    double HSO4_n_dew2019_s(double t, double p)
    double HSO4_n_dew2019_v(double t, double p)
    double HSO4_n_dew2019_cv(double t, double p)
    double HSO4_n_dew2019_cp(double t, double p)
    double HSO4_n_dew2019_dcpdt(double t, double p)
    double HSO4_n_dew2019_alpha(double t, double p)
    double HSO4_n_dew2019_beta(double t, double p)
    double HSO4_n_dew2019_K(double t, double p)
    double HSO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HSO4_n_dew2019_identifier():
    result = <bytes> HSO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HSO4_n_dew2019_name():
    result = <bytes> HSO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HSO4_n_dew2019_formula():
    result = <bytes> HSO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HSO4_n_dew2019_mw():
    result = HSO4_n_dew2019_mw()
    return result
def cy_HSO4_n_dew2019_elements():
    cdef const double *e = HSO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HSO4_n_dew2019_g(double t, double p):
    result = HSO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_dgdt(double t, double p):
    result = HSO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_dgdp(double t, double p):
    result = HSO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_d2gdt2(double t, double p):
    result = HSO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_d2gdtdp(double t, double p):
    result = HSO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_d2gdp2(double t, double p):
    result = HSO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_d3gdt3(double t, double p):
    result = HSO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_d3gdt2dp(double t, double p):
    result = HSO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_d3gdtdp2(double t, double p):
    result = HSO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_d3gdp3(double t, double p):
    result = HSO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_s(double t, double p):
    result = HSO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_v(double t, double p):
    result = HSO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_cv(double t, double p):
    result = HSO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_cp(double t, double p):
    result = HSO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_dcpdt(double t, double p):
    result = HSO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_alpha(double t, double p):
    result = HSO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_beta(double t, double p):
    result = HSO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_K(double t, double p):
    result = HSO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HSO4_n_dew2019_Kp(double t, double p):
    result = HSO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HSO3_n_dew2019_calc.h":
    const char *HSO3_n_dew2019_identifier();
    const char *HSO3_n_dew2019_name();
    const char *HSO3_n_dew2019_formula();
    const double HSO3_n_dew2019_mw();
    const double *HSO3_n_dew2019_elements();
    double HSO3_n_dew2019_g(double t, double p)
    double HSO3_n_dew2019_dgdt(double t, double p)
    double HSO3_n_dew2019_dgdp(double t, double p)
    double HSO3_n_dew2019_d2gdt2(double t, double p)
    double HSO3_n_dew2019_d2gdtdp(double t, double p)
    double HSO3_n_dew2019_d2gdp2(double t, double p)
    double HSO3_n_dew2019_d3gdt3(double t, double p)
    double HSO3_n_dew2019_d3gdt2dp(double t, double p)
    double HSO3_n_dew2019_d3gdtdp2(double t, double p)
    double HSO3_n_dew2019_d3gdp3(double t, double p)
    double HSO3_n_dew2019_s(double t, double p)
    double HSO3_n_dew2019_v(double t, double p)
    double HSO3_n_dew2019_cv(double t, double p)
    double HSO3_n_dew2019_cp(double t, double p)
    double HSO3_n_dew2019_dcpdt(double t, double p)
    double HSO3_n_dew2019_alpha(double t, double p)
    double HSO3_n_dew2019_beta(double t, double p)
    double HSO3_n_dew2019_K(double t, double p)
    double HSO3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HSO3_n_dew2019_identifier():
    result = <bytes> HSO3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HSO3_n_dew2019_name():
    result = <bytes> HSO3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HSO3_n_dew2019_formula():
    result = <bytes> HSO3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HSO3_n_dew2019_mw():
    result = HSO3_n_dew2019_mw()
    return result
def cy_HSO3_n_dew2019_elements():
    cdef const double *e = HSO3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HSO3_n_dew2019_g(double t, double p):
    result = HSO3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_dgdt(double t, double p):
    result = HSO3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_dgdp(double t, double p):
    result = HSO3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_d2gdt2(double t, double p):
    result = HSO3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_d2gdtdp(double t, double p):
    result = HSO3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_d2gdp2(double t, double p):
    result = HSO3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_d3gdt3(double t, double p):
    result = HSO3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_d3gdt2dp(double t, double p):
    result = HSO3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_d3gdtdp2(double t, double p):
    result = HSO3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_d3gdp3(double t, double p):
    result = HSO3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_s(double t, double p):
    result = HSO3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_v(double t, double p):
    result = HSO3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_cv(double t, double p):
    result = HSO3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_cp(double t, double p):
    result = HSO3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_dcpdt(double t, double p):
    result = HSO3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_alpha(double t, double p):
    result = HSO3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_beta(double t, double p):
    result = HSO3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_K(double t, double p):
    result = HSO3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HSO3_n_dew2019_Kp(double t, double p):
    result = HSO3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H3SIO4_n_dew2019_calc.h":
    const char *H3SIO4_n_dew2019_identifier();
    const char *H3SIO4_n_dew2019_name();
    const char *H3SIO4_n_dew2019_formula();
    const double H3SIO4_n_dew2019_mw();
    const double *H3SIO4_n_dew2019_elements();
    double H3SIO4_n_dew2019_g(double t, double p)
    double H3SIO4_n_dew2019_dgdt(double t, double p)
    double H3SIO4_n_dew2019_dgdp(double t, double p)
    double H3SIO4_n_dew2019_d2gdt2(double t, double p)
    double H3SIO4_n_dew2019_d2gdtdp(double t, double p)
    double H3SIO4_n_dew2019_d2gdp2(double t, double p)
    double H3SIO4_n_dew2019_d3gdt3(double t, double p)
    double H3SIO4_n_dew2019_d3gdt2dp(double t, double p)
    double H3SIO4_n_dew2019_d3gdtdp2(double t, double p)
    double H3SIO4_n_dew2019_d3gdp3(double t, double p)
    double H3SIO4_n_dew2019_s(double t, double p)
    double H3SIO4_n_dew2019_v(double t, double p)
    double H3SIO4_n_dew2019_cv(double t, double p)
    double H3SIO4_n_dew2019_cp(double t, double p)
    double H3SIO4_n_dew2019_dcpdt(double t, double p)
    double H3SIO4_n_dew2019_alpha(double t, double p)
    double H3SIO4_n_dew2019_beta(double t, double p)
    double H3SIO4_n_dew2019_K(double t, double p)
    double H3SIO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H3SIO4_n_dew2019_identifier():
    result = <bytes> H3SIO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_H3SIO4_n_dew2019_name():
    result = <bytes> H3SIO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_H3SIO4_n_dew2019_formula():
    result = <bytes> H3SIO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_H3SIO4_n_dew2019_mw():
    result = H3SIO4_n_dew2019_mw()
    return result
def cy_H3SIO4_n_dew2019_elements():
    cdef const double *e = H3SIO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H3SIO4_n_dew2019_g(double t, double p):
    result = H3SIO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_dgdt(double t, double p):
    result = H3SIO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_dgdp(double t, double p):
    result = H3SIO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_d2gdt2(double t, double p):
    result = H3SIO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_d2gdtdp(double t, double p):
    result = H3SIO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_d2gdp2(double t, double p):
    result = H3SIO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_d3gdt3(double t, double p):
    result = H3SIO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_d3gdt2dp(double t, double p):
    result = H3SIO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_d3gdtdp2(double t, double p):
    result = H3SIO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_d3gdp3(double t, double p):
    result = H3SIO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_s(double t, double p):
    result = H3SIO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_v(double t, double p):
    result = H3SIO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_cv(double t, double p):
    result = H3SIO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_cp(double t, double p):
    result = H3SIO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_dcpdt(double t, double p):
    result = H3SIO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_alpha(double t, double p):
    result = H3SIO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_beta(double t, double p):
    result = H3SIO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_K(double t, double p):
    result = H3SIO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_H3SIO4_n_dew2019_Kp(double t, double p):
    result = H3SIO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HSEO4_n_dew2019_calc.h":
    const char *HSEO4_n_dew2019_identifier();
    const char *HSEO4_n_dew2019_name();
    const char *HSEO4_n_dew2019_formula();
    const double HSEO4_n_dew2019_mw();
    const double *HSEO4_n_dew2019_elements();
    double HSEO4_n_dew2019_g(double t, double p)
    double HSEO4_n_dew2019_dgdt(double t, double p)
    double HSEO4_n_dew2019_dgdp(double t, double p)
    double HSEO4_n_dew2019_d2gdt2(double t, double p)
    double HSEO4_n_dew2019_d2gdtdp(double t, double p)
    double HSEO4_n_dew2019_d2gdp2(double t, double p)
    double HSEO4_n_dew2019_d3gdt3(double t, double p)
    double HSEO4_n_dew2019_d3gdt2dp(double t, double p)
    double HSEO4_n_dew2019_d3gdtdp2(double t, double p)
    double HSEO4_n_dew2019_d3gdp3(double t, double p)
    double HSEO4_n_dew2019_s(double t, double p)
    double HSEO4_n_dew2019_v(double t, double p)
    double HSEO4_n_dew2019_cv(double t, double p)
    double HSEO4_n_dew2019_cp(double t, double p)
    double HSEO4_n_dew2019_dcpdt(double t, double p)
    double HSEO4_n_dew2019_alpha(double t, double p)
    double HSEO4_n_dew2019_beta(double t, double p)
    double HSEO4_n_dew2019_K(double t, double p)
    double HSEO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HSEO4_n_dew2019_identifier():
    result = <bytes> HSEO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HSEO4_n_dew2019_name():
    result = <bytes> HSEO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HSEO4_n_dew2019_formula():
    result = <bytes> HSEO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HSEO4_n_dew2019_mw():
    result = HSEO4_n_dew2019_mw()
    return result
def cy_HSEO4_n_dew2019_elements():
    cdef const double *e = HSEO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HSEO4_n_dew2019_g(double t, double p):
    result = HSEO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_dgdt(double t, double p):
    result = HSEO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_dgdp(double t, double p):
    result = HSEO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_d2gdt2(double t, double p):
    result = HSEO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_d2gdtdp(double t, double p):
    result = HSEO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_d2gdp2(double t, double p):
    result = HSEO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_d3gdt3(double t, double p):
    result = HSEO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_d3gdt2dp(double t, double p):
    result = HSEO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_d3gdtdp2(double t, double p):
    result = HSEO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_d3gdp3(double t, double p):
    result = HSEO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_s(double t, double p):
    result = HSEO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_v(double t, double p):
    result = HSEO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_cv(double t, double p):
    result = HSEO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_cp(double t, double p):
    result = HSEO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_dcpdt(double t, double p):
    result = HSEO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_alpha(double t, double p):
    result = HSEO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_beta(double t, double p):
    result = HSEO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_K(double t, double p):
    result = HSEO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HSEO4_n_dew2019_Kp(double t, double p):
    result = HSEO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HSEO3_n_dew2019_calc.h":
    const char *HSEO3_n_dew2019_identifier();
    const char *HSEO3_n_dew2019_name();
    const char *HSEO3_n_dew2019_formula();
    const double HSEO3_n_dew2019_mw();
    const double *HSEO3_n_dew2019_elements();
    double HSEO3_n_dew2019_g(double t, double p)
    double HSEO3_n_dew2019_dgdt(double t, double p)
    double HSEO3_n_dew2019_dgdp(double t, double p)
    double HSEO3_n_dew2019_d2gdt2(double t, double p)
    double HSEO3_n_dew2019_d2gdtdp(double t, double p)
    double HSEO3_n_dew2019_d2gdp2(double t, double p)
    double HSEO3_n_dew2019_d3gdt3(double t, double p)
    double HSEO3_n_dew2019_d3gdt2dp(double t, double p)
    double HSEO3_n_dew2019_d3gdtdp2(double t, double p)
    double HSEO3_n_dew2019_d3gdp3(double t, double p)
    double HSEO3_n_dew2019_s(double t, double p)
    double HSEO3_n_dew2019_v(double t, double p)
    double HSEO3_n_dew2019_cv(double t, double p)
    double HSEO3_n_dew2019_cp(double t, double p)
    double HSEO3_n_dew2019_dcpdt(double t, double p)
    double HSEO3_n_dew2019_alpha(double t, double p)
    double HSEO3_n_dew2019_beta(double t, double p)
    double HSEO3_n_dew2019_K(double t, double p)
    double HSEO3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HSEO3_n_dew2019_identifier():
    result = <bytes> HSEO3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HSEO3_n_dew2019_name():
    result = <bytes> HSEO3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HSEO3_n_dew2019_formula():
    result = <bytes> HSEO3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HSEO3_n_dew2019_mw():
    result = HSEO3_n_dew2019_mw()
    return result
def cy_HSEO3_n_dew2019_elements():
    cdef const double *e = HSEO3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HSEO3_n_dew2019_g(double t, double p):
    result = HSEO3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_dgdt(double t, double p):
    result = HSEO3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_dgdp(double t, double p):
    result = HSEO3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_d2gdt2(double t, double p):
    result = HSEO3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_d2gdtdp(double t, double p):
    result = HSEO3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_d2gdp2(double t, double p):
    result = HSEO3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_d3gdt3(double t, double p):
    result = HSEO3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_d3gdt2dp(double t, double p):
    result = HSEO3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_d3gdtdp2(double t, double p):
    result = HSEO3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_d3gdp3(double t, double p):
    result = HSEO3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_s(double t, double p):
    result = HSEO3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_v(double t, double p):
    result = HSEO3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_cv(double t, double p):
    result = HSEO3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_cp(double t, double p):
    result = HSEO3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_dcpdt(double t, double p):
    result = HSEO3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_alpha(double t, double p):
    result = HSEO3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_beta(double t, double p):
    result = HSEO3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_K(double t, double p):
    result = HSEO3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HSEO3_n_dew2019_Kp(double t, double p):
    result = HSEO3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HSE_n_dew2019_calc.h":
    const char *HSE_n_dew2019_identifier();
    const char *HSE_n_dew2019_name();
    const char *HSE_n_dew2019_formula();
    const double HSE_n_dew2019_mw();
    const double *HSE_n_dew2019_elements();
    double HSE_n_dew2019_g(double t, double p)
    double HSE_n_dew2019_dgdt(double t, double p)
    double HSE_n_dew2019_dgdp(double t, double p)
    double HSE_n_dew2019_d2gdt2(double t, double p)
    double HSE_n_dew2019_d2gdtdp(double t, double p)
    double HSE_n_dew2019_d2gdp2(double t, double p)
    double HSE_n_dew2019_d3gdt3(double t, double p)
    double HSE_n_dew2019_d3gdt2dp(double t, double p)
    double HSE_n_dew2019_d3gdtdp2(double t, double p)
    double HSE_n_dew2019_d3gdp3(double t, double p)
    double HSE_n_dew2019_s(double t, double p)
    double HSE_n_dew2019_v(double t, double p)
    double HSE_n_dew2019_cv(double t, double p)
    double HSE_n_dew2019_cp(double t, double p)
    double HSE_n_dew2019_dcpdt(double t, double p)
    double HSE_n_dew2019_alpha(double t, double p)
    double HSE_n_dew2019_beta(double t, double p)
    double HSE_n_dew2019_K(double t, double p)
    double HSE_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HSE_n_dew2019_identifier():
    result = <bytes> HSE_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HSE_n_dew2019_name():
    result = <bytes> HSE_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HSE_n_dew2019_formula():
    result = <bytes> HSE_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HSE_n_dew2019_mw():
    result = HSE_n_dew2019_mw()
    return result
def cy_HSE_n_dew2019_elements():
    cdef const double *e = HSE_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HSE_n_dew2019_g(double t, double p):
    result = HSE_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_dgdt(double t, double p):
    result = HSE_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_dgdp(double t, double p):
    result = HSE_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_d2gdt2(double t, double p):
    result = HSE_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_d2gdtdp(double t, double p):
    result = HSE_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_d2gdp2(double t, double p):
    result = HSE_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_d3gdt3(double t, double p):
    result = HSE_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_d3gdt2dp(double t, double p):
    result = HSE_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_d3gdtdp2(double t, double p):
    result = HSE_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_d3gdp3(double t, double p):
    result = HSE_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_s(double t, double p):
    result = HSE_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_v(double t, double p):
    result = HSE_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_cv(double t, double p):
    result = HSE_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_cp(double t, double p):
    result = HSE_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_dcpdt(double t, double p):
    result = HSE_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_alpha(double t, double p):
    result = HSE_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_beta(double t, double p):
    result = HSE_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_K(double t, double p):
    result = HSE_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HSE_n_dew2019_Kp(double t, double p):
    result = HSE_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HS_n_dew2019_calc.h":
    const char *HS_n_dew2019_identifier();
    const char *HS_n_dew2019_name();
    const char *HS_n_dew2019_formula();
    const double HS_n_dew2019_mw();
    const double *HS_n_dew2019_elements();
    double HS_n_dew2019_g(double t, double p)
    double HS_n_dew2019_dgdt(double t, double p)
    double HS_n_dew2019_dgdp(double t, double p)
    double HS_n_dew2019_d2gdt2(double t, double p)
    double HS_n_dew2019_d2gdtdp(double t, double p)
    double HS_n_dew2019_d2gdp2(double t, double p)
    double HS_n_dew2019_d3gdt3(double t, double p)
    double HS_n_dew2019_d3gdt2dp(double t, double p)
    double HS_n_dew2019_d3gdtdp2(double t, double p)
    double HS_n_dew2019_d3gdp3(double t, double p)
    double HS_n_dew2019_s(double t, double p)
    double HS_n_dew2019_v(double t, double p)
    double HS_n_dew2019_cv(double t, double p)
    double HS_n_dew2019_cp(double t, double p)
    double HS_n_dew2019_dcpdt(double t, double p)
    double HS_n_dew2019_alpha(double t, double p)
    double HS_n_dew2019_beta(double t, double p)
    double HS_n_dew2019_K(double t, double p)
    double HS_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HS_n_dew2019_identifier():
    result = <bytes> HS_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HS_n_dew2019_name():
    result = <bytes> HS_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HS_n_dew2019_formula():
    result = <bytes> HS_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HS_n_dew2019_mw():
    result = HS_n_dew2019_mw()
    return result
def cy_HS_n_dew2019_elements():
    cdef const double *e = HS_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HS_n_dew2019_g(double t, double p):
    result = HS_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_dgdt(double t, double p):
    result = HS_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_dgdp(double t, double p):
    result = HS_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_d2gdt2(double t, double p):
    result = HS_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_d2gdtdp(double t, double p):
    result = HS_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_d2gdp2(double t, double p):
    result = HS_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_d3gdt3(double t, double p):
    result = HS_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_d3gdt2dp(double t, double p):
    result = HS_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_d3gdtdp2(double t, double p):
    result = HS_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_d3gdp3(double t, double p):
    result = HS_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_s(double t, double p):
    result = HS_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_v(double t, double p):
    result = HS_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_cv(double t, double p):
    result = HS_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_cp(double t, double p):
    result = HS_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_dcpdt(double t, double p):
    result = HS_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_alpha(double t, double p):
    result = HS_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_beta(double t, double p):
    result = HS_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_K(double t, double p):
    result = HS_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HS_n_dew2019_Kp(double t, double p):
    result = HS_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HPO4_n2_dew2019_calc.h":
    const char *HPO4_n2_dew2019_identifier();
    const char *HPO4_n2_dew2019_name();
    const char *HPO4_n2_dew2019_formula();
    const double HPO4_n2_dew2019_mw();
    const double *HPO4_n2_dew2019_elements();
    double HPO4_n2_dew2019_g(double t, double p)
    double HPO4_n2_dew2019_dgdt(double t, double p)
    double HPO4_n2_dew2019_dgdp(double t, double p)
    double HPO4_n2_dew2019_d2gdt2(double t, double p)
    double HPO4_n2_dew2019_d2gdtdp(double t, double p)
    double HPO4_n2_dew2019_d2gdp2(double t, double p)
    double HPO4_n2_dew2019_d3gdt3(double t, double p)
    double HPO4_n2_dew2019_d3gdt2dp(double t, double p)
    double HPO4_n2_dew2019_d3gdtdp2(double t, double p)
    double HPO4_n2_dew2019_d3gdp3(double t, double p)
    double HPO4_n2_dew2019_s(double t, double p)
    double HPO4_n2_dew2019_v(double t, double p)
    double HPO4_n2_dew2019_cv(double t, double p)
    double HPO4_n2_dew2019_cp(double t, double p)
    double HPO4_n2_dew2019_dcpdt(double t, double p)
    double HPO4_n2_dew2019_alpha(double t, double p)
    double HPO4_n2_dew2019_beta(double t, double p)
    double HPO4_n2_dew2019_K(double t, double p)
    double HPO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HPO4_n2_dew2019_identifier():
    result = <bytes> HPO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HPO4_n2_dew2019_name():
    result = <bytes> HPO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_HPO4_n2_dew2019_formula():
    result = <bytes> HPO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_HPO4_n2_dew2019_mw():
    result = HPO4_n2_dew2019_mw()
    return result
def cy_HPO4_n2_dew2019_elements():
    cdef const double *e = HPO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HPO4_n2_dew2019_g(double t, double p):
    result = HPO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_dgdt(double t, double p):
    result = HPO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_dgdp(double t, double p):
    result = HPO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_d2gdt2(double t, double p):
    result = HPO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_d2gdtdp(double t, double p):
    result = HPO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_d2gdp2(double t, double p):
    result = HPO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_d3gdt3(double t, double p):
    result = HPO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = HPO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = HPO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_d3gdp3(double t, double p):
    result = HPO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_s(double t, double p):
    result = HPO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_v(double t, double p):
    result = HPO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_cv(double t, double p):
    result = HPO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_cp(double t, double p):
    result = HPO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_dcpdt(double t, double p):
    result = HPO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_alpha(double t, double p):
    result = HPO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_beta(double t, double p):
    result = HPO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_K(double t, double p):
    result = HPO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_HPO4_n2_dew2019_Kp(double t, double p):
    result = HPO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HO2_n_dew2019_calc.h":
    const char *HO2_n_dew2019_identifier();
    const char *HO2_n_dew2019_name();
    const char *HO2_n_dew2019_formula();
    const double HO2_n_dew2019_mw();
    const double *HO2_n_dew2019_elements();
    double HO2_n_dew2019_g(double t, double p)
    double HO2_n_dew2019_dgdt(double t, double p)
    double HO2_n_dew2019_dgdp(double t, double p)
    double HO2_n_dew2019_d2gdt2(double t, double p)
    double HO2_n_dew2019_d2gdtdp(double t, double p)
    double HO2_n_dew2019_d2gdp2(double t, double p)
    double HO2_n_dew2019_d3gdt3(double t, double p)
    double HO2_n_dew2019_d3gdt2dp(double t, double p)
    double HO2_n_dew2019_d3gdtdp2(double t, double p)
    double HO2_n_dew2019_d3gdp3(double t, double p)
    double HO2_n_dew2019_s(double t, double p)
    double HO2_n_dew2019_v(double t, double p)
    double HO2_n_dew2019_cv(double t, double p)
    double HO2_n_dew2019_cp(double t, double p)
    double HO2_n_dew2019_dcpdt(double t, double p)
    double HO2_n_dew2019_alpha(double t, double p)
    double HO2_n_dew2019_beta(double t, double p)
    double HO2_n_dew2019_K(double t, double p)
    double HO2_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HO2_n_dew2019_identifier():
    result = <bytes> HO2_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HO2_n_dew2019_name():
    result = <bytes> HO2_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HO2_n_dew2019_formula():
    result = <bytes> HO2_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HO2_n_dew2019_mw():
    result = HO2_n_dew2019_mw()
    return result
def cy_HO2_n_dew2019_elements():
    cdef const double *e = HO2_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HO2_n_dew2019_g(double t, double p):
    result = HO2_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_dgdt(double t, double p):
    result = HO2_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_dgdp(double t, double p):
    result = HO2_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_d2gdt2(double t, double p):
    result = HO2_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_d2gdtdp(double t, double p):
    result = HO2_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_d2gdp2(double t, double p):
    result = HO2_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_d3gdt3(double t, double p):
    result = HO2_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_d3gdt2dp(double t, double p):
    result = HO2_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_d3gdtdp2(double t, double p):
    result = HO2_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_d3gdp3(double t, double p):
    result = HO2_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_s(double t, double p):
    result = HO2_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_v(double t, double p):
    result = HO2_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_cv(double t, double p):
    result = HO2_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_cp(double t, double p):
    result = HO2_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_dcpdt(double t, double p):
    result = HO2_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_alpha(double t, double p):
    result = HO2_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_beta(double t, double p):
    result = HO2_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_K(double t, double p):
    result = HO2_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HO2_n_dew2019_Kp(double t, double p):
    result = HO2_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HO_p3_dew2019_calc.h":
    const char *HO_p3_dew2019_identifier();
    const char *HO_p3_dew2019_name();
    const char *HO_p3_dew2019_formula();
    const double HO_p3_dew2019_mw();
    const double *HO_p3_dew2019_elements();
    double HO_p3_dew2019_g(double t, double p)
    double HO_p3_dew2019_dgdt(double t, double p)
    double HO_p3_dew2019_dgdp(double t, double p)
    double HO_p3_dew2019_d2gdt2(double t, double p)
    double HO_p3_dew2019_d2gdtdp(double t, double p)
    double HO_p3_dew2019_d2gdp2(double t, double p)
    double HO_p3_dew2019_d3gdt3(double t, double p)
    double HO_p3_dew2019_d3gdt2dp(double t, double p)
    double HO_p3_dew2019_d3gdtdp2(double t, double p)
    double HO_p3_dew2019_d3gdp3(double t, double p)
    double HO_p3_dew2019_s(double t, double p)
    double HO_p3_dew2019_v(double t, double p)
    double HO_p3_dew2019_cv(double t, double p)
    double HO_p3_dew2019_cp(double t, double p)
    double HO_p3_dew2019_dcpdt(double t, double p)
    double HO_p3_dew2019_alpha(double t, double p)
    double HO_p3_dew2019_beta(double t, double p)
    double HO_p3_dew2019_K(double t, double p)
    double HO_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HO_p3_dew2019_identifier():
    result = <bytes> HO_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HO_p3_dew2019_name():
    result = <bytes> HO_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_HO_p3_dew2019_formula():
    result = <bytes> HO_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_HO_p3_dew2019_mw():
    result = HO_p3_dew2019_mw()
    return result
def cy_HO_p3_dew2019_elements():
    cdef const double *e = HO_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HO_p3_dew2019_g(double t, double p):
    result = HO_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_dgdt(double t, double p):
    result = HO_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_dgdp(double t, double p):
    result = HO_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_d2gdt2(double t, double p):
    result = HO_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_d2gdtdp(double t, double p):
    result = HO_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_d2gdp2(double t, double p):
    result = HO_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_d3gdt3(double t, double p):
    result = HO_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_d3gdt2dp(double t, double p):
    result = HO_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_d3gdtdp2(double t, double p):
    result = HO_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_d3gdp3(double t, double p):
    result = HO_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_s(double t, double p):
    result = HO_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_v(double t, double p):
    result = HO_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_cv(double t, double p):
    result = HO_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_cp(double t, double p):
    result = HO_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_dcpdt(double t, double p):
    result = HO_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_alpha(double t, double p):
    result = HO_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_beta(double t, double p):
    result = HO_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_K(double t, double p):
    result = HO_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_HO_p3_dew2019_Kp(double t, double p):
    result = HO_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HG2_p2_dew2019_calc.h":
    const char *HG2_p2_dew2019_identifier();
    const char *HG2_p2_dew2019_name();
    const char *HG2_p2_dew2019_formula();
    const double HG2_p2_dew2019_mw();
    const double *HG2_p2_dew2019_elements();
    double HG2_p2_dew2019_g(double t, double p)
    double HG2_p2_dew2019_dgdt(double t, double p)
    double HG2_p2_dew2019_dgdp(double t, double p)
    double HG2_p2_dew2019_d2gdt2(double t, double p)
    double HG2_p2_dew2019_d2gdtdp(double t, double p)
    double HG2_p2_dew2019_d2gdp2(double t, double p)
    double HG2_p2_dew2019_d3gdt3(double t, double p)
    double HG2_p2_dew2019_d3gdt2dp(double t, double p)
    double HG2_p2_dew2019_d3gdtdp2(double t, double p)
    double HG2_p2_dew2019_d3gdp3(double t, double p)
    double HG2_p2_dew2019_s(double t, double p)
    double HG2_p2_dew2019_v(double t, double p)
    double HG2_p2_dew2019_cv(double t, double p)
    double HG2_p2_dew2019_cp(double t, double p)
    double HG2_p2_dew2019_dcpdt(double t, double p)
    double HG2_p2_dew2019_alpha(double t, double p)
    double HG2_p2_dew2019_beta(double t, double p)
    double HG2_p2_dew2019_K(double t, double p)
    double HG2_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HG2_p2_dew2019_identifier():
    result = <bytes> HG2_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HG2_p2_dew2019_name():
    result = <bytes> HG2_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_HG2_p2_dew2019_formula():
    result = <bytes> HG2_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_HG2_p2_dew2019_mw():
    result = HG2_p2_dew2019_mw()
    return result
def cy_HG2_p2_dew2019_elements():
    cdef const double *e = HG2_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HG2_p2_dew2019_g(double t, double p):
    result = HG2_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_dgdt(double t, double p):
    result = HG2_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_dgdp(double t, double p):
    result = HG2_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_d2gdt2(double t, double p):
    result = HG2_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_d2gdtdp(double t, double p):
    result = HG2_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_d2gdp2(double t, double p):
    result = HG2_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_d3gdt3(double t, double p):
    result = HG2_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_d3gdt2dp(double t, double p):
    result = HG2_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_d3gdtdp2(double t, double p):
    result = HG2_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_d3gdp3(double t, double p):
    result = HG2_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_s(double t, double p):
    result = HG2_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_v(double t, double p):
    result = HG2_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_cv(double t, double p):
    result = HG2_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_cp(double t, double p):
    result = HG2_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_dcpdt(double t, double p):
    result = HG2_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_alpha(double t, double p):
    result = HG2_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_beta(double t, double p):
    result = HG2_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_K(double t, double p):
    result = HG2_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_HG2_p2_dew2019_Kp(double t, double p):
    result = HG2_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HG_p2_dew2019_calc.h":
    const char *HG_p2_dew2019_identifier();
    const char *HG_p2_dew2019_name();
    const char *HG_p2_dew2019_formula();
    const double HG_p2_dew2019_mw();
    const double *HG_p2_dew2019_elements();
    double HG_p2_dew2019_g(double t, double p)
    double HG_p2_dew2019_dgdt(double t, double p)
    double HG_p2_dew2019_dgdp(double t, double p)
    double HG_p2_dew2019_d2gdt2(double t, double p)
    double HG_p2_dew2019_d2gdtdp(double t, double p)
    double HG_p2_dew2019_d2gdp2(double t, double p)
    double HG_p2_dew2019_d3gdt3(double t, double p)
    double HG_p2_dew2019_d3gdt2dp(double t, double p)
    double HG_p2_dew2019_d3gdtdp2(double t, double p)
    double HG_p2_dew2019_d3gdp3(double t, double p)
    double HG_p2_dew2019_s(double t, double p)
    double HG_p2_dew2019_v(double t, double p)
    double HG_p2_dew2019_cv(double t, double p)
    double HG_p2_dew2019_cp(double t, double p)
    double HG_p2_dew2019_dcpdt(double t, double p)
    double HG_p2_dew2019_alpha(double t, double p)
    double HG_p2_dew2019_beta(double t, double p)
    double HG_p2_dew2019_K(double t, double p)
    double HG_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HG_p2_dew2019_identifier():
    result = <bytes> HG_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HG_p2_dew2019_name():
    result = <bytes> HG_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_HG_p2_dew2019_formula():
    result = <bytes> HG_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_HG_p2_dew2019_mw():
    result = HG_p2_dew2019_mw()
    return result
def cy_HG_p2_dew2019_elements():
    cdef const double *e = HG_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HG_p2_dew2019_g(double t, double p):
    result = HG_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_dgdt(double t, double p):
    result = HG_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_dgdp(double t, double p):
    result = HG_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_d2gdt2(double t, double p):
    result = HG_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_d2gdtdp(double t, double p):
    result = HG_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_d2gdp2(double t, double p):
    result = HG_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_d3gdt3(double t, double p):
    result = HG_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_d3gdt2dp(double t, double p):
    result = HG_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_d3gdtdp2(double t, double p):
    result = HG_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_d3gdp3(double t, double p):
    result = HG_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_s(double t, double p):
    result = HG_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_v(double t, double p):
    result = HG_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_cv(double t, double p):
    result = HG_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_cp(double t, double p):
    result = HG_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_dcpdt(double t, double p):
    result = HG_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_alpha(double t, double p):
    result = HG_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_beta(double t, double p):
    result = HG_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_K(double t, double p):
    result = HG_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_HG_p2_dew2019_Kp(double t, double p):
    result = HG_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FE_l_OH_r_3_n_dew2019_calc.h":
    const char *FE_l_OH_r_3_n_dew2019_identifier();
    const char *FE_l_OH_r_3_n_dew2019_name();
    const char *FE_l_OH_r_3_n_dew2019_formula();
    const double FE_l_OH_r_3_n_dew2019_mw();
    const double *FE_l_OH_r_3_n_dew2019_elements();
    double FE_l_OH_r_3_n_dew2019_g(double t, double p)
    double FE_l_OH_r_3_n_dew2019_dgdt(double t, double p)
    double FE_l_OH_r_3_n_dew2019_dgdp(double t, double p)
    double FE_l_OH_r_3_n_dew2019_d2gdt2(double t, double p)
    double FE_l_OH_r_3_n_dew2019_d2gdtdp(double t, double p)
    double FE_l_OH_r_3_n_dew2019_d2gdp2(double t, double p)
    double FE_l_OH_r_3_n_dew2019_d3gdt3(double t, double p)
    double FE_l_OH_r_3_n_dew2019_d3gdt2dp(double t, double p)
    double FE_l_OH_r_3_n_dew2019_d3gdtdp2(double t, double p)
    double FE_l_OH_r_3_n_dew2019_d3gdp3(double t, double p)
    double FE_l_OH_r_3_n_dew2019_s(double t, double p)
    double FE_l_OH_r_3_n_dew2019_v(double t, double p)
    double FE_l_OH_r_3_n_dew2019_cv(double t, double p)
    double FE_l_OH_r_3_n_dew2019_cp(double t, double p)
    double FE_l_OH_r_3_n_dew2019_dcpdt(double t, double p)
    double FE_l_OH_r_3_n_dew2019_alpha(double t, double p)
    double FE_l_OH_r_3_n_dew2019_beta(double t, double p)
    double FE_l_OH_r_3_n_dew2019_K(double t, double p)
    double FE_l_OH_r_3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FE_l_OH_r_3_n_dew2019_identifier():
    result = <bytes> FE_l_OH_r_3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FE_l_OH_r_3_n_dew2019_name():
    result = <bytes> FE_l_OH_r_3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_FE_l_OH_r_3_n_dew2019_formula():
    result = <bytes> FE_l_OH_r_3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_FE_l_OH_r_3_n_dew2019_mw():
    result = FE_l_OH_r_3_n_dew2019_mw()
    return result
def cy_FE_l_OH_r_3_n_dew2019_elements():
    cdef const double *e = FE_l_OH_r_3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FE_l_OH_r_3_n_dew2019_g(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_dgdt(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_dgdp(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_d2gdt2(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_d2gdtdp(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_d2gdp2(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_d3gdt3(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_d3gdt2dp(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_d3gdtdp2(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_d3gdp3(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_s(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_v(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_cv(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_cp(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_dcpdt(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_alpha(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_beta(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_K(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_3_n_dew2019_Kp(double t, double p):
    result = FE_l_OH_r_3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HEXANE_l_AQ_r__dew2019_calc.h":
    const char *HEXANE_l_AQ_r__dew2019_identifier();
    const char *HEXANE_l_AQ_r__dew2019_name();
    const char *HEXANE_l_AQ_r__dew2019_formula();
    const double HEXANE_l_AQ_r__dew2019_mw();
    const double *HEXANE_l_AQ_r__dew2019_elements();
    double HEXANE_l_AQ_r__dew2019_g(double t, double p)
    double HEXANE_l_AQ_r__dew2019_dgdt(double t, double p)
    double HEXANE_l_AQ_r__dew2019_dgdp(double t, double p)
    double HEXANE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double HEXANE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double HEXANE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double HEXANE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double HEXANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double HEXANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double HEXANE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double HEXANE_l_AQ_r__dew2019_s(double t, double p)
    double HEXANE_l_AQ_r__dew2019_v(double t, double p)
    double HEXANE_l_AQ_r__dew2019_cv(double t, double p)
    double HEXANE_l_AQ_r__dew2019_cp(double t, double p)
    double HEXANE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double HEXANE_l_AQ_r__dew2019_alpha(double t, double p)
    double HEXANE_l_AQ_r__dew2019_beta(double t, double p)
    double HEXANE_l_AQ_r__dew2019_K(double t, double p)
    double HEXANE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HEXANE_l_AQ_r__dew2019_identifier():
    result = <bytes> HEXANE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_HEXANE_l_AQ_r__dew2019_name():
    result = <bytes> HEXANE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_HEXANE_l_AQ_r__dew2019_formula():
    result = <bytes> HEXANE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_HEXANE_l_AQ_r__dew2019_mw():
    result = HEXANE_l_AQ_r__dew2019_mw()
    return result
def cy_HEXANE_l_AQ_r__dew2019_elements():
    cdef const double *e = HEXANE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HEXANE_l_AQ_r__dew2019_g(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_s(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_v(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_cv(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_cp(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_alpha(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_beta(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_K(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_HEXANE_l_AQ_r__dew2019_Kp(double t, double p):
    result = HEXANE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HE_l_AQ_r__dew2019_calc.h":
    const char *HE_l_AQ_r__dew2019_identifier();
    const char *HE_l_AQ_r__dew2019_name();
    const char *HE_l_AQ_r__dew2019_formula();
    const double HE_l_AQ_r__dew2019_mw();
    const double *HE_l_AQ_r__dew2019_elements();
    double HE_l_AQ_r__dew2019_g(double t, double p)
    double HE_l_AQ_r__dew2019_dgdt(double t, double p)
    double HE_l_AQ_r__dew2019_dgdp(double t, double p)
    double HE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double HE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double HE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double HE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double HE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double HE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double HE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double HE_l_AQ_r__dew2019_s(double t, double p)
    double HE_l_AQ_r__dew2019_v(double t, double p)
    double HE_l_AQ_r__dew2019_cv(double t, double p)
    double HE_l_AQ_r__dew2019_cp(double t, double p)
    double HE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double HE_l_AQ_r__dew2019_alpha(double t, double p)
    double HE_l_AQ_r__dew2019_beta(double t, double p)
    double HE_l_AQ_r__dew2019_K(double t, double p)
    double HE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HE_l_AQ_r__dew2019_identifier():
    result = <bytes> HE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_HE_l_AQ_r__dew2019_name():
    result = <bytes> HE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_HE_l_AQ_r__dew2019_formula():
    result = <bytes> HE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_HE_l_AQ_r__dew2019_mw():
    result = HE_l_AQ_r__dew2019_mw()
    return result
def cy_HE_l_AQ_r__dew2019_elements():
    cdef const double *e = HE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HE_l_AQ_r__dew2019_g(double t, double p):
    result = HE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = HE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = HE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = HE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = HE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = HE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = HE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = HE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = HE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = HE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_s(double t, double p):
    result = HE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_v(double t, double p):
    result = HE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_cv(double t, double p):
    result = HE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_cp(double t, double p):
    result = HE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = HE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_alpha(double t, double p):
    result = HE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_beta(double t, double p):
    result = HE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_K(double t, double p):
    result = HE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_HE_l_AQ_r__dew2019_Kp(double t, double p):
    result = HE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HCRO4_n_dew2019_calc.h":
    const char *HCRO4_n_dew2019_identifier();
    const char *HCRO4_n_dew2019_name();
    const char *HCRO4_n_dew2019_formula();
    const double HCRO4_n_dew2019_mw();
    const double *HCRO4_n_dew2019_elements();
    double HCRO4_n_dew2019_g(double t, double p)
    double HCRO4_n_dew2019_dgdt(double t, double p)
    double HCRO4_n_dew2019_dgdp(double t, double p)
    double HCRO4_n_dew2019_d2gdt2(double t, double p)
    double HCRO4_n_dew2019_d2gdtdp(double t, double p)
    double HCRO4_n_dew2019_d2gdp2(double t, double p)
    double HCRO4_n_dew2019_d3gdt3(double t, double p)
    double HCRO4_n_dew2019_d3gdt2dp(double t, double p)
    double HCRO4_n_dew2019_d3gdtdp2(double t, double p)
    double HCRO4_n_dew2019_d3gdp3(double t, double p)
    double HCRO4_n_dew2019_s(double t, double p)
    double HCRO4_n_dew2019_v(double t, double p)
    double HCRO4_n_dew2019_cv(double t, double p)
    double HCRO4_n_dew2019_cp(double t, double p)
    double HCRO4_n_dew2019_dcpdt(double t, double p)
    double HCRO4_n_dew2019_alpha(double t, double p)
    double HCRO4_n_dew2019_beta(double t, double p)
    double HCRO4_n_dew2019_K(double t, double p)
    double HCRO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HCRO4_n_dew2019_identifier():
    result = <bytes> HCRO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HCRO4_n_dew2019_name():
    result = <bytes> HCRO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HCRO4_n_dew2019_formula():
    result = <bytes> HCRO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HCRO4_n_dew2019_mw():
    result = HCRO4_n_dew2019_mw()
    return result
def cy_HCRO4_n_dew2019_elements():
    cdef const double *e = HCRO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HCRO4_n_dew2019_g(double t, double p):
    result = HCRO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_dgdt(double t, double p):
    result = HCRO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_dgdp(double t, double p):
    result = HCRO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_d2gdt2(double t, double p):
    result = HCRO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_d2gdtdp(double t, double p):
    result = HCRO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_d2gdp2(double t, double p):
    result = HCRO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_d3gdt3(double t, double p):
    result = HCRO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_d3gdt2dp(double t, double p):
    result = HCRO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_d3gdtdp2(double t, double p):
    result = HCRO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_d3gdp3(double t, double p):
    result = HCRO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_s(double t, double p):
    result = HCRO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_v(double t, double p):
    result = HCRO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_cv(double t, double p):
    result = HCRO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_cp(double t, double p):
    result = HCRO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_dcpdt(double t, double p):
    result = HCRO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_alpha(double t, double p):
    result = HCRO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_beta(double t, double p):
    result = HCRO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_K(double t, double p):
    result = HCRO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HCRO4_n_dew2019_Kp(double t, double p):
    result = HCRO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HCO3_n_dew2019_calc.h":
    const char *HCO3_n_dew2019_identifier();
    const char *HCO3_n_dew2019_name();
    const char *HCO3_n_dew2019_formula();
    const double HCO3_n_dew2019_mw();
    const double *HCO3_n_dew2019_elements();
    double HCO3_n_dew2019_g(double t, double p)
    double HCO3_n_dew2019_dgdt(double t, double p)
    double HCO3_n_dew2019_dgdp(double t, double p)
    double HCO3_n_dew2019_d2gdt2(double t, double p)
    double HCO3_n_dew2019_d2gdtdp(double t, double p)
    double HCO3_n_dew2019_d2gdp2(double t, double p)
    double HCO3_n_dew2019_d3gdt3(double t, double p)
    double HCO3_n_dew2019_d3gdt2dp(double t, double p)
    double HCO3_n_dew2019_d3gdtdp2(double t, double p)
    double HCO3_n_dew2019_d3gdp3(double t, double p)
    double HCO3_n_dew2019_s(double t, double p)
    double HCO3_n_dew2019_v(double t, double p)
    double HCO3_n_dew2019_cv(double t, double p)
    double HCO3_n_dew2019_cp(double t, double p)
    double HCO3_n_dew2019_dcpdt(double t, double p)
    double HCO3_n_dew2019_alpha(double t, double p)
    double HCO3_n_dew2019_beta(double t, double p)
    double HCO3_n_dew2019_K(double t, double p)
    double HCO3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HCO3_n_dew2019_identifier():
    result = <bytes> HCO3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HCO3_n_dew2019_name():
    result = <bytes> HCO3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HCO3_n_dew2019_formula():
    result = <bytes> HCO3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HCO3_n_dew2019_mw():
    result = HCO3_n_dew2019_mw()
    return result
def cy_HCO3_n_dew2019_elements():
    cdef const double *e = HCO3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HCO3_n_dew2019_g(double t, double p):
    result = HCO3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_dgdt(double t, double p):
    result = HCO3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_dgdp(double t, double p):
    result = HCO3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_d2gdt2(double t, double p):
    result = HCO3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_d2gdtdp(double t, double p):
    result = HCO3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_d2gdp2(double t, double p):
    result = HCO3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_d3gdt3(double t, double p):
    result = HCO3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_d3gdt2dp(double t, double p):
    result = HCO3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_d3gdtdp2(double t, double p):
    result = HCO3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_d3gdp3(double t, double p):
    result = HCO3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_s(double t, double p):
    result = HCO3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_v(double t, double p):
    result = HCO3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_cv(double t, double p):
    result = HCO3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_cp(double t, double p):
    result = HCO3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_dcpdt(double t, double p):
    result = HCO3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_alpha(double t, double p):
    result = HCO3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_beta(double t, double p):
    result = HCO3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_K(double t, double p):
    result = HCO3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HCO3_n_dew2019_Kp(double t, double p):
    result = HCO3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HCN_l_AQ_r__dew2019_calc.h":
    const char *HCN_l_AQ_r__dew2019_identifier();
    const char *HCN_l_AQ_r__dew2019_name();
    const char *HCN_l_AQ_r__dew2019_formula();
    const double HCN_l_AQ_r__dew2019_mw();
    const double *HCN_l_AQ_r__dew2019_elements();
    double HCN_l_AQ_r__dew2019_g(double t, double p)
    double HCN_l_AQ_r__dew2019_dgdt(double t, double p)
    double HCN_l_AQ_r__dew2019_dgdp(double t, double p)
    double HCN_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double HCN_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double HCN_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double HCN_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double HCN_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double HCN_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double HCN_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double HCN_l_AQ_r__dew2019_s(double t, double p)
    double HCN_l_AQ_r__dew2019_v(double t, double p)
    double HCN_l_AQ_r__dew2019_cv(double t, double p)
    double HCN_l_AQ_r__dew2019_cp(double t, double p)
    double HCN_l_AQ_r__dew2019_dcpdt(double t, double p)
    double HCN_l_AQ_r__dew2019_alpha(double t, double p)
    double HCN_l_AQ_r__dew2019_beta(double t, double p)
    double HCN_l_AQ_r__dew2019_K(double t, double p)
    double HCN_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HCN_l_AQ_r__dew2019_identifier():
    result = <bytes> HCN_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_HCN_l_AQ_r__dew2019_name():
    result = <bytes> HCN_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_HCN_l_AQ_r__dew2019_formula():
    result = <bytes> HCN_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_HCN_l_AQ_r__dew2019_mw():
    result = HCN_l_AQ_r__dew2019_mw()
    return result
def cy_HCN_l_AQ_r__dew2019_elements():
    cdef const double *e = HCN_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HCN_l_AQ_r__dew2019_g(double t, double p):
    result = HCN_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_dgdt(double t, double p):
    result = HCN_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_dgdp(double t, double p):
    result = HCN_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = HCN_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = HCN_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = HCN_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = HCN_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = HCN_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = HCN_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = HCN_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_s(double t, double p):
    result = HCN_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_v(double t, double p):
    result = HCN_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_cv(double t, double p):
    result = HCN_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_cp(double t, double p):
    result = HCN_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = HCN_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_alpha(double t, double p):
    result = HCN_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_beta(double t, double p):
    result = HCN_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_K(double t, double p):
    result = HCN_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_HCN_l_AQ_r__dew2019_Kp(double t, double p):
    result = HCN_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HCL_l_AQ_r__dew2019_calc.h":
    const char *HCL_l_AQ_r__dew2019_identifier();
    const char *HCL_l_AQ_r__dew2019_name();
    const char *HCL_l_AQ_r__dew2019_formula();
    const double HCL_l_AQ_r__dew2019_mw();
    const double *HCL_l_AQ_r__dew2019_elements();
    double HCL_l_AQ_r__dew2019_g(double t, double p)
    double HCL_l_AQ_r__dew2019_dgdt(double t, double p)
    double HCL_l_AQ_r__dew2019_dgdp(double t, double p)
    double HCL_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double HCL_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double HCL_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double HCL_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double HCL_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double HCL_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double HCL_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double HCL_l_AQ_r__dew2019_s(double t, double p)
    double HCL_l_AQ_r__dew2019_v(double t, double p)
    double HCL_l_AQ_r__dew2019_cv(double t, double p)
    double HCL_l_AQ_r__dew2019_cp(double t, double p)
    double HCL_l_AQ_r__dew2019_dcpdt(double t, double p)
    double HCL_l_AQ_r__dew2019_alpha(double t, double p)
    double HCL_l_AQ_r__dew2019_beta(double t, double p)
    double HCL_l_AQ_r__dew2019_K(double t, double p)
    double HCL_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HCL_l_AQ_r__dew2019_identifier():
    result = <bytes> HCL_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_HCL_l_AQ_r__dew2019_name():
    result = <bytes> HCL_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_HCL_l_AQ_r__dew2019_formula():
    result = <bytes> HCL_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_HCL_l_AQ_r__dew2019_mw():
    result = HCL_l_AQ_r__dew2019_mw()
    return result
def cy_HCL_l_AQ_r__dew2019_elements():
    cdef const double *e = HCL_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HCL_l_AQ_r__dew2019_g(double t, double p):
    result = HCL_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_dgdt(double t, double p):
    result = HCL_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_dgdp(double t, double p):
    result = HCL_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = HCL_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = HCL_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = HCL_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = HCL_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = HCL_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = HCL_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = HCL_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_s(double t, double p):
    result = HCL_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_v(double t, double p):
    result = HCL_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_cv(double t, double p):
    result = HCL_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_cp(double t, double p):
    result = HCL_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = HCL_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_alpha(double t, double p):
    result = HCL_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_beta(double t, double p):
    result = HCL_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_K(double t, double p):
    result = HCL_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_HCL_l_AQ_r__dew2019_Kp(double t, double p):
    result = HCL_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HASO4_n2_dew2019_calc.h":
    const char *HASO4_n2_dew2019_identifier();
    const char *HASO4_n2_dew2019_name();
    const char *HASO4_n2_dew2019_formula();
    const double HASO4_n2_dew2019_mw();
    const double *HASO4_n2_dew2019_elements();
    double HASO4_n2_dew2019_g(double t, double p)
    double HASO4_n2_dew2019_dgdt(double t, double p)
    double HASO4_n2_dew2019_dgdp(double t, double p)
    double HASO4_n2_dew2019_d2gdt2(double t, double p)
    double HASO4_n2_dew2019_d2gdtdp(double t, double p)
    double HASO4_n2_dew2019_d2gdp2(double t, double p)
    double HASO4_n2_dew2019_d3gdt3(double t, double p)
    double HASO4_n2_dew2019_d3gdt2dp(double t, double p)
    double HASO4_n2_dew2019_d3gdtdp2(double t, double p)
    double HASO4_n2_dew2019_d3gdp3(double t, double p)
    double HASO4_n2_dew2019_s(double t, double p)
    double HASO4_n2_dew2019_v(double t, double p)
    double HASO4_n2_dew2019_cv(double t, double p)
    double HASO4_n2_dew2019_cp(double t, double p)
    double HASO4_n2_dew2019_dcpdt(double t, double p)
    double HASO4_n2_dew2019_alpha(double t, double p)
    double HASO4_n2_dew2019_beta(double t, double p)
    double HASO4_n2_dew2019_K(double t, double p)
    double HASO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HASO4_n2_dew2019_identifier():
    result = <bytes> HASO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HASO4_n2_dew2019_name():
    result = <bytes> HASO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_HASO4_n2_dew2019_formula():
    result = <bytes> HASO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_HASO4_n2_dew2019_mw():
    result = HASO4_n2_dew2019_mw()
    return result
def cy_HASO4_n2_dew2019_elements():
    cdef const double *e = HASO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HASO4_n2_dew2019_g(double t, double p):
    result = HASO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_dgdt(double t, double p):
    result = HASO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_dgdp(double t, double p):
    result = HASO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_d2gdt2(double t, double p):
    result = HASO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_d2gdtdp(double t, double p):
    result = HASO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_d2gdp2(double t, double p):
    result = HASO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_d3gdt3(double t, double p):
    result = HASO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = HASO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = HASO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_d3gdp3(double t, double p):
    result = HASO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_s(double t, double p):
    result = HASO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_v(double t, double p):
    result = HASO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_cv(double t, double p):
    result = HASO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_cp(double t, double p):
    result = HASO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_dcpdt(double t, double p):
    result = HASO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_alpha(double t, double p):
    result = HASO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_beta(double t, double p):
    result = HASO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_K(double t, double p):
    result = HASO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_HASO4_n2_dew2019_Kp(double t, double p):
    result = HASO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AL_l_OH_r_3_l_AQ_r__dew2019_calc.h":
    const char *AL_l_OH_r_3_l_AQ_r__dew2019_identifier();
    const char *AL_l_OH_r_3_l_AQ_r__dew2019_name();
    const char *AL_l_OH_r_3_l_AQ_r__dew2019_formula();
    const double AL_l_OH_r_3_l_AQ_r__dew2019_mw();
    const double *AL_l_OH_r_3_l_AQ_r__dew2019_elements();
    double AL_l_OH_r_3_l_AQ_r__dew2019_g(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_dgdt(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_dgdp(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_s(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_v(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_cv(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_cp(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_alpha(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_beta(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_K(double t, double p)
    double AL_l_OH_r_3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_identifier():
    result = <bytes> AL_l_OH_r_3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_name():
    result = <bytes> AL_l_OH_r_3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_formula():
    result = <bytes> AL_l_OH_r_3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_mw():
    result = AL_l_OH_r_3_l_AQ_r__dew2019_mw()
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_elements():
    cdef const double *e = AL_l_OH_r_3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_g(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_s(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_v(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_cv(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_cp(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_alpha(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_beta(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_K(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_3_l_AQ_r__dew2019_Kp(double t, double p):
    result = AL_l_OH_r_3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H3PO4_l_AQ_r__dew2019_calc.h":
    const char *H3PO4_l_AQ_r__dew2019_identifier();
    const char *H3PO4_l_AQ_r__dew2019_name();
    const char *H3PO4_l_AQ_r__dew2019_formula();
    const double H3PO4_l_AQ_r__dew2019_mw();
    const double *H3PO4_l_AQ_r__dew2019_elements();
    double H3PO4_l_AQ_r__dew2019_g(double t, double p)
    double H3PO4_l_AQ_r__dew2019_dgdt(double t, double p)
    double H3PO4_l_AQ_r__dew2019_dgdp(double t, double p)
    double H3PO4_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double H3PO4_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double H3PO4_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double H3PO4_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double H3PO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double H3PO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double H3PO4_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double H3PO4_l_AQ_r__dew2019_s(double t, double p)
    double H3PO4_l_AQ_r__dew2019_v(double t, double p)
    double H3PO4_l_AQ_r__dew2019_cv(double t, double p)
    double H3PO4_l_AQ_r__dew2019_cp(double t, double p)
    double H3PO4_l_AQ_r__dew2019_dcpdt(double t, double p)
    double H3PO4_l_AQ_r__dew2019_alpha(double t, double p)
    double H3PO4_l_AQ_r__dew2019_beta(double t, double p)
    double H3PO4_l_AQ_r__dew2019_K(double t, double p)
    double H3PO4_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H3PO4_l_AQ_r__dew2019_identifier():
    result = <bytes> H3PO4_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_H3PO4_l_AQ_r__dew2019_name():
    result = <bytes> H3PO4_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_H3PO4_l_AQ_r__dew2019_formula():
    result = <bytes> H3PO4_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_H3PO4_l_AQ_r__dew2019_mw():
    result = H3PO4_l_AQ_r__dew2019_mw()
    return result
def cy_H3PO4_l_AQ_r__dew2019_elements():
    cdef const double *e = H3PO4_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H3PO4_l_AQ_r__dew2019_g(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_dgdt(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_dgdp(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_s(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_v(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_cv(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_cp(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_alpha(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_beta(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_K(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_H3PO4_l_AQ_r__dew2019_Kp(double t, double p):
    result = H3PO4_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H3P207_n_dew2019_calc.h":
    const char *H3P207_n_dew2019_identifier();
    const char *H3P207_n_dew2019_name();
    const char *H3P207_n_dew2019_formula();
    const double H3P207_n_dew2019_mw();
    const double *H3P207_n_dew2019_elements();
    double H3P207_n_dew2019_g(double t, double p)
    double H3P207_n_dew2019_dgdt(double t, double p)
    double H3P207_n_dew2019_dgdp(double t, double p)
    double H3P207_n_dew2019_d2gdt2(double t, double p)
    double H3P207_n_dew2019_d2gdtdp(double t, double p)
    double H3P207_n_dew2019_d2gdp2(double t, double p)
    double H3P207_n_dew2019_d3gdt3(double t, double p)
    double H3P207_n_dew2019_d3gdt2dp(double t, double p)
    double H3P207_n_dew2019_d3gdtdp2(double t, double p)
    double H3P207_n_dew2019_d3gdp3(double t, double p)
    double H3P207_n_dew2019_s(double t, double p)
    double H3P207_n_dew2019_v(double t, double p)
    double H3P207_n_dew2019_cv(double t, double p)
    double H3P207_n_dew2019_cp(double t, double p)
    double H3P207_n_dew2019_dcpdt(double t, double p)
    double H3P207_n_dew2019_alpha(double t, double p)
    double H3P207_n_dew2019_beta(double t, double p)
    double H3P207_n_dew2019_K(double t, double p)
    double H3P207_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H3P207_n_dew2019_identifier():
    result = <bytes> H3P207_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_H3P207_n_dew2019_name():
    result = <bytes> H3P207_n_dew2019_name()
    return result.decode('UTF-8')
def cy_H3P207_n_dew2019_formula():
    result = <bytes> H3P207_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_H3P207_n_dew2019_mw():
    result = H3P207_n_dew2019_mw()
    return result
def cy_H3P207_n_dew2019_elements():
    cdef const double *e = H3P207_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H3P207_n_dew2019_g(double t, double p):
    result = H3P207_n_dew2019_g(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_dgdt(double t, double p):
    result = H3P207_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_dgdp(double t, double p):
    result = H3P207_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_d2gdt2(double t, double p):
    result = H3P207_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_d2gdtdp(double t, double p):
    result = H3P207_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_d2gdp2(double t, double p):
    result = H3P207_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_d3gdt3(double t, double p):
    result = H3P207_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_d3gdt2dp(double t, double p):
    result = H3P207_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_d3gdtdp2(double t, double p):
    result = H3P207_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_d3gdp3(double t, double p):
    result = H3P207_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_s(double t, double p):
    result = H3P207_n_dew2019_s(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_v(double t, double p):
    result = H3P207_n_dew2019_v(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_cv(double t, double p):
    result = H3P207_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_cp(double t, double p):
    result = H3P207_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_dcpdt(double t, double p):
    result = H3P207_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_alpha(double t, double p):
    result = H3P207_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_beta(double t, double p):
    result = H3P207_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_K(double t, double p):
    result = H3P207_n_dew2019_K(<double> t, <double> p)
    return result
def cy_H3P207_n_dew2019_Kp(double t, double p):
    result = H3P207_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H2VO4_n_dew2019_calc.h":
    const char *H2VO4_n_dew2019_identifier();
    const char *H2VO4_n_dew2019_name();
    const char *H2VO4_n_dew2019_formula();
    const double H2VO4_n_dew2019_mw();
    const double *H2VO4_n_dew2019_elements();
    double H2VO4_n_dew2019_g(double t, double p)
    double H2VO4_n_dew2019_dgdt(double t, double p)
    double H2VO4_n_dew2019_dgdp(double t, double p)
    double H2VO4_n_dew2019_d2gdt2(double t, double p)
    double H2VO4_n_dew2019_d2gdtdp(double t, double p)
    double H2VO4_n_dew2019_d2gdp2(double t, double p)
    double H2VO4_n_dew2019_d3gdt3(double t, double p)
    double H2VO4_n_dew2019_d3gdt2dp(double t, double p)
    double H2VO4_n_dew2019_d3gdtdp2(double t, double p)
    double H2VO4_n_dew2019_d3gdp3(double t, double p)
    double H2VO4_n_dew2019_s(double t, double p)
    double H2VO4_n_dew2019_v(double t, double p)
    double H2VO4_n_dew2019_cv(double t, double p)
    double H2VO4_n_dew2019_cp(double t, double p)
    double H2VO4_n_dew2019_dcpdt(double t, double p)
    double H2VO4_n_dew2019_alpha(double t, double p)
    double H2VO4_n_dew2019_beta(double t, double p)
    double H2VO4_n_dew2019_K(double t, double p)
    double H2VO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H2VO4_n_dew2019_identifier():
    result = <bytes> H2VO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_H2VO4_n_dew2019_name():
    result = <bytes> H2VO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_H2VO4_n_dew2019_formula():
    result = <bytes> H2VO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_H2VO4_n_dew2019_mw():
    result = H2VO4_n_dew2019_mw()
    return result
def cy_H2VO4_n_dew2019_elements():
    cdef const double *e = H2VO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H2VO4_n_dew2019_g(double t, double p):
    result = H2VO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_dgdt(double t, double p):
    result = H2VO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_dgdp(double t, double p):
    result = H2VO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_d2gdt2(double t, double p):
    result = H2VO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_d2gdtdp(double t, double p):
    result = H2VO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_d2gdp2(double t, double p):
    result = H2VO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_d3gdt3(double t, double p):
    result = H2VO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_d3gdt2dp(double t, double p):
    result = H2VO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_d3gdtdp2(double t, double p):
    result = H2VO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_d3gdp3(double t, double p):
    result = H2VO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_s(double t, double p):
    result = H2VO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_v(double t, double p):
    result = H2VO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_cv(double t, double p):
    result = H2VO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_cp(double t, double p):
    result = H2VO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_dcpdt(double t, double p):
    result = H2VO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_alpha(double t, double p):
    result = H2VO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_beta(double t, double p):
    result = H2VO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_K(double t, double p):
    result = H2VO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_H2VO4_n_dew2019_Kp(double t, double p):
    result = H2VO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H2S_l_AQ_r__dew2019_calc.h":
    const char *H2S_l_AQ_r__dew2019_identifier();
    const char *H2S_l_AQ_r__dew2019_name();
    const char *H2S_l_AQ_r__dew2019_formula();
    const double H2S_l_AQ_r__dew2019_mw();
    const double *H2S_l_AQ_r__dew2019_elements();
    double H2S_l_AQ_r__dew2019_g(double t, double p)
    double H2S_l_AQ_r__dew2019_dgdt(double t, double p)
    double H2S_l_AQ_r__dew2019_dgdp(double t, double p)
    double H2S_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double H2S_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double H2S_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double H2S_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double H2S_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double H2S_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double H2S_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double H2S_l_AQ_r__dew2019_s(double t, double p)
    double H2S_l_AQ_r__dew2019_v(double t, double p)
    double H2S_l_AQ_r__dew2019_cv(double t, double p)
    double H2S_l_AQ_r__dew2019_cp(double t, double p)
    double H2S_l_AQ_r__dew2019_dcpdt(double t, double p)
    double H2S_l_AQ_r__dew2019_alpha(double t, double p)
    double H2S_l_AQ_r__dew2019_beta(double t, double p)
    double H2S_l_AQ_r__dew2019_K(double t, double p)
    double H2S_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H2S_l_AQ_r__dew2019_identifier():
    result = <bytes> H2S_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_H2S_l_AQ_r__dew2019_name():
    result = <bytes> H2S_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_H2S_l_AQ_r__dew2019_formula():
    result = <bytes> H2S_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_H2S_l_AQ_r__dew2019_mw():
    result = H2S_l_AQ_r__dew2019_mw()
    return result
def cy_H2S_l_AQ_r__dew2019_elements():
    cdef const double *e = H2S_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H2S_l_AQ_r__dew2019_g(double t, double p):
    result = H2S_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_dgdt(double t, double p):
    result = H2S_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_dgdp(double t, double p):
    result = H2S_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = H2S_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = H2S_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = H2S_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = H2S_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = H2S_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = H2S_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = H2S_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_s(double t, double p):
    result = H2S_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_v(double t, double p):
    result = H2S_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_cv(double t, double p):
    result = H2S_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_cp(double t, double p):
    result = H2S_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = H2S_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_alpha(double t, double p):
    result = H2S_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_beta(double t, double p):
    result = H2S_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_K(double t, double p):
    result = H2S_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_H2S_l_AQ_r__dew2019_Kp(double t, double p):
    result = H2S_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H2PO4_n_dew2019_calc.h":
    const char *H2PO4_n_dew2019_identifier();
    const char *H2PO4_n_dew2019_name();
    const char *H2PO4_n_dew2019_formula();
    const double H2PO4_n_dew2019_mw();
    const double *H2PO4_n_dew2019_elements();
    double H2PO4_n_dew2019_g(double t, double p)
    double H2PO4_n_dew2019_dgdt(double t, double p)
    double H2PO4_n_dew2019_dgdp(double t, double p)
    double H2PO4_n_dew2019_d2gdt2(double t, double p)
    double H2PO4_n_dew2019_d2gdtdp(double t, double p)
    double H2PO4_n_dew2019_d2gdp2(double t, double p)
    double H2PO4_n_dew2019_d3gdt3(double t, double p)
    double H2PO4_n_dew2019_d3gdt2dp(double t, double p)
    double H2PO4_n_dew2019_d3gdtdp2(double t, double p)
    double H2PO4_n_dew2019_d3gdp3(double t, double p)
    double H2PO4_n_dew2019_s(double t, double p)
    double H2PO4_n_dew2019_v(double t, double p)
    double H2PO4_n_dew2019_cv(double t, double p)
    double H2PO4_n_dew2019_cp(double t, double p)
    double H2PO4_n_dew2019_dcpdt(double t, double p)
    double H2PO4_n_dew2019_alpha(double t, double p)
    double H2PO4_n_dew2019_beta(double t, double p)
    double H2PO4_n_dew2019_K(double t, double p)
    double H2PO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H2PO4_n_dew2019_identifier():
    result = <bytes> H2PO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_H2PO4_n_dew2019_name():
    result = <bytes> H2PO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_H2PO4_n_dew2019_formula():
    result = <bytes> H2PO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_H2PO4_n_dew2019_mw():
    result = H2PO4_n_dew2019_mw()
    return result
def cy_H2PO4_n_dew2019_elements():
    cdef const double *e = H2PO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H2PO4_n_dew2019_g(double t, double p):
    result = H2PO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_dgdt(double t, double p):
    result = H2PO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_dgdp(double t, double p):
    result = H2PO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_d2gdt2(double t, double p):
    result = H2PO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_d2gdtdp(double t, double p):
    result = H2PO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_d2gdp2(double t, double p):
    result = H2PO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_d3gdt3(double t, double p):
    result = H2PO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_d3gdt2dp(double t, double p):
    result = H2PO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_d3gdtdp2(double t, double p):
    result = H2PO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_d3gdp3(double t, double p):
    result = H2PO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_s(double t, double p):
    result = H2PO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_v(double t, double p):
    result = H2PO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_cv(double t, double p):
    result = H2PO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_cp(double t, double p):
    result = H2PO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_dcpdt(double t, double p):
    result = H2PO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_alpha(double t, double p):
    result = H2PO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_beta(double t, double p):
    result = H2PO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_K(double t, double p):
    result = H2PO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_H2PO4_n_dew2019_Kp(double t, double p):
    result = H2PO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H2P2O7_n2_dew2019_calc.h":
    const char *H2P2O7_n2_dew2019_identifier();
    const char *H2P2O7_n2_dew2019_name();
    const char *H2P2O7_n2_dew2019_formula();
    const double H2P2O7_n2_dew2019_mw();
    const double *H2P2O7_n2_dew2019_elements();
    double H2P2O7_n2_dew2019_g(double t, double p)
    double H2P2O7_n2_dew2019_dgdt(double t, double p)
    double H2P2O7_n2_dew2019_dgdp(double t, double p)
    double H2P2O7_n2_dew2019_d2gdt2(double t, double p)
    double H2P2O7_n2_dew2019_d2gdtdp(double t, double p)
    double H2P2O7_n2_dew2019_d2gdp2(double t, double p)
    double H2P2O7_n2_dew2019_d3gdt3(double t, double p)
    double H2P2O7_n2_dew2019_d3gdt2dp(double t, double p)
    double H2P2O7_n2_dew2019_d3gdtdp2(double t, double p)
    double H2P2O7_n2_dew2019_d3gdp3(double t, double p)
    double H2P2O7_n2_dew2019_s(double t, double p)
    double H2P2O7_n2_dew2019_v(double t, double p)
    double H2P2O7_n2_dew2019_cv(double t, double p)
    double H2P2O7_n2_dew2019_cp(double t, double p)
    double H2P2O7_n2_dew2019_dcpdt(double t, double p)
    double H2P2O7_n2_dew2019_alpha(double t, double p)
    double H2P2O7_n2_dew2019_beta(double t, double p)
    double H2P2O7_n2_dew2019_K(double t, double p)
    double H2P2O7_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H2P2O7_n2_dew2019_identifier():
    result = <bytes> H2P2O7_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_H2P2O7_n2_dew2019_name():
    result = <bytes> H2P2O7_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_H2P2O7_n2_dew2019_formula():
    result = <bytes> H2P2O7_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_H2P2O7_n2_dew2019_mw():
    result = H2P2O7_n2_dew2019_mw()
    return result
def cy_H2P2O7_n2_dew2019_elements():
    cdef const double *e = H2P2O7_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H2P2O7_n2_dew2019_g(double t, double p):
    result = H2P2O7_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_dgdt(double t, double p):
    result = H2P2O7_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_dgdp(double t, double p):
    result = H2P2O7_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_d2gdt2(double t, double p):
    result = H2P2O7_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_d2gdtdp(double t, double p):
    result = H2P2O7_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_d2gdp2(double t, double p):
    result = H2P2O7_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_d3gdt3(double t, double p):
    result = H2P2O7_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_d3gdt2dp(double t, double p):
    result = H2P2O7_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_d3gdtdp2(double t, double p):
    result = H2P2O7_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_d3gdp3(double t, double p):
    result = H2P2O7_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_s(double t, double p):
    result = H2P2O7_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_v(double t, double p):
    result = H2P2O7_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_cv(double t, double p):
    result = H2P2O7_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_cp(double t, double p):
    result = H2P2O7_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_dcpdt(double t, double p):
    result = H2P2O7_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_alpha(double t, double p):
    result = H2P2O7_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_beta(double t, double p):
    result = H2P2O7_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_K(double t, double p):
    result = H2P2O7_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_H2P2O7_n2_dew2019_Kp(double t, double p):
    result = H2P2O7_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H2CO3_l_AQ_r__dew2019_calc.h":
    const char *H2CO3_l_AQ_r__dew2019_identifier();
    const char *H2CO3_l_AQ_r__dew2019_name();
    const char *H2CO3_l_AQ_r__dew2019_formula();
    const double H2CO3_l_AQ_r__dew2019_mw();
    const double *H2CO3_l_AQ_r__dew2019_elements();
    double H2CO3_l_AQ_r__dew2019_g(double t, double p)
    double H2CO3_l_AQ_r__dew2019_dgdt(double t, double p)
    double H2CO3_l_AQ_r__dew2019_dgdp(double t, double p)
    double H2CO3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double H2CO3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double H2CO3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double H2CO3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double H2CO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double H2CO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double H2CO3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double H2CO3_l_AQ_r__dew2019_s(double t, double p)
    double H2CO3_l_AQ_r__dew2019_v(double t, double p)
    double H2CO3_l_AQ_r__dew2019_cv(double t, double p)
    double H2CO3_l_AQ_r__dew2019_cp(double t, double p)
    double H2CO3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double H2CO3_l_AQ_r__dew2019_alpha(double t, double p)
    double H2CO3_l_AQ_r__dew2019_beta(double t, double p)
    double H2CO3_l_AQ_r__dew2019_K(double t, double p)
    double H2CO3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H2CO3_l_AQ_r__dew2019_identifier():
    result = <bytes> H2CO3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_H2CO3_l_AQ_r__dew2019_name():
    result = <bytes> H2CO3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_H2CO3_l_AQ_r__dew2019_formula():
    result = <bytes> H2CO3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_H2CO3_l_AQ_r__dew2019_mw():
    result = H2CO3_l_AQ_r__dew2019_mw()
    return result
def cy_H2CO3_l_AQ_r__dew2019_elements():
    cdef const double *e = H2CO3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H2CO3_l_AQ_r__dew2019_g(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_s(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_v(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_cv(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_cp(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_alpha(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_beta(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_K(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_H2CO3_l_AQ_r__dew2019_Kp(double t, double p):
    result = H2CO3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H2ASO4_n_dew2019_calc.h":
    const char *H2ASO4_n_dew2019_identifier();
    const char *H2ASO4_n_dew2019_name();
    const char *H2ASO4_n_dew2019_formula();
    const double H2ASO4_n_dew2019_mw();
    const double *H2ASO4_n_dew2019_elements();
    double H2ASO4_n_dew2019_g(double t, double p)
    double H2ASO4_n_dew2019_dgdt(double t, double p)
    double H2ASO4_n_dew2019_dgdp(double t, double p)
    double H2ASO4_n_dew2019_d2gdt2(double t, double p)
    double H2ASO4_n_dew2019_d2gdtdp(double t, double p)
    double H2ASO4_n_dew2019_d2gdp2(double t, double p)
    double H2ASO4_n_dew2019_d3gdt3(double t, double p)
    double H2ASO4_n_dew2019_d3gdt2dp(double t, double p)
    double H2ASO4_n_dew2019_d3gdtdp2(double t, double p)
    double H2ASO4_n_dew2019_d3gdp3(double t, double p)
    double H2ASO4_n_dew2019_s(double t, double p)
    double H2ASO4_n_dew2019_v(double t, double p)
    double H2ASO4_n_dew2019_cv(double t, double p)
    double H2ASO4_n_dew2019_cp(double t, double p)
    double H2ASO4_n_dew2019_dcpdt(double t, double p)
    double H2ASO4_n_dew2019_alpha(double t, double p)
    double H2ASO4_n_dew2019_beta(double t, double p)
    double H2ASO4_n_dew2019_K(double t, double p)
    double H2ASO4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H2ASO4_n_dew2019_identifier():
    result = <bytes> H2ASO4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_H2ASO4_n_dew2019_name():
    result = <bytes> H2ASO4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_H2ASO4_n_dew2019_formula():
    result = <bytes> H2ASO4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_H2ASO4_n_dew2019_mw():
    result = H2ASO4_n_dew2019_mw()
    return result
def cy_H2ASO4_n_dew2019_elements():
    cdef const double *e = H2ASO4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H2ASO4_n_dew2019_g(double t, double p):
    result = H2ASO4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_dgdt(double t, double p):
    result = H2ASO4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_dgdp(double t, double p):
    result = H2ASO4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_d2gdt2(double t, double p):
    result = H2ASO4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_d2gdtdp(double t, double p):
    result = H2ASO4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_d2gdp2(double t, double p):
    result = H2ASO4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_d3gdt3(double t, double p):
    result = H2ASO4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_d3gdt2dp(double t, double p):
    result = H2ASO4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_d3gdtdp2(double t, double p):
    result = H2ASO4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_d3gdp3(double t, double p):
    result = H2ASO4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_s(double t, double p):
    result = H2ASO4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_v(double t, double p):
    result = H2ASO4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_cv(double t, double p):
    result = H2ASO4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_cp(double t, double p):
    result = H2ASO4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_dcpdt(double t, double p):
    result = H2ASO4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_alpha(double t, double p):
    result = H2ASO4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_beta(double t, double p):
    result = H2ASO4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_K(double t, double p):
    result = H2ASO4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_H2ASO4_n_dew2019_Kp(double t, double p):
    result = H2ASO4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H2ASO3_n_dew2019_calc.h":
    const char *H2ASO3_n_dew2019_identifier();
    const char *H2ASO3_n_dew2019_name();
    const char *H2ASO3_n_dew2019_formula();
    const double H2ASO3_n_dew2019_mw();
    const double *H2ASO3_n_dew2019_elements();
    double H2ASO3_n_dew2019_g(double t, double p)
    double H2ASO3_n_dew2019_dgdt(double t, double p)
    double H2ASO3_n_dew2019_dgdp(double t, double p)
    double H2ASO3_n_dew2019_d2gdt2(double t, double p)
    double H2ASO3_n_dew2019_d2gdtdp(double t, double p)
    double H2ASO3_n_dew2019_d2gdp2(double t, double p)
    double H2ASO3_n_dew2019_d3gdt3(double t, double p)
    double H2ASO3_n_dew2019_d3gdt2dp(double t, double p)
    double H2ASO3_n_dew2019_d3gdtdp2(double t, double p)
    double H2ASO3_n_dew2019_d3gdp3(double t, double p)
    double H2ASO3_n_dew2019_s(double t, double p)
    double H2ASO3_n_dew2019_v(double t, double p)
    double H2ASO3_n_dew2019_cv(double t, double p)
    double H2ASO3_n_dew2019_cp(double t, double p)
    double H2ASO3_n_dew2019_dcpdt(double t, double p)
    double H2ASO3_n_dew2019_alpha(double t, double p)
    double H2ASO3_n_dew2019_beta(double t, double p)
    double H2ASO3_n_dew2019_K(double t, double p)
    double H2ASO3_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H2ASO3_n_dew2019_identifier():
    result = <bytes> H2ASO3_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_H2ASO3_n_dew2019_name():
    result = <bytes> H2ASO3_n_dew2019_name()
    return result.decode('UTF-8')
def cy_H2ASO3_n_dew2019_formula():
    result = <bytes> H2ASO3_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_H2ASO3_n_dew2019_mw():
    result = H2ASO3_n_dew2019_mw()
    return result
def cy_H2ASO3_n_dew2019_elements():
    cdef const double *e = H2ASO3_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H2ASO3_n_dew2019_g(double t, double p):
    result = H2ASO3_n_dew2019_g(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_dgdt(double t, double p):
    result = H2ASO3_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_dgdp(double t, double p):
    result = H2ASO3_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_d2gdt2(double t, double p):
    result = H2ASO3_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_d2gdtdp(double t, double p):
    result = H2ASO3_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_d2gdp2(double t, double p):
    result = H2ASO3_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_d3gdt3(double t, double p):
    result = H2ASO3_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_d3gdt2dp(double t, double p):
    result = H2ASO3_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_d3gdtdp2(double t, double p):
    result = H2ASO3_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_d3gdp3(double t, double p):
    result = H2ASO3_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_s(double t, double p):
    result = H2ASO3_n_dew2019_s(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_v(double t, double p):
    result = H2ASO3_n_dew2019_v(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_cv(double t, double p):
    result = H2ASO3_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_cp(double t, double p):
    result = H2ASO3_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_dcpdt(double t, double p):
    result = H2ASO3_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_alpha(double t, double p):
    result = H2ASO3_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_beta(double t, double p):
    result = H2ASO3_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_K(double t, double p):
    result = H2ASO3_n_dew2019_K(<double> t, <double> p)
    return result
def cy_H2ASO3_n_dew2019_Kp(double t, double p):
    result = H2ASO3_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H2_l_AQ_r__dew2019_calc.h":
    const char *H2_l_AQ_r__dew2019_identifier();
    const char *H2_l_AQ_r__dew2019_name();
    const char *H2_l_AQ_r__dew2019_formula();
    const double H2_l_AQ_r__dew2019_mw();
    const double *H2_l_AQ_r__dew2019_elements();
    double H2_l_AQ_r__dew2019_g(double t, double p)
    double H2_l_AQ_r__dew2019_dgdt(double t, double p)
    double H2_l_AQ_r__dew2019_dgdp(double t, double p)
    double H2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double H2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double H2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double H2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double H2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double H2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double H2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double H2_l_AQ_r__dew2019_s(double t, double p)
    double H2_l_AQ_r__dew2019_v(double t, double p)
    double H2_l_AQ_r__dew2019_cv(double t, double p)
    double H2_l_AQ_r__dew2019_cp(double t, double p)
    double H2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double H2_l_AQ_r__dew2019_alpha(double t, double p)
    double H2_l_AQ_r__dew2019_beta(double t, double p)
    double H2_l_AQ_r__dew2019_K(double t, double p)
    double H2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H2_l_AQ_r__dew2019_identifier():
    result = <bytes> H2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_H2_l_AQ_r__dew2019_name():
    result = <bytes> H2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_H2_l_AQ_r__dew2019_formula():
    result = <bytes> H2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_H2_l_AQ_r__dew2019_mw():
    result = H2_l_AQ_r__dew2019_mw()
    return result
def cy_H2_l_AQ_r__dew2019_elements():
    cdef const double *e = H2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H2_l_AQ_r__dew2019_g(double t, double p):
    result = H2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = H2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = H2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = H2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = H2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = H2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = H2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = H2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = H2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = H2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_s(double t, double p):
    result = H2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_v(double t, double p):
    result = H2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_cv(double t, double p):
    result = H2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_cp(double t, double p):
    result = H2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = H2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_alpha(double t, double p):
    result = H2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_beta(double t, double p):
    result = H2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_K(double t, double p):
    result = H2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_H2_l_AQ_r__dew2019_Kp(double t, double p):
    result = H2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H_p_dew2019_calc.h":
    const char *H_p_dew2019_identifier();
    const char *H_p_dew2019_name();
    const char *H_p_dew2019_formula();
    const double H_p_dew2019_mw();
    const double *H_p_dew2019_elements();
    double H_p_dew2019_g(double t, double p)
    double H_p_dew2019_dgdt(double t, double p)
    double H_p_dew2019_dgdp(double t, double p)
    double H_p_dew2019_d2gdt2(double t, double p)
    double H_p_dew2019_d2gdtdp(double t, double p)
    double H_p_dew2019_d2gdp2(double t, double p)
    double H_p_dew2019_d3gdt3(double t, double p)
    double H_p_dew2019_d3gdt2dp(double t, double p)
    double H_p_dew2019_d3gdtdp2(double t, double p)
    double H_p_dew2019_d3gdp3(double t, double p)
    double H_p_dew2019_s(double t, double p)
    double H_p_dew2019_v(double t, double p)
    double H_p_dew2019_cv(double t, double p)
    double H_p_dew2019_cp(double t, double p)
    double H_p_dew2019_dcpdt(double t, double p)
    double H_p_dew2019_alpha(double t, double p)
    double H_p_dew2019_beta(double t, double p)
    double H_p_dew2019_K(double t, double p)
    double H_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H_p_dew2019_identifier():
    result = <bytes> H_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_H_p_dew2019_name():
    result = <bytes> H_p_dew2019_name()
    return result.decode('UTF-8')
def cy_H_p_dew2019_formula():
    result = <bytes> H_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_H_p_dew2019_mw():
    result = H_p_dew2019_mw()
    return result
def cy_H_p_dew2019_elements():
    cdef const double *e = H_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H_p_dew2019_g(double t, double p):
    result = H_p_dew2019_g(<double> t, <double> p)
    return result
def cy_H_p_dew2019_dgdt(double t, double p):
    result = H_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H_p_dew2019_dgdp(double t, double p):
    result = H_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H_p_dew2019_d2gdt2(double t, double p):
    result = H_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H_p_dew2019_d2gdtdp(double t, double p):
    result = H_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H_p_dew2019_d2gdp2(double t, double p):
    result = H_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H_p_dew2019_d3gdt3(double t, double p):
    result = H_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H_p_dew2019_d3gdt2dp(double t, double p):
    result = H_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H_p_dew2019_d3gdtdp2(double t, double p):
    result = H_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H_p_dew2019_d3gdp3(double t, double p):
    result = H_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H_p_dew2019_s(double t, double p):
    result = H_p_dew2019_s(<double> t, <double> p)
    return result
def cy_H_p_dew2019_v(double t, double p):
    result = H_p_dew2019_v(<double> t, <double> p)
    return result
def cy_H_p_dew2019_cv(double t, double p):
    result = H_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_H_p_dew2019_cp(double t, double p):
    result = H_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_H_p_dew2019_dcpdt(double t, double p):
    result = H_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H_p_dew2019_alpha(double t, double p):
    result = H_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_H_p_dew2019_beta(double t, double p):
    result = H_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_H_p_dew2019_K(double t, double p):
    result = H_p_dew2019_K(<double> t, <double> p)
    return result
def cy_H_p_dew2019_Kp(double t, double p):
    result = H_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "H_SUCCINA_l_AQ_r__dew2019_calc.h":
    const char *H_SUCCINA_l_AQ_r__dew2019_identifier();
    const char *H_SUCCINA_l_AQ_r__dew2019_name();
    const char *H_SUCCINA_l_AQ_r__dew2019_formula();
    const double H_SUCCINA_l_AQ_r__dew2019_mw();
    const double *H_SUCCINA_l_AQ_r__dew2019_elements();
    double H_SUCCINA_l_AQ_r__dew2019_g(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_dgdt(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_dgdp(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_s(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_v(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_cv(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_cp(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_dcpdt(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_alpha(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_beta(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_K(double t, double p)
    double H_SUCCINA_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_H_SUCCINA_l_AQ_r__dew2019_identifier():
    result = <bytes> H_SUCCINA_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_H_SUCCINA_l_AQ_r__dew2019_name():
    result = <bytes> H_SUCCINA_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_H_SUCCINA_l_AQ_r__dew2019_formula():
    result = <bytes> H_SUCCINA_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_H_SUCCINA_l_AQ_r__dew2019_mw():
    result = H_SUCCINA_l_AQ_r__dew2019_mw()
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_elements():
    cdef const double *e = H_SUCCINA_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_H_SUCCINA_l_AQ_r__dew2019_g(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_dgdt(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_dgdp(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_s(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_v(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_cv(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_cp(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_alpha(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_beta(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_K(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_H_SUCCINA_l_AQ_r__dew2019_Kp(double t, double p):
    result = H_SUCCINA_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLYCOLIC_l_AQ_r__dew2019_calc.h":
    const char *GLYCOLIC_l_AQ_r__dew2019_identifier();
    const char *GLYCOLIC_l_AQ_r__dew2019_name();
    const char *GLYCOLIC_l_AQ_r__dew2019_formula();
    const double GLYCOLIC_l_AQ_r__dew2019_mw();
    const double *GLYCOLIC_l_AQ_r__dew2019_elements();
    double GLYCOLIC_l_AQ_r__dew2019_g(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_dgdt(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_dgdp(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_s(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_v(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_cv(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_cp(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_dcpdt(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_alpha(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_beta(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_K(double t, double p)
    double GLYCOLIC_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLYCOLIC_l_AQ_r__dew2019_identifier():
    result = <bytes> GLYCOLIC_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLYCOLIC_l_AQ_r__dew2019_name():
    result = <bytes> GLYCOLIC_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_GLYCOLIC_l_AQ_r__dew2019_formula():
    result = <bytes> GLYCOLIC_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_GLYCOLIC_l_AQ_r__dew2019_mw():
    result = GLYCOLIC_l_AQ_r__dew2019_mw()
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_elements():
    cdef const double *e = GLYCOLIC_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLYCOLIC_l_AQ_r__dew2019_g(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_dgdt(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_dgdp(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_s(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_v(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_cv(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_cp(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_alpha(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_beta(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_K(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_GLYCOLIC_l_AQ_r__dew2019_Kp(double t, double p):
    result = GLYCOLIC_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLYCOLATE_n_dew2019_calc.h":
    const char *GLYCOLATE_n_dew2019_identifier();
    const char *GLYCOLATE_n_dew2019_name();
    const char *GLYCOLATE_n_dew2019_formula();
    const double GLYCOLATE_n_dew2019_mw();
    const double *GLYCOLATE_n_dew2019_elements();
    double GLYCOLATE_n_dew2019_g(double t, double p)
    double GLYCOLATE_n_dew2019_dgdt(double t, double p)
    double GLYCOLATE_n_dew2019_dgdp(double t, double p)
    double GLYCOLATE_n_dew2019_d2gdt2(double t, double p)
    double GLYCOLATE_n_dew2019_d2gdtdp(double t, double p)
    double GLYCOLATE_n_dew2019_d2gdp2(double t, double p)
    double GLYCOLATE_n_dew2019_d3gdt3(double t, double p)
    double GLYCOLATE_n_dew2019_d3gdt2dp(double t, double p)
    double GLYCOLATE_n_dew2019_d3gdtdp2(double t, double p)
    double GLYCOLATE_n_dew2019_d3gdp3(double t, double p)
    double GLYCOLATE_n_dew2019_s(double t, double p)
    double GLYCOLATE_n_dew2019_v(double t, double p)
    double GLYCOLATE_n_dew2019_cv(double t, double p)
    double GLYCOLATE_n_dew2019_cp(double t, double p)
    double GLYCOLATE_n_dew2019_dcpdt(double t, double p)
    double GLYCOLATE_n_dew2019_alpha(double t, double p)
    double GLYCOLATE_n_dew2019_beta(double t, double p)
    double GLYCOLATE_n_dew2019_K(double t, double p)
    double GLYCOLATE_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLYCOLATE_n_dew2019_identifier():
    result = <bytes> GLYCOLATE_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLYCOLATE_n_dew2019_name():
    result = <bytes> GLYCOLATE_n_dew2019_name()
    return result.decode('UTF-8')
def cy_GLYCOLATE_n_dew2019_formula():
    result = <bytes> GLYCOLATE_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_GLYCOLATE_n_dew2019_mw():
    result = GLYCOLATE_n_dew2019_mw()
    return result
def cy_GLYCOLATE_n_dew2019_elements():
    cdef const double *e = GLYCOLATE_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLYCOLATE_n_dew2019_g(double t, double p):
    result = GLYCOLATE_n_dew2019_g(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_dgdt(double t, double p):
    result = GLYCOLATE_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_dgdp(double t, double p):
    result = GLYCOLATE_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_d2gdt2(double t, double p):
    result = GLYCOLATE_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_d2gdtdp(double t, double p):
    result = GLYCOLATE_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_d2gdp2(double t, double p):
    result = GLYCOLATE_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_d3gdt3(double t, double p):
    result = GLYCOLATE_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_d3gdt2dp(double t, double p):
    result = GLYCOLATE_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_d3gdtdp2(double t, double p):
    result = GLYCOLATE_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_d3gdp3(double t, double p):
    result = GLYCOLATE_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_s(double t, double p):
    result = GLYCOLATE_n_dew2019_s(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_v(double t, double p):
    result = GLYCOLATE_n_dew2019_v(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_cv(double t, double p):
    result = GLYCOLATE_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_cp(double t, double p):
    result = GLYCOLATE_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_dcpdt(double t, double p):
    result = GLYCOLATE_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_alpha(double t, double p):
    result = GLYCOLATE_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_beta(double t, double p):
    result = GLYCOLATE_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_K(double t, double p):
    result = GLYCOLATE_n_dew2019_K(<double> t, <double> p)
    return result
def cy_GLYCOLATE_n_dew2019_Kp(double t, double p):
    result = GLYCOLATE_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLYCINE_l_AQ_r__dew2019_calc.h":
    const char *GLYCINE_l_AQ_r__dew2019_identifier();
    const char *GLYCINE_l_AQ_r__dew2019_name();
    const char *GLYCINE_l_AQ_r__dew2019_formula();
    const double GLYCINE_l_AQ_r__dew2019_mw();
    const double *GLYCINE_l_AQ_r__dew2019_elements();
    double GLYCINE_l_AQ_r__dew2019_g(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_dgdt(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_dgdp(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_s(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_v(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_cv(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_cp(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_alpha(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_beta(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_K(double t, double p)
    double GLYCINE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLYCINE_l_AQ_r__dew2019_identifier():
    result = <bytes> GLYCINE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLYCINE_l_AQ_r__dew2019_name():
    result = <bytes> GLYCINE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_GLYCINE_l_AQ_r__dew2019_formula():
    result = <bytes> GLYCINE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_GLYCINE_l_AQ_r__dew2019_mw():
    result = GLYCINE_l_AQ_r__dew2019_mw()
    return result
def cy_GLYCINE_l_AQ_r__dew2019_elements():
    cdef const double *e = GLYCINE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLYCINE_l_AQ_r__dew2019_g(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_s(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_v(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_cv(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_cp(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_alpha(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_beta(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_K(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_GLYCINE_l_AQ_r__dew2019_Kp(double t, double p):
    result = GLYCINE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLYCINATE_n_dew2019_calc.h":
    const char *GLYCINATE_n_dew2019_identifier();
    const char *GLYCINATE_n_dew2019_name();
    const char *GLYCINATE_n_dew2019_formula();
    const double GLYCINATE_n_dew2019_mw();
    const double *GLYCINATE_n_dew2019_elements();
    double GLYCINATE_n_dew2019_g(double t, double p)
    double GLYCINATE_n_dew2019_dgdt(double t, double p)
    double GLYCINATE_n_dew2019_dgdp(double t, double p)
    double GLYCINATE_n_dew2019_d2gdt2(double t, double p)
    double GLYCINATE_n_dew2019_d2gdtdp(double t, double p)
    double GLYCINATE_n_dew2019_d2gdp2(double t, double p)
    double GLYCINATE_n_dew2019_d3gdt3(double t, double p)
    double GLYCINATE_n_dew2019_d3gdt2dp(double t, double p)
    double GLYCINATE_n_dew2019_d3gdtdp2(double t, double p)
    double GLYCINATE_n_dew2019_d3gdp3(double t, double p)
    double GLYCINATE_n_dew2019_s(double t, double p)
    double GLYCINATE_n_dew2019_v(double t, double p)
    double GLYCINATE_n_dew2019_cv(double t, double p)
    double GLYCINATE_n_dew2019_cp(double t, double p)
    double GLYCINATE_n_dew2019_dcpdt(double t, double p)
    double GLYCINATE_n_dew2019_alpha(double t, double p)
    double GLYCINATE_n_dew2019_beta(double t, double p)
    double GLYCINATE_n_dew2019_K(double t, double p)
    double GLYCINATE_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLYCINATE_n_dew2019_identifier():
    result = <bytes> GLYCINATE_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLYCINATE_n_dew2019_name():
    result = <bytes> GLYCINATE_n_dew2019_name()
    return result.decode('UTF-8')
def cy_GLYCINATE_n_dew2019_formula():
    result = <bytes> GLYCINATE_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_GLYCINATE_n_dew2019_mw():
    result = GLYCINATE_n_dew2019_mw()
    return result
def cy_GLYCINATE_n_dew2019_elements():
    cdef const double *e = GLYCINATE_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLYCINATE_n_dew2019_g(double t, double p):
    result = GLYCINATE_n_dew2019_g(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_dgdt(double t, double p):
    result = GLYCINATE_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_dgdp(double t, double p):
    result = GLYCINATE_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_d2gdt2(double t, double p):
    result = GLYCINATE_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_d2gdtdp(double t, double p):
    result = GLYCINATE_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_d2gdp2(double t, double p):
    result = GLYCINATE_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_d3gdt3(double t, double p):
    result = GLYCINATE_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_d3gdt2dp(double t, double p):
    result = GLYCINATE_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_d3gdtdp2(double t, double p):
    result = GLYCINATE_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_d3gdp3(double t, double p):
    result = GLYCINATE_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_s(double t, double p):
    result = GLYCINATE_n_dew2019_s(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_v(double t, double p):
    result = GLYCINATE_n_dew2019_v(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_cv(double t, double p):
    result = GLYCINATE_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_cp(double t, double p):
    result = GLYCINATE_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_dcpdt(double t, double p):
    result = GLYCINATE_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_alpha(double t, double p):
    result = GLYCINATE_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_beta(double t, double p):
    result = GLYCINATE_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_K(double t, double p):
    result = GLYCINATE_n_dew2019_K(<double> t, <double> p)
    return result
def cy_GLYCINATE_n_dew2019_Kp(double t, double p):
    result = GLYCINATE_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLUTARIC_l_AQ_r__dew2019_calc.h":
    const char *GLUTARIC_l_AQ_r__dew2019_identifier();
    const char *GLUTARIC_l_AQ_r__dew2019_name();
    const char *GLUTARIC_l_AQ_r__dew2019_formula();
    const double GLUTARIC_l_AQ_r__dew2019_mw();
    const double *GLUTARIC_l_AQ_r__dew2019_elements();
    double GLUTARIC_l_AQ_r__dew2019_g(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_dgdt(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_dgdp(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_s(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_v(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_cv(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_cp(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_dcpdt(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_alpha(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_beta(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_K(double t, double p)
    double GLUTARIC_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLUTARIC_l_AQ_r__dew2019_identifier():
    result = <bytes> GLUTARIC_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLUTARIC_l_AQ_r__dew2019_name():
    result = <bytes> GLUTARIC_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_GLUTARIC_l_AQ_r__dew2019_formula():
    result = <bytes> GLUTARIC_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_GLUTARIC_l_AQ_r__dew2019_mw():
    result = GLUTARIC_l_AQ_r__dew2019_mw()
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_elements():
    cdef const double *e = GLUTARIC_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLUTARIC_l_AQ_r__dew2019_g(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_dgdt(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_dgdp(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_s(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_v(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_cv(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_cp(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_alpha(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_beta(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_K(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_GLUTARIC_l_AQ_r__dew2019_Kp(double t, double p):
    result = GLUTARIC_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLUTARATE_n_dew2019_calc.h":
    const char *GLUTARATE_n_dew2019_identifier();
    const char *GLUTARATE_n_dew2019_name();
    const char *GLUTARATE_n_dew2019_formula();
    const double GLUTARATE_n_dew2019_mw();
    const double *GLUTARATE_n_dew2019_elements();
    double GLUTARATE_n_dew2019_g(double t, double p)
    double GLUTARATE_n_dew2019_dgdt(double t, double p)
    double GLUTARATE_n_dew2019_dgdp(double t, double p)
    double GLUTARATE_n_dew2019_d2gdt2(double t, double p)
    double GLUTARATE_n_dew2019_d2gdtdp(double t, double p)
    double GLUTARATE_n_dew2019_d2gdp2(double t, double p)
    double GLUTARATE_n_dew2019_d3gdt3(double t, double p)
    double GLUTARATE_n_dew2019_d3gdt2dp(double t, double p)
    double GLUTARATE_n_dew2019_d3gdtdp2(double t, double p)
    double GLUTARATE_n_dew2019_d3gdp3(double t, double p)
    double GLUTARATE_n_dew2019_s(double t, double p)
    double GLUTARATE_n_dew2019_v(double t, double p)
    double GLUTARATE_n_dew2019_cv(double t, double p)
    double GLUTARATE_n_dew2019_cp(double t, double p)
    double GLUTARATE_n_dew2019_dcpdt(double t, double p)
    double GLUTARATE_n_dew2019_alpha(double t, double p)
    double GLUTARATE_n_dew2019_beta(double t, double p)
    double GLUTARATE_n_dew2019_K(double t, double p)
    double GLUTARATE_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLUTARATE_n_dew2019_identifier():
    result = <bytes> GLUTARATE_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLUTARATE_n_dew2019_name():
    result = <bytes> GLUTARATE_n_dew2019_name()
    return result.decode('UTF-8')
def cy_GLUTARATE_n_dew2019_formula():
    result = <bytes> GLUTARATE_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_GLUTARATE_n_dew2019_mw():
    result = GLUTARATE_n_dew2019_mw()
    return result
def cy_GLUTARATE_n_dew2019_elements():
    cdef const double *e = GLUTARATE_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLUTARATE_n_dew2019_g(double t, double p):
    result = GLUTARATE_n_dew2019_g(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_dgdt(double t, double p):
    result = GLUTARATE_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_dgdp(double t, double p):
    result = GLUTARATE_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_d2gdt2(double t, double p):
    result = GLUTARATE_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_d2gdtdp(double t, double p):
    result = GLUTARATE_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_d2gdp2(double t, double p):
    result = GLUTARATE_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_d3gdt3(double t, double p):
    result = GLUTARATE_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_d3gdt2dp(double t, double p):
    result = GLUTARATE_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_d3gdtdp2(double t, double p):
    result = GLUTARATE_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_d3gdp3(double t, double p):
    result = GLUTARATE_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_s(double t, double p):
    result = GLUTARATE_n_dew2019_s(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_v(double t, double p):
    result = GLUTARATE_n_dew2019_v(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_cv(double t, double p):
    result = GLUTARATE_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_cp(double t, double p):
    result = GLUTARATE_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_dcpdt(double t, double p):
    result = GLUTARATE_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_alpha(double t, double p):
    result = GLUTARATE_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_beta(double t, double p):
    result = GLUTARATE_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_K(double t, double p):
    result = GLUTARATE_n_dew2019_K(<double> t, <double> p)
    return result
def cy_GLUTARATE_n_dew2019_Kp(double t, double p):
    result = GLUTARATE_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLUTAMINE_l_AQ_r__dew2019_calc.h":
    const char *GLUTAMINE_l_AQ_r__dew2019_identifier();
    const char *GLUTAMINE_l_AQ_r__dew2019_name();
    const char *GLUTAMINE_l_AQ_r__dew2019_formula();
    const double GLUTAMINE_l_AQ_r__dew2019_mw();
    const double *GLUTAMINE_l_AQ_r__dew2019_elements();
    double GLUTAMINE_l_AQ_r__dew2019_g(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_dgdt(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_dgdp(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_s(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_v(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_cv(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_cp(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_alpha(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_beta(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_K(double t, double p)
    double GLUTAMINE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLUTAMINE_l_AQ_r__dew2019_identifier():
    result = <bytes> GLUTAMINE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLUTAMINE_l_AQ_r__dew2019_name():
    result = <bytes> GLUTAMINE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_GLUTAMINE_l_AQ_r__dew2019_formula():
    result = <bytes> GLUTAMINE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_GLUTAMINE_l_AQ_r__dew2019_mw():
    result = GLUTAMINE_l_AQ_r__dew2019_mw()
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_elements():
    cdef const double *e = GLUTAMINE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLUTAMINE_l_AQ_r__dew2019_g(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_s(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_v(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_cv(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_cp(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_alpha(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_beta(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_K(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_GLUTAMINE_l_AQ_r__dew2019_Kp(double t, double p):
    result = GLUTAMINE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLUTAMIC_l_AQ_r__dew2019_calc.h":
    const char *GLUTAMIC_l_AQ_r__dew2019_identifier();
    const char *GLUTAMIC_l_AQ_r__dew2019_name();
    const char *GLUTAMIC_l_AQ_r__dew2019_formula();
    const double GLUTAMIC_l_AQ_r__dew2019_mw();
    const double *GLUTAMIC_l_AQ_r__dew2019_elements();
    double GLUTAMIC_l_AQ_r__dew2019_g(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_dgdt(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_dgdp(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_s(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_v(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_cv(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_cp(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_dcpdt(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_alpha(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_beta(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_K(double t, double p)
    double GLUTAMIC_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLUTAMIC_l_AQ_r__dew2019_identifier():
    result = <bytes> GLUTAMIC_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLUTAMIC_l_AQ_r__dew2019_name():
    result = <bytes> GLUTAMIC_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_GLUTAMIC_l_AQ_r__dew2019_formula():
    result = <bytes> GLUTAMIC_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_GLUTAMIC_l_AQ_r__dew2019_mw():
    result = GLUTAMIC_l_AQ_r__dew2019_mw()
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_elements():
    cdef const double *e = GLUTAMIC_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLUTAMIC_l_AQ_r__dew2019_g(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_dgdt(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_dgdp(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_s(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_v(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_cv(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_cp(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_alpha(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_beta(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_K(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_GLUTAMIC_l_AQ_r__dew2019_Kp(double t, double p):
    result = GLUTAMIC_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GLUTAMATE_n_dew2019_calc.h":
    const char *GLUTAMATE_n_dew2019_identifier();
    const char *GLUTAMATE_n_dew2019_name();
    const char *GLUTAMATE_n_dew2019_formula();
    const double GLUTAMATE_n_dew2019_mw();
    const double *GLUTAMATE_n_dew2019_elements();
    double GLUTAMATE_n_dew2019_g(double t, double p)
    double GLUTAMATE_n_dew2019_dgdt(double t, double p)
    double GLUTAMATE_n_dew2019_dgdp(double t, double p)
    double GLUTAMATE_n_dew2019_d2gdt2(double t, double p)
    double GLUTAMATE_n_dew2019_d2gdtdp(double t, double p)
    double GLUTAMATE_n_dew2019_d2gdp2(double t, double p)
    double GLUTAMATE_n_dew2019_d3gdt3(double t, double p)
    double GLUTAMATE_n_dew2019_d3gdt2dp(double t, double p)
    double GLUTAMATE_n_dew2019_d3gdtdp2(double t, double p)
    double GLUTAMATE_n_dew2019_d3gdp3(double t, double p)
    double GLUTAMATE_n_dew2019_s(double t, double p)
    double GLUTAMATE_n_dew2019_v(double t, double p)
    double GLUTAMATE_n_dew2019_cv(double t, double p)
    double GLUTAMATE_n_dew2019_cp(double t, double p)
    double GLUTAMATE_n_dew2019_dcpdt(double t, double p)
    double GLUTAMATE_n_dew2019_alpha(double t, double p)
    double GLUTAMATE_n_dew2019_beta(double t, double p)
    double GLUTAMATE_n_dew2019_K(double t, double p)
    double GLUTAMATE_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GLUTAMATE_n_dew2019_identifier():
    result = <bytes> GLUTAMATE_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_GLUTAMATE_n_dew2019_name():
    result = <bytes> GLUTAMATE_n_dew2019_name()
    return result.decode('UTF-8')
def cy_GLUTAMATE_n_dew2019_formula():
    result = <bytes> GLUTAMATE_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_GLUTAMATE_n_dew2019_mw():
    result = GLUTAMATE_n_dew2019_mw()
    return result
def cy_GLUTAMATE_n_dew2019_elements():
    cdef const double *e = GLUTAMATE_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GLUTAMATE_n_dew2019_g(double t, double p):
    result = GLUTAMATE_n_dew2019_g(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_dgdt(double t, double p):
    result = GLUTAMATE_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_dgdp(double t, double p):
    result = GLUTAMATE_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_d2gdt2(double t, double p):
    result = GLUTAMATE_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_d2gdtdp(double t, double p):
    result = GLUTAMATE_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_d2gdp2(double t, double p):
    result = GLUTAMATE_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_d3gdt3(double t, double p):
    result = GLUTAMATE_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_d3gdt2dp(double t, double p):
    result = GLUTAMATE_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_d3gdtdp2(double t, double p):
    result = GLUTAMATE_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_d3gdp3(double t, double p):
    result = GLUTAMATE_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_s(double t, double p):
    result = GLUTAMATE_n_dew2019_s(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_v(double t, double p):
    result = GLUTAMATE_n_dew2019_v(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_cv(double t, double p):
    result = GLUTAMATE_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_cp(double t, double p):
    result = GLUTAMATE_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_dcpdt(double t, double p):
    result = GLUTAMATE_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_alpha(double t, double p):
    result = GLUTAMATE_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_beta(double t, double p):
    result = GLUTAMATE_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_K(double t, double p):
    result = GLUTAMATE_n_dew2019_K(<double> t, <double> p)
    return result
def cy_GLUTAMATE_n_dew2019_Kp(double t, double p):
    result = GLUTAMATE_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GD_p3_dew2019_calc.h":
    const char *GD_p3_dew2019_identifier();
    const char *GD_p3_dew2019_name();
    const char *GD_p3_dew2019_formula();
    const double GD_p3_dew2019_mw();
    const double *GD_p3_dew2019_elements();
    double GD_p3_dew2019_g(double t, double p)
    double GD_p3_dew2019_dgdt(double t, double p)
    double GD_p3_dew2019_dgdp(double t, double p)
    double GD_p3_dew2019_d2gdt2(double t, double p)
    double GD_p3_dew2019_d2gdtdp(double t, double p)
    double GD_p3_dew2019_d2gdp2(double t, double p)
    double GD_p3_dew2019_d3gdt3(double t, double p)
    double GD_p3_dew2019_d3gdt2dp(double t, double p)
    double GD_p3_dew2019_d3gdtdp2(double t, double p)
    double GD_p3_dew2019_d3gdp3(double t, double p)
    double GD_p3_dew2019_s(double t, double p)
    double GD_p3_dew2019_v(double t, double p)
    double GD_p3_dew2019_cv(double t, double p)
    double GD_p3_dew2019_cp(double t, double p)
    double GD_p3_dew2019_dcpdt(double t, double p)
    double GD_p3_dew2019_alpha(double t, double p)
    double GD_p3_dew2019_beta(double t, double p)
    double GD_p3_dew2019_K(double t, double p)
    double GD_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GD_p3_dew2019_identifier():
    result = <bytes> GD_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_GD_p3_dew2019_name():
    result = <bytes> GD_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_GD_p3_dew2019_formula():
    result = <bytes> GD_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_GD_p3_dew2019_mw():
    result = GD_p3_dew2019_mw()
    return result
def cy_GD_p3_dew2019_elements():
    cdef const double *e = GD_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GD_p3_dew2019_g(double t, double p):
    result = GD_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_dgdt(double t, double p):
    result = GD_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_dgdp(double t, double p):
    result = GD_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_d2gdt2(double t, double p):
    result = GD_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_d2gdtdp(double t, double p):
    result = GD_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_d2gdp2(double t, double p):
    result = GD_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_d3gdt3(double t, double p):
    result = GD_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_d3gdt2dp(double t, double p):
    result = GD_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_d3gdtdp2(double t, double p):
    result = GD_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_d3gdp3(double t, double p):
    result = GD_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_s(double t, double p):
    result = GD_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_v(double t, double p):
    result = GD_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_cv(double t, double p):
    result = GD_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_cp(double t, double p):
    result = GD_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_dcpdt(double t, double p):
    result = GD_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_alpha(double t, double p):
    result = GD_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_beta(double t, double p):
    result = GD_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_K(double t, double p):
    result = GD_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_GD_p3_dew2019_Kp(double t, double p):
    result = GD_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "GA_p3_dew2019_calc.h":
    const char *GA_p3_dew2019_identifier();
    const char *GA_p3_dew2019_name();
    const char *GA_p3_dew2019_formula();
    const double GA_p3_dew2019_mw();
    const double *GA_p3_dew2019_elements();
    double GA_p3_dew2019_g(double t, double p)
    double GA_p3_dew2019_dgdt(double t, double p)
    double GA_p3_dew2019_dgdp(double t, double p)
    double GA_p3_dew2019_d2gdt2(double t, double p)
    double GA_p3_dew2019_d2gdtdp(double t, double p)
    double GA_p3_dew2019_d2gdp2(double t, double p)
    double GA_p3_dew2019_d3gdt3(double t, double p)
    double GA_p3_dew2019_d3gdt2dp(double t, double p)
    double GA_p3_dew2019_d3gdtdp2(double t, double p)
    double GA_p3_dew2019_d3gdp3(double t, double p)
    double GA_p3_dew2019_s(double t, double p)
    double GA_p3_dew2019_v(double t, double p)
    double GA_p3_dew2019_cv(double t, double p)
    double GA_p3_dew2019_cp(double t, double p)
    double GA_p3_dew2019_dcpdt(double t, double p)
    double GA_p3_dew2019_alpha(double t, double p)
    double GA_p3_dew2019_beta(double t, double p)
    double GA_p3_dew2019_K(double t, double p)
    double GA_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_GA_p3_dew2019_identifier():
    result = <bytes> GA_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_GA_p3_dew2019_name():
    result = <bytes> GA_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_GA_p3_dew2019_formula():
    result = <bytes> GA_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_GA_p3_dew2019_mw():
    result = GA_p3_dew2019_mw()
    return result
def cy_GA_p3_dew2019_elements():
    cdef const double *e = GA_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_GA_p3_dew2019_g(double t, double p):
    result = GA_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_dgdt(double t, double p):
    result = GA_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_dgdp(double t, double p):
    result = GA_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_d2gdt2(double t, double p):
    result = GA_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_d2gdtdp(double t, double p):
    result = GA_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_d2gdp2(double t, double p):
    result = GA_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_d3gdt3(double t, double p):
    result = GA_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_d3gdt2dp(double t, double p):
    result = GA_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_d3gdtdp2(double t, double p):
    result = GA_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_d3gdp3(double t, double p):
    result = GA_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_s(double t, double p):
    result = GA_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_v(double t, double p):
    result = GA_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_cv(double t, double p):
    result = GA_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_cp(double t, double p):
    result = GA_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_dcpdt(double t, double p):
    result = GA_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_alpha(double t, double p):
    result = GA_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_beta(double t, double p):
    result = GA_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_K(double t, double p):
    result = GA_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_GA_p3_dew2019_Kp(double t, double p):
    result = GA_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HCOOH_l_AQ_r__dew2019_calc.h":
    const char *HCOOH_l_AQ_r__dew2019_identifier();
    const char *HCOOH_l_AQ_r__dew2019_name();
    const char *HCOOH_l_AQ_r__dew2019_formula();
    const double HCOOH_l_AQ_r__dew2019_mw();
    const double *HCOOH_l_AQ_r__dew2019_elements();
    double HCOOH_l_AQ_r__dew2019_g(double t, double p)
    double HCOOH_l_AQ_r__dew2019_dgdt(double t, double p)
    double HCOOH_l_AQ_r__dew2019_dgdp(double t, double p)
    double HCOOH_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double HCOOH_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double HCOOH_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double HCOOH_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double HCOOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double HCOOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double HCOOH_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double HCOOH_l_AQ_r__dew2019_s(double t, double p)
    double HCOOH_l_AQ_r__dew2019_v(double t, double p)
    double HCOOH_l_AQ_r__dew2019_cv(double t, double p)
    double HCOOH_l_AQ_r__dew2019_cp(double t, double p)
    double HCOOH_l_AQ_r__dew2019_dcpdt(double t, double p)
    double HCOOH_l_AQ_r__dew2019_alpha(double t, double p)
    double HCOOH_l_AQ_r__dew2019_beta(double t, double p)
    double HCOOH_l_AQ_r__dew2019_K(double t, double p)
    double HCOOH_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HCOOH_l_AQ_r__dew2019_identifier():
    result = <bytes> HCOOH_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_HCOOH_l_AQ_r__dew2019_name():
    result = <bytes> HCOOH_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_HCOOH_l_AQ_r__dew2019_formula():
    result = <bytes> HCOOH_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_HCOOH_l_AQ_r__dew2019_mw():
    result = HCOOH_l_AQ_r__dew2019_mw()
    return result
def cy_HCOOH_l_AQ_r__dew2019_elements():
    cdef const double *e = HCOOH_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HCOOH_l_AQ_r__dew2019_g(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_dgdt(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_dgdp(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_s(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_v(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_cv(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_cp(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_alpha(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_beta(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_K(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_HCOOH_l_AQ_r__dew2019_Kp(double t, double p):
    result = HCOOH_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "HCOO_n_dew2019_calc.h":
    const char *HCOO_n_dew2019_identifier();
    const char *HCOO_n_dew2019_name();
    const char *HCOO_n_dew2019_formula();
    const double HCOO_n_dew2019_mw();
    const double *HCOO_n_dew2019_elements();
    double HCOO_n_dew2019_g(double t, double p)
    double HCOO_n_dew2019_dgdt(double t, double p)
    double HCOO_n_dew2019_dgdp(double t, double p)
    double HCOO_n_dew2019_d2gdt2(double t, double p)
    double HCOO_n_dew2019_d2gdtdp(double t, double p)
    double HCOO_n_dew2019_d2gdp2(double t, double p)
    double HCOO_n_dew2019_d3gdt3(double t, double p)
    double HCOO_n_dew2019_d3gdt2dp(double t, double p)
    double HCOO_n_dew2019_d3gdtdp2(double t, double p)
    double HCOO_n_dew2019_d3gdp3(double t, double p)
    double HCOO_n_dew2019_s(double t, double p)
    double HCOO_n_dew2019_v(double t, double p)
    double HCOO_n_dew2019_cv(double t, double p)
    double HCOO_n_dew2019_cp(double t, double p)
    double HCOO_n_dew2019_dcpdt(double t, double p)
    double HCOO_n_dew2019_alpha(double t, double p)
    double HCOO_n_dew2019_beta(double t, double p)
    double HCOO_n_dew2019_K(double t, double p)
    double HCOO_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_HCOO_n_dew2019_identifier():
    result = <bytes> HCOO_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_HCOO_n_dew2019_name():
    result = <bytes> HCOO_n_dew2019_name()
    return result.decode('UTF-8')
def cy_HCOO_n_dew2019_formula():
    result = <bytes> HCOO_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_HCOO_n_dew2019_mw():
    result = HCOO_n_dew2019_mw()
    return result
def cy_HCOO_n_dew2019_elements():
    cdef const double *e = HCOO_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_HCOO_n_dew2019_g(double t, double p):
    result = HCOO_n_dew2019_g(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_dgdt(double t, double p):
    result = HCOO_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_dgdp(double t, double p):
    result = HCOO_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_d2gdt2(double t, double p):
    result = HCOO_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_d2gdtdp(double t, double p):
    result = HCOO_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_d2gdp2(double t, double p):
    result = HCOO_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_d3gdt3(double t, double p):
    result = HCOO_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_d3gdt2dp(double t, double p):
    result = HCOO_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_d3gdtdp2(double t, double p):
    result = HCOO_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_d3gdp3(double t, double p):
    result = HCOO_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_s(double t, double p):
    result = HCOO_n_dew2019_s(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_v(double t, double p):
    result = HCOO_n_dew2019_v(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_cv(double t, double p):
    result = HCOO_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_cp(double t, double p):
    result = HCOO_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_dcpdt(double t, double p):
    result = HCOO_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_alpha(double t, double p):
    result = HCOO_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_beta(double t, double p):
    result = HCOO_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_K(double t, double p):
    result = HCOO_n_dew2019_K(<double> t, <double> p)
    return result
def cy_HCOO_n_dew2019_Kp(double t, double p):
    result = HCOO_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FE_l_OH_r_2_l_AQ_r__dew2019_calc.h":
    const char *FE_l_OH_r_2_l_AQ_r__dew2019_identifier();
    const char *FE_l_OH_r_2_l_AQ_r__dew2019_name();
    const char *FE_l_OH_r_2_l_AQ_r__dew2019_formula();
    const double FE_l_OH_r_2_l_AQ_r__dew2019_mw();
    const double *FE_l_OH_r_2_l_AQ_r__dew2019_elements();
    double FE_l_OH_r_2_l_AQ_r__dew2019_g(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_dgdt(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_dgdp(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_s(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_v(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_cv(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_cp(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_alpha(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_beta(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_K(double t, double p)
    double FE_l_OH_r_2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_identifier():
    result = <bytes> FE_l_OH_r_2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_name():
    result = <bytes> FE_l_OH_r_2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_formula():
    result = <bytes> FE_l_OH_r_2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_mw():
    result = FE_l_OH_r_2_l_AQ_r__dew2019_mw()
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_elements():
    cdef const double *e = FE_l_OH_r_2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_g(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_s(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_v(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_cv(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_cp(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_alpha(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_beta(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_K(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_FE_l_OH_r_2_l_AQ_r__dew2019_Kp(double t, double p):
    result = FE_l_OH_r_2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FECL4_n_dew2019_calc.h":
    const char *FECL4_n_dew2019_identifier();
    const char *FECL4_n_dew2019_name();
    const char *FECL4_n_dew2019_formula();
    const double FECL4_n_dew2019_mw();
    const double *FECL4_n_dew2019_elements();
    double FECL4_n_dew2019_g(double t, double p)
    double FECL4_n_dew2019_dgdt(double t, double p)
    double FECL4_n_dew2019_dgdp(double t, double p)
    double FECL4_n_dew2019_d2gdt2(double t, double p)
    double FECL4_n_dew2019_d2gdtdp(double t, double p)
    double FECL4_n_dew2019_d2gdp2(double t, double p)
    double FECL4_n_dew2019_d3gdt3(double t, double p)
    double FECL4_n_dew2019_d3gdt2dp(double t, double p)
    double FECL4_n_dew2019_d3gdtdp2(double t, double p)
    double FECL4_n_dew2019_d3gdp3(double t, double p)
    double FECL4_n_dew2019_s(double t, double p)
    double FECL4_n_dew2019_v(double t, double p)
    double FECL4_n_dew2019_cv(double t, double p)
    double FECL4_n_dew2019_cp(double t, double p)
    double FECL4_n_dew2019_dcpdt(double t, double p)
    double FECL4_n_dew2019_alpha(double t, double p)
    double FECL4_n_dew2019_beta(double t, double p)
    double FECL4_n_dew2019_K(double t, double p)
    double FECL4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FECL4_n_dew2019_identifier():
    result = <bytes> FECL4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FECL4_n_dew2019_name():
    result = <bytes> FECL4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_FECL4_n_dew2019_formula():
    result = <bytes> FECL4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_FECL4_n_dew2019_mw():
    result = FECL4_n_dew2019_mw()
    return result
def cy_FECL4_n_dew2019_elements():
    cdef const double *e = FECL4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FECL4_n_dew2019_g(double t, double p):
    result = FECL4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_dgdt(double t, double p):
    result = FECL4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_dgdp(double t, double p):
    result = FECL4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_d2gdt2(double t, double p):
    result = FECL4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_d2gdtdp(double t, double p):
    result = FECL4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_d2gdp2(double t, double p):
    result = FECL4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_d3gdt3(double t, double p):
    result = FECL4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_d3gdt2dp(double t, double p):
    result = FECL4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_d3gdtdp2(double t, double p):
    result = FECL4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_d3gdp3(double t, double p):
    result = FECL4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_s(double t, double p):
    result = FECL4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_v(double t, double p):
    result = FECL4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_cv(double t, double p):
    result = FECL4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_cp(double t, double p):
    result = FECL4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_dcpdt(double t, double p):
    result = FECL4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_alpha(double t, double p):
    result = FECL4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_beta(double t, double p):
    result = FECL4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_K(double t, double p):
    result = FECL4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_FECL4_n_dew2019_Kp(double t, double p):
    result = FECL4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FECL3_l_AQ_r__dew2019_calc.h":
    const char *FECL3_l_AQ_r__dew2019_identifier();
    const char *FECL3_l_AQ_r__dew2019_name();
    const char *FECL3_l_AQ_r__dew2019_formula();
    const double FECL3_l_AQ_r__dew2019_mw();
    const double *FECL3_l_AQ_r__dew2019_elements();
    double FECL3_l_AQ_r__dew2019_g(double t, double p)
    double FECL3_l_AQ_r__dew2019_dgdt(double t, double p)
    double FECL3_l_AQ_r__dew2019_dgdp(double t, double p)
    double FECL3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double FECL3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double FECL3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double FECL3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double FECL3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double FECL3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double FECL3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double FECL3_l_AQ_r__dew2019_s(double t, double p)
    double FECL3_l_AQ_r__dew2019_v(double t, double p)
    double FECL3_l_AQ_r__dew2019_cv(double t, double p)
    double FECL3_l_AQ_r__dew2019_cp(double t, double p)
    double FECL3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double FECL3_l_AQ_r__dew2019_alpha(double t, double p)
    double FECL3_l_AQ_r__dew2019_beta(double t, double p)
    double FECL3_l_AQ_r__dew2019_K(double t, double p)
    double FECL3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FECL3_l_AQ_r__dew2019_identifier():
    result = <bytes> FECL3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_FECL3_l_AQ_r__dew2019_name():
    result = <bytes> FECL3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_FECL3_l_AQ_r__dew2019_formula():
    result = <bytes> FECL3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_FECL3_l_AQ_r__dew2019_mw():
    result = FECL3_l_AQ_r__dew2019_mw()
    return result
def cy_FECL3_l_AQ_r__dew2019_elements():
    cdef const double *e = FECL3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FECL3_l_AQ_r__dew2019_g(double t, double p):
    result = FECL3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = FECL3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = FECL3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = FECL3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = FECL3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = FECL3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = FECL3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = FECL3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = FECL3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = FECL3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_s(double t, double p):
    result = FECL3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_v(double t, double p):
    result = FECL3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_cv(double t, double p):
    result = FECL3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_cp(double t, double p):
    result = FECL3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = FECL3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_alpha(double t, double p):
    result = FECL3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_beta(double t, double p):
    result = FECL3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_K(double t, double p):
    result = FECL3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_FECL3_l_AQ_r__dew2019_Kp(double t, double p):
    result = FECL3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FECL2_p_dew2019_calc.h":
    const char *FECL2_p_dew2019_identifier();
    const char *FECL2_p_dew2019_name();
    const char *FECL2_p_dew2019_formula();
    const double FECL2_p_dew2019_mw();
    const double *FECL2_p_dew2019_elements();
    double FECL2_p_dew2019_g(double t, double p)
    double FECL2_p_dew2019_dgdt(double t, double p)
    double FECL2_p_dew2019_dgdp(double t, double p)
    double FECL2_p_dew2019_d2gdt2(double t, double p)
    double FECL2_p_dew2019_d2gdtdp(double t, double p)
    double FECL2_p_dew2019_d2gdp2(double t, double p)
    double FECL2_p_dew2019_d3gdt3(double t, double p)
    double FECL2_p_dew2019_d3gdt2dp(double t, double p)
    double FECL2_p_dew2019_d3gdtdp2(double t, double p)
    double FECL2_p_dew2019_d3gdp3(double t, double p)
    double FECL2_p_dew2019_s(double t, double p)
    double FECL2_p_dew2019_v(double t, double p)
    double FECL2_p_dew2019_cv(double t, double p)
    double FECL2_p_dew2019_cp(double t, double p)
    double FECL2_p_dew2019_dcpdt(double t, double p)
    double FECL2_p_dew2019_alpha(double t, double p)
    double FECL2_p_dew2019_beta(double t, double p)
    double FECL2_p_dew2019_K(double t, double p)
    double FECL2_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FECL2_p_dew2019_identifier():
    result = <bytes> FECL2_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FECL2_p_dew2019_name():
    result = <bytes> FECL2_p_dew2019_name()
    return result.decode('UTF-8')
def cy_FECL2_p_dew2019_formula():
    result = <bytes> FECL2_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_FECL2_p_dew2019_mw():
    result = FECL2_p_dew2019_mw()
    return result
def cy_FECL2_p_dew2019_elements():
    cdef const double *e = FECL2_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FECL2_p_dew2019_g(double t, double p):
    result = FECL2_p_dew2019_g(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_dgdt(double t, double p):
    result = FECL2_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_dgdp(double t, double p):
    result = FECL2_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_d2gdt2(double t, double p):
    result = FECL2_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_d2gdtdp(double t, double p):
    result = FECL2_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_d2gdp2(double t, double p):
    result = FECL2_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_d3gdt3(double t, double p):
    result = FECL2_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_d3gdt2dp(double t, double p):
    result = FECL2_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_d3gdtdp2(double t, double p):
    result = FECL2_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_d3gdp3(double t, double p):
    result = FECL2_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_s(double t, double p):
    result = FECL2_p_dew2019_s(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_v(double t, double p):
    result = FECL2_p_dew2019_v(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_cv(double t, double p):
    result = FECL2_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_cp(double t, double p):
    result = FECL2_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_dcpdt(double t, double p):
    result = FECL2_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_alpha(double t, double p):
    result = FECL2_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_beta(double t, double p):
    result = FECL2_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_K(double t, double p):
    result = FECL2_p_dew2019_K(<double> t, <double> p)
    return result
def cy_FECL2_p_dew2019_Kp(double t, double p):
    result = FECL2_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FECL2_l_AQ_r__dew2019_calc.h":
    const char *FECL2_l_AQ_r__dew2019_identifier();
    const char *FECL2_l_AQ_r__dew2019_name();
    const char *FECL2_l_AQ_r__dew2019_formula();
    const double FECL2_l_AQ_r__dew2019_mw();
    const double *FECL2_l_AQ_r__dew2019_elements();
    double FECL2_l_AQ_r__dew2019_g(double t, double p)
    double FECL2_l_AQ_r__dew2019_dgdt(double t, double p)
    double FECL2_l_AQ_r__dew2019_dgdp(double t, double p)
    double FECL2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double FECL2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double FECL2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double FECL2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double FECL2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double FECL2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double FECL2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double FECL2_l_AQ_r__dew2019_s(double t, double p)
    double FECL2_l_AQ_r__dew2019_v(double t, double p)
    double FECL2_l_AQ_r__dew2019_cv(double t, double p)
    double FECL2_l_AQ_r__dew2019_cp(double t, double p)
    double FECL2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double FECL2_l_AQ_r__dew2019_alpha(double t, double p)
    double FECL2_l_AQ_r__dew2019_beta(double t, double p)
    double FECL2_l_AQ_r__dew2019_K(double t, double p)
    double FECL2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FECL2_l_AQ_r__dew2019_identifier():
    result = <bytes> FECL2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_FECL2_l_AQ_r__dew2019_name():
    result = <bytes> FECL2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_FECL2_l_AQ_r__dew2019_formula():
    result = <bytes> FECL2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_FECL2_l_AQ_r__dew2019_mw():
    result = FECL2_l_AQ_r__dew2019_mw()
    return result
def cy_FECL2_l_AQ_r__dew2019_elements():
    cdef const double *e = FECL2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FECL2_l_AQ_r__dew2019_g(double t, double p):
    result = FECL2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = FECL2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = FECL2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = FECL2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = FECL2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = FECL2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = FECL2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = FECL2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = FECL2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = FECL2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_s(double t, double p):
    result = FECL2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_v(double t, double p):
    result = FECL2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_cv(double t, double p):
    result = FECL2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_cp(double t, double p):
    result = FECL2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = FECL2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_alpha(double t, double p):
    result = FECL2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_beta(double t, double p):
    result = FECL2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_K(double t, double p):
    result = FECL2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_FECL2_l_AQ_r__dew2019_Kp(double t, double p):
    result = FECL2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FECL_p2_dew2019_calc.h":
    const char *FECL_p2_dew2019_identifier();
    const char *FECL_p2_dew2019_name();
    const char *FECL_p2_dew2019_formula();
    const double FECL_p2_dew2019_mw();
    const double *FECL_p2_dew2019_elements();
    double FECL_p2_dew2019_g(double t, double p)
    double FECL_p2_dew2019_dgdt(double t, double p)
    double FECL_p2_dew2019_dgdp(double t, double p)
    double FECL_p2_dew2019_d2gdt2(double t, double p)
    double FECL_p2_dew2019_d2gdtdp(double t, double p)
    double FECL_p2_dew2019_d2gdp2(double t, double p)
    double FECL_p2_dew2019_d3gdt3(double t, double p)
    double FECL_p2_dew2019_d3gdt2dp(double t, double p)
    double FECL_p2_dew2019_d3gdtdp2(double t, double p)
    double FECL_p2_dew2019_d3gdp3(double t, double p)
    double FECL_p2_dew2019_s(double t, double p)
    double FECL_p2_dew2019_v(double t, double p)
    double FECL_p2_dew2019_cv(double t, double p)
    double FECL_p2_dew2019_cp(double t, double p)
    double FECL_p2_dew2019_dcpdt(double t, double p)
    double FECL_p2_dew2019_alpha(double t, double p)
    double FECL_p2_dew2019_beta(double t, double p)
    double FECL_p2_dew2019_K(double t, double p)
    double FECL_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FECL_p2_dew2019_identifier():
    result = <bytes> FECL_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FECL_p2_dew2019_name():
    result = <bytes> FECL_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_FECL_p2_dew2019_formula():
    result = <bytes> FECL_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_FECL_p2_dew2019_mw():
    result = FECL_p2_dew2019_mw()
    return result
def cy_FECL_p2_dew2019_elements():
    cdef const double *e = FECL_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FECL_p2_dew2019_g(double t, double p):
    result = FECL_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_dgdt(double t, double p):
    result = FECL_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_dgdp(double t, double p):
    result = FECL_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_d2gdt2(double t, double p):
    result = FECL_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_d2gdtdp(double t, double p):
    result = FECL_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_d2gdp2(double t, double p):
    result = FECL_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_d3gdt3(double t, double p):
    result = FECL_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_d3gdt2dp(double t, double p):
    result = FECL_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_d3gdtdp2(double t, double p):
    result = FECL_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_d3gdp3(double t, double p):
    result = FECL_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_s(double t, double p):
    result = FECL_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_v(double t, double p):
    result = FECL_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_cv(double t, double p):
    result = FECL_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_cp(double t, double p):
    result = FECL_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_dcpdt(double t, double p):
    result = FECL_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_alpha(double t, double p):
    result = FECL_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_beta(double t, double p):
    result = FECL_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_K(double t, double p):
    result = FECL_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_FECL_p2_dew2019_Kp(double t, double p):
    result = FECL_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FECL_p_dew2019_calc.h":
    const char *FECL_p_dew2019_identifier();
    const char *FECL_p_dew2019_name();
    const char *FECL_p_dew2019_formula();
    const double FECL_p_dew2019_mw();
    const double *FECL_p_dew2019_elements();
    double FECL_p_dew2019_g(double t, double p)
    double FECL_p_dew2019_dgdt(double t, double p)
    double FECL_p_dew2019_dgdp(double t, double p)
    double FECL_p_dew2019_d2gdt2(double t, double p)
    double FECL_p_dew2019_d2gdtdp(double t, double p)
    double FECL_p_dew2019_d2gdp2(double t, double p)
    double FECL_p_dew2019_d3gdt3(double t, double p)
    double FECL_p_dew2019_d3gdt2dp(double t, double p)
    double FECL_p_dew2019_d3gdtdp2(double t, double p)
    double FECL_p_dew2019_d3gdp3(double t, double p)
    double FECL_p_dew2019_s(double t, double p)
    double FECL_p_dew2019_v(double t, double p)
    double FECL_p_dew2019_cv(double t, double p)
    double FECL_p_dew2019_cp(double t, double p)
    double FECL_p_dew2019_dcpdt(double t, double p)
    double FECL_p_dew2019_alpha(double t, double p)
    double FECL_p_dew2019_beta(double t, double p)
    double FECL_p_dew2019_K(double t, double p)
    double FECL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FECL_p_dew2019_identifier():
    result = <bytes> FECL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FECL_p_dew2019_name():
    result = <bytes> FECL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_FECL_p_dew2019_formula():
    result = <bytes> FECL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_FECL_p_dew2019_mw():
    result = FECL_p_dew2019_mw()
    return result
def cy_FECL_p_dew2019_elements():
    cdef const double *e = FECL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FECL_p_dew2019_g(double t, double p):
    result = FECL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_dgdt(double t, double p):
    result = FECL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_dgdp(double t, double p):
    result = FECL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_d2gdt2(double t, double p):
    result = FECL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_d2gdtdp(double t, double p):
    result = FECL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_d2gdp2(double t, double p):
    result = FECL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_d3gdt3(double t, double p):
    result = FECL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_d3gdt2dp(double t, double p):
    result = FECL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_d3gdtdp2(double t, double p):
    result = FECL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_d3gdp3(double t, double p):
    result = FECL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_s(double t, double p):
    result = FECL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_v(double t, double p):
    result = FECL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_cv(double t, double p):
    result = FECL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_cp(double t, double p):
    result = FECL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_dcpdt(double t, double p):
    result = FECL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_alpha(double t, double p):
    result = FECL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_beta(double t, double p):
    result = FECL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_K(double t, double p):
    result = FECL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_FECL_p_dew2019_Kp(double t, double p):
    result = FECL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FE_p3_dew2019_calc.h":
    const char *FE_p3_dew2019_identifier();
    const char *FE_p3_dew2019_name();
    const char *FE_p3_dew2019_formula();
    const double FE_p3_dew2019_mw();
    const double *FE_p3_dew2019_elements();
    double FE_p3_dew2019_g(double t, double p)
    double FE_p3_dew2019_dgdt(double t, double p)
    double FE_p3_dew2019_dgdp(double t, double p)
    double FE_p3_dew2019_d2gdt2(double t, double p)
    double FE_p3_dew2019_d2gdtdp(double t, double p)
    double FE_p3_dew2019_d2gdp2(double t, double p)
    double FE_p3_dew2019_d3gdt3(double t, double p)
    double FE_p3_dew2019_d3gdt2dp(double t, double p)
    double FE_p3_dew2019_d3gdtdp2(double t, double p)
    double FE_p3_dew2019_d3gdp3(double t, double p)
    double FE_p3_dew2019_s(double t, double p)
    double FE_p3_dew2019_v(double t, double p)
    double FE_p3_dew2019_cv(double t, double p)
    double FE_p3_dew2019_cp(double t, double p)
    double FE_p3_dew2019_dcpdt(double t, double p)
    double FE_p3_dew2019_alpha(double t, double p)
    double FE_p3_dew2019_beta(double t, double p)
    double FE_p3_dew2019_K(double t, double p)
    double FE_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FE_p3_dew2019_identifier():
    result = <bytes> FE_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FE_p3_dew2019_name():
    result = <bytes> FE_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_FE_p3_dew2019_formula():
    result = <bytes> FE_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_FE_p3_dew2019_mw():
    result = FE_p3_dew2019_mw()
    return result
def cy_FE_p3_dew2019_elements():
    cdef const double *e = FE_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FE_p3_dew2019_g(double t, double p):
    result = FE_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_dgdt(double t, double p):
    result = FE_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_dgdp(double t, double p):
    result = FE_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_d2gdt2(double t, double p):
    result = FE_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_d2gdtdp(double t, double p):
    result = FE_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_d2gdp2(double t, double p):
    result = FE_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_d3gdt3(double t, double p):
    result = FE_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_d3gdt2dp(double t, double p):
    result = FE_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_d3gdtdp2(double t, double p):
    result = FE_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_d3gdp3(double t, double p):
    result = FE_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_s(double t, double p):
    result = FE_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_v(double t, double p):
    result = FE_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_cv(double t, double p):
    result = FE_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_cp(double t, double p):
    result = FE_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_dcpdt(double t, double p):
    result = FE_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_alpha(double t, double p):
    result = FE_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_beta(double t, double p):
    result = FE_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_K(double t, double p):
    result = FE_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_FE_p3_dew2019_Kp(double t, double p):
    result = FE_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FE_p2_dew2019_calc.h":
    const char *FE_p2_dew2019_identifier();
    const char *FE_p2_dew2019_name();
    const char *FE_p2_dew2019_formula();
    const double FE_p2_dew2019_mw();
    const double *FE_p2_dew2019_elements();
    double FE_p2_dew2019_g(double t, double p)
    double FE_p2_dew2019_dgdt(double t, double p)
    double FE_p2_dew2019_dgdp(double t, double p)
    double FE_p2_dew2019_d2gdt2(double t, double p)
    double FE_p2_dew2019_d2gdtdp(double t, double p)
    double FE_p2_dew2019_d2gdp2(double t, double p)
    double FE_p2_dew2019_d3gdt3(double t, double p)
    double FE_p2_dew2019_d3gdt2dp(double t, double p)
    double FE_p2_dew2019_d3gdtdp2(double t, double p)
    double FE_p2_dew2019_d3gdp3(double t, double p)
    double FE_p2_dew2019_s(double t, double p)
    double FE_p2_dew2019_v(double t, double p)
    double FE_p2_dew2019_cv(double t, double p)
    double FE_p2_dew2019_cp(double t, double p)
    double FE_p2_dew2019_dcpdt(double t, double p)
    double FE_p2_dew2019_alpha(double t, double p)
    double FE_p2_dew2019_beta(double t, double p)
    double FE_p2_dew2019_K(double t, double p)
    double FE_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FE_p2_dew2019_identifier():
    result = <bytes> FE_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FE_p2_dew2019_name():
    result = <bytes> FE_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_FE_p2_dew2019_formula():
    result = <bytes> FE_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_FE_p2_dew2019_mw():
    result = FE_p2_dew2019_mw()
    return result
def cy_FE_p2_dew2019_elements():
    cdef const double *e = FE_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FE_p2_dew2019_g(double t, double p):
    result = FE_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_dgdt(double t, double p):
    result = FE_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_dgdp(double t, double p):
    result = FE_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_d2gdt2(double t, double p):
    result = FE_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_d2gdtdp(double t, double p):
    result = FE_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_d2gdp2(double t, double p):
    result = FE_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_d3gdt3(double t, double p):
    result = FE_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_d3gdt2dp(double t, double p):
    result = FE_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_d3gdtdp2(double t, double p):
    result = FE_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_d3gdp3(double t, double p):
    result = FE_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_s(double t, double p):
    result = FE_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_v(double t, double p):
    result = FE_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_cv(double t, double p):
    result = FE_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_cp(double t, double p):
    result = FE_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_dcpdt(double t, double p):
    result = FE_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_alpha(double t, double p):
    result = FE_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_beta(double t, double p):
    result = FE_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_K(double t, double p):
    result = FE_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_FE_p2_dew2019_Kp(double t, double p):
    result = FE_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FE_l_OH_r__p_dew2019_calc.h":
    const char *FE_l_OH_r__p_dew2019_identifier();
    const char *FE_l_OH_r__p_dew2019_name();
    const char *FE_l_OH_r__p_dew2019_formula();
    const double FE_l_OH_r__p_dew2019_mw();
    const double *FE_l_OH_r__p_dew2019_elements();
    double FE_l_OH_r__p_dew2019_g(double t, double p)
    double FE_l_OH_r__p_dew2019_dgdt(double t, double p)
    double FE_l_OH_r__p_dew2019_dgdp(double t, double p)
    double FE_l_OH_r__p_dew2019_d2gdt2(double t, double p)
    double FE_l_OH_r__p_dew2019_d2gdtdp(double t, double p)
    double FE_l_OH_r__p_dew2019_d2gdp2(double t, double p)
    double FE_l_OH_r__p_dew2019_d3gdt3(double t, double p)
    double FE_l_OH_r__p_dew2019_d3gdt2dp(double t, double p)
    double FE_l_OH_r__p_dew2019_d3gdtdp2(double t, double p)
    double FE_l_OH_r__p_dew2019_d3gdp3(double t, double p)
    double FE_l_OH_r__p_dew2019_s(double t, double p)
    double FE_l_OH_r__p_dew2019_v(double t, double p)
    double FE_l_OH_r__p_dew2019_cv(double t, double p)
    double FE_l_OH_r__p_dew2019_cp(double t, double p)
    double FE_l_OH_r__p_dew2019_dcpdt(double t, double p)
    double FE_l_OH_r__p_dew2019_alpha(double t, double p)
    double FE_l_OH_r__p_dew2019_beta(double t, double p)
    double FE_l_OH_r__p_dew2019_K(double t, double p)
    double FE_l_OH_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FE_l_OH_r__p_dew2019_identifier():
    result = <bytes> FE_l_OH_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FE_l_OH_r__p_dew2019_name():
    result = <bytes> FE_l_OH_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_FE_l_OH_r__p_dew2019_formula():
    result = <bytes> FE_l_OH_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_FE_l_OH_r__p_dew2019_mw():
    result = FE_l_OH_r__p_dew2019_mw()
    return result
def cy_FE_l_OH_r__p_dew2019_elements():
    cdef const double *e = FE_l_OH_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FE_l_OH_r__p_dew2019_g(double t, double p):
    result = FE_l_OH_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_dgdt(double t, double p):
    result = FE_l_OH_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_dgdp(double t, double p):
    result = FE_l_OH_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_d2gdt2(double t, double p):
    result = FE_l_OH_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_d2gdtdp(double t, double p):
    result = FE_l_OH_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_d2gdp2(double t, double p):
    result = FE_l_OH_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_d3gdt3(double t, double p):
    result = FE_l_OH_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_d3gdt2dp(double t, double p):
    result = FE_l_OH_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_d3gdtdp2(double t, double p):
    result = FE_l_OH_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_d3gdp3(double t, double p):
    result = FE_l_OH_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_s(double t, double p):
    result = FE_l_OH_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_v(double t, double p):
    result = FE_l_OH_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_cv(double t, double p):
    result = FE_l_OH_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_cp(double t, double p):
    result = FE_l_OH_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_dcpdt(double t, double p):
    result = FE_l_OH_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_alpha(double t, double p):
    result = FE_l_OH_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_beta(double t, double p):
    result = FE_l_OH_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_K(double t, double p):
    result = FE_l_OH_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_FE_l_OH_r__p_dew2019_Kp(double t, double p):
    result = FE_l_OH_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FE_l_H3SIO4_r__p_dew2019_calc.h":
    const char *FE_l_H3SIO4_r__p_dew2019_identifier();
    const char *FE_l_H3SIO4_r__p_dew2019_name();
    const char *FE_l_H3SIO4_r__p_dew2019_formula();
    const double FE_l_H3SIO4_r__p_dew2019_mw();
    const double *FE_l_H3SIO4_r__p_dew2019_elements();
    double FE_l_H3SIO4_r__p_dew2019_g(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_dgdt(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_dgdp(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_d2gdt2(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_d2gdtdp(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_d2gdp2(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_d3gdt3(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_d3gdt2dp(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_d3gdtdp2(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_d3gdp3(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_s(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_v(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_cv(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_cp(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_dcpdt(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_alpha(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_beta(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_K(double t, double p)
    double FE_l_H3SIO4_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FE_l_H3SIO4_r__p_dew2019_identifier():
    result = <bytes> FE_l_H3SIO4_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FE_l_H3SIO4_r__p_dew2019_name():
    result = <bytes> FE_l_H3SIO4_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_FE_l_H3SIO4_r__p_dew2019_formula():
    result = <bytes> FE_l_H3SIO4_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_FE_l_H3SIO4_r__p_dew2019_mw():
    result = FE_l_H3SIO4_r__p_dew2019_mw()
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_elements():
    cdef const double *e = FE_l_H3SIO4_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FE_l_H3SIO4_r__p_dew2019_g(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_dgdt(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_dgdp(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_d2gdt2(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_d2gdtdp(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_d2gdp2(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_d3gdt3(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_d3gdt2dp(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_d3gdtdp2(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_d3gdp3(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_s(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_v(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_cv(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_cp(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_dcpdt(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_alpha(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_beta(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_K(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_FE_l_H3SIO4_r__p_dew2019_Kp(double t, double p):
    result = FE_l_H3SIO4_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FE_l_HCOO_r__p_dew2019_calc.h":
    const char *FE_l_HCOO_r__p_dew2019_identifier();
    const char *FE_l_HCOO_r__p_dew2019_name();
    const char *FE_l_HCOO_r__p_dew2019_formula();
    const double FE_l_HCOO_r__p_dew2019_mw();
    const double *FE_l_HCOO_r__p_dew2019_elements();
    double FE_l_HCOO_r__p_dew2019_g(double t, double p)
    double FE_l_HCOO_r__p_dew2019_dgdt(double t, double p)
    double FE_l_HCOO_r__p_dew2019_dgdp(double t, double p)
    double FE_l_HCOO_r__p_dew2019_d2gdt2(double t, double p)
    double FE_l_HCOO_r__p_dew2019_d2gdtdp(double t, double p)
    double FE_l_HCOO_r__p_dew2019_d2gdp2(double t, double p)
    double FE_l_HCOO_r__p_dew2019_d3gdt3(double t, double p)
    double FE_l_HCOO_r__p_dew2019_d3gdt2dp(double t, double p)
    double FE_l_HCOO_r__p_dew2019_d3gdtdp2(double t, double p)
    double FE_l_HCOO_r__p_dew2019_d3gdp3(double t, double p)
    double FE_l_HCOO_r__p_dew2019_s(double t, double p)
    double FE_l_HCOO_r__p_dew2019_v(double t, double p)
    double FE_l_HCOO_r__p_dew2019_cv(double t, double p)
    double FE_l_HCOO_r__p_dew2019_cp(double t, double p)
    double FE_l_HCOO_r__p_dew2019_dcpdt(double t, double p)
    double FE_l_HCOO_r__p_dew2019_alpha(double t, double p)
    double FE_l_HCOO_r__p_dew2019_beta(double t, double p)
    double FE_l_HCOO_r__p_dew2019_K(double t, double p)
    double FE_l_HCOO_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FE_l_HCOO_r__p_dew2019_identifier():
    result = <bytes> FE_l_HCOO_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FE_l_HCOO_r__p_dew2019_name():
    result = <bytes> FE_l_HCOO_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_FE_l_HCOO_r__p_dew2019_formula():
    result = <bytes> FE_l_HCOO_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_FE_l_HCOO_r__p_dew2019_mw():
    result = FE_l_HCOO_r__p_dew2019_mw()
    return result
def cy_FE_l_HCOO_r__p_dew2019_elements():
    cdef const double *e = FE_l_HCOO_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FE_l_HCOO_r__p_dew2019_g(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_dgdt(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_dgdp(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_d2gdt2(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_d2gdtdp(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_d2gdp2(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_d3gdt3(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_d3gdt2dp(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_d3gdtdp2(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_d3gdp3(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_s(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_v(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_cv(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_cp(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_dcpdt(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_alpha(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_beta(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_K(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_FE_l_HCOO_r__p_dew2019_Kp(double t, double p):
    result = FE_l_HCOO_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FEC4H6O4_l_AQ_r__dew2019_calc.h":
    const char *FEC4H6O4_l_AQ_r__dew2019_identifier();
    const char *FEC4H6O4_l_AQ_r__dew2019_name();
    const char *FEC4H6O4_l_AQ_r__dew2019_formula();
    const double FEC4H6O4_l_AQ_r__dew2019_mw();
    const double *FEC4H6O4_l_AQ_r__dew2019_elements();
    double FEC4H6O4_l_AQ_r__dew2019_g(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_dgdt(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_dgdp(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_s(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_v(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_cv(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_cp(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_dcpdt(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_alpha(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_beta(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_K(double t, double p)
    double FEC4H6O4_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FEC4H6O4_l_AQ_r__dew2019_identifier():
    result = <bytes> FEC4H6O4_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_FEC4H6O4_l_AQ_r__dew2019_name():
    result = <bytes> FEC4H6O4_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_FEC4H6O4_l_AQ_r__dew2019_formula():
    result = <bytes> FEC4H6O4_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_FEC4H6O4_l_AQ_r__dew2019_mw():
    result = FEC4H6O4_l_AQ_r__dew2019_mw()
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_elements():
    cdef const double *e = FEC4H6O4_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FEC4H6O4_l_AQ_r__dew2019_g(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_dgdt(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_dgdp(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_s(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_v(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_cv(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_cp(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_alpha(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_beta(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_K(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_FEC4H6O4_l_AQ_r__dew2019_Kp(double t, double p):
    result = FEC4H6O4_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "FE_l_CH3COO_r__p_dew2019_calc.h":
    const char *FE_l_CH3COO_r__p_dew2019_identifier();
    const char *FE_l_CH3COO_r__p_dew2019_name();
    const char *FE_l_CH3COO_r__p_dew2019_formula();
    const double FE_l_CH3COO_r__p_dew2019_mw();
    const double *FE_l_CH3COO_r__p_dew2019_elements();
    double FE_l_CH3COO_r__p_dew2019_g(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_dgdt(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_dgdp(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_d2gdt2(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_d2gdtdp(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_d2gdp2(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_d3gdt3(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_d3gdt2dp(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_d3gdtdp2(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_d3gdp3(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_s(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_v(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_cv(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_cp(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_dcpdt(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_alpha(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_beta(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_K(double t, double p)
    double FE_l_CH3COO_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_FE_l_CH3COO_r__p_dew2019_identifier():
    result = <bytes> FE_l_CH3COO_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_FE_l_CH3COO_r__p_dew2019_name():
    result = <bytes> FE_l_CH3COO_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_FE_l_CH3COO_r__p_dew2019_formula():
    result = <bytes> FE_l_CH3COO_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_FE_l_CH3COO_r__p_dew2019_mw():
    result = FE_l_CH3COO_r__p_dew2019_mw()
    return result
def cy_FE_l_CH3COO_r__p_dew2019_elements():
    cdef const double *e = FE_l_CH3COO_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_FE_l_CH3COO_r__p_dew2019_g(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_dgdt(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_dgdp(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_d2gdt2(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_d2gdtdp(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_d2gdp2(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_d3gdt3(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_d3gdt2dp(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_d3gdtdp2(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_d3gdp3(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_s(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_v(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_cv(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_cp(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_dcpdt(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_alpha(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_beta(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_K(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_FE_l_CH3COO_r__p_dew2019_Kp(double t, double p):
    result = FE_l_CH3COO_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "F_n_dew2019_calc.h":
    const char *F_n_dew2019_identifier();
    const char *F_n_dew2019_name();
    const char *F_n_dew2019_formula();
    const double F_n_dew2019_mw();
    const double *F_n_dew2019_elements();
    double F_n_dew2019_g(double t, double p)
    double F_n_dew2019_dgdt(double t, double p)
    double F_n_dew2019_dgdp(double t, double p)
    double F_n_dew2019_d2gdt2(double t, double p)
    double F_n_dew2019_d2gdtdp(double t, double p)
    double F_n_dew2019_d2gdp2(double t, double p)
    double F_n_dew2019_d3gdt3(double t, double p)
    double F_n_dew2019_d3gdt2dp(double t, double p)
    double F_n_dew2019_d3gdtdp2(double t, double p)
    double F_n_dew2019_d3gdp3(double t, double p)
    double F_n_dew2019_s(double t, double p)
    double F_n_dew2019_v(double t, double p)
    double F_n_dew2019_cv(double t, double p)
    double F_n_dew2019_cp(double t, double p)
    double F_n_dew2019_dcpdt(double t, double p)
    double F_n_dew2019_alpha(double t, double p)
    double F_n_dew2019_beta(double t, double p)
    double F_n_dew2019_K(double t, double p)
    double F_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_F_n_dew2019_identifier():
    result = <bytes> F_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_F_n_dew2019_name():
    result = <bytes> F_n_dew2019_name()
    return result.decode('UTF-8')
def cy_F_n_dew2019_formula():
    result = <bytes> F_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_F_n_dew2019_mw():
    result = F_n_dew2019_mw()
    return result
def cy_F_n_dew2019_elements():
    cdef const double *e = F_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_F_n_dew2019_g(double t, double p):
    result = F_n_dew2019_g(<double> t, <double> p)
    return result
def cy_F_n_dew2019_dgdt(double t, double p):
    result = F_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_F_n_dew2019_dgdp(double t, double p):
    result = F_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_F_n_dew2019_d2gdt2(double t, double p):
    result = F_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_F_n_dew2019_d2gdtdp(double t, double p):
    result = F_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_F_n_dew2019_d2gdp2(double t, double p):
    result = F_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_F_n_dew2019_d3gdt3(double t, double p):
    result = F_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_F_n_dew2019_d3gdt2dp(double t, double p):
    result = F_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_F_n_dew2019_d3gdtdp2(double t, double p):
    result = F_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_F_n_dew2019_d3gdp3(double t, double p):
    result = F_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_F_n_dew2019_s(double t, double p):
    result = F_n_dew2019_s(<double> t, <double> p)
    return result
def cy_F_n_dew2019_v(double t, double p):
    result = F_n_dew2019_v(<double> t, <double> p)
    return result
def cy_F_n_dew2019_cv(double t, double p):
    result = F_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_F_n_dew2019_cp(double t, double p):
    result = F_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_F_n_dew2019_dcpdt(double t, double p):
    result = F_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_F_n_dew2019_alpha(double t, double p):
    result = F_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_F_n_dew2019_beta(double t, double p):
    result = F_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_F_n_dew2019_K(double t, double p):
    result = F_n_dew2019_K(<double> t, <double> p)
    return result
def cy_F_n_dew2019_Kp(double t, double p):
    result = F_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "EU_p3_dew2019_calc.h":
    const char *EU_p3_dew2019_identifier();
    const char *EU_p3_dew2019_name();
    const char *EU_p3_dew2019_formula();
    const double EU_p3_dew2019_mw();
    const double *EU_p3_dew2019_elements();
    double EU_p3_dew2019_g(double t, double p)
    double EU_p3_dew2019_dgdt(double t, double p)
    double EU_p3_dew2019_dgdp(double t, double p)
    double EU_p3_dew2019_d2gdt2(double t, double p)
    double EU_p3_dew2019_d2gdtdp(double t, double p)
    double EU_p3_dew2019_d2gdp2(double t, double p)
    double EU_p3_dew2019_d3gdt3(double t, double p)
    double EU_p3_dew2019_d3gdt2dp(double t, double p)
    double EU_p3_dew2019_d3gdtdp2(double t, double p)
    double EU_p3_dew2019_d3gdp3(double t, double p)
    double EU_p3_dew2019_s(double t, double p)
    double EU_p3_dew2019_v(double t, double p)
    double EU_p3_dew2019_cv(double t, double p)
    double EU_p3_dew2019_cp(double t, double p)
    double EU_p3_dew2019_dcpdt(double t, double p)
    double EU_p3_dew2019_alpha(double t, double p)
    double EU_p3_dew2019_beta(double t, double p)
    double EU_p3_dew2019_K(double t, double p)
    double EU_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_EU_p3_dew2019_identifier():
    result = <bytes> EU_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_EU_p3_dew2019_name():
    result = <bytes> EU_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_EU_p3_dew2019_formula():
    result = <bytes> EU_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_EU_p3_dew2019_mw():
    result = EU_p3_dew2019_mw()
    return result
def cy_EU_p3_dew2019_elements():
    cdef const double *e = EU_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_EU_p3_dew2019_g(double t, double p):
    result = EU_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_dgdt(double t, double p):
    result = EU_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_dgdp(double t, double p):
    result = EU_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_d2gdt2(double t, double p):
    result = EU_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_d2gdtdp(double t, double p):
    result = EU_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_d2gdp2(double t, double p):
    result = EU_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_d3gdt3(double t, double p):
    result = EU_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_d3gdt2dp(double t, double p):
    result = EU_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_d3gdtdp2(double t, double p):
    result = EU_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_d3gdp3(double t, double p):
    result = EU_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_s(double t, double p):
    result = EU_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_v(double t, double p):
    result = EU_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_cv(double t, double p):
    result = EU_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_cp(double t, double p):
    result = EU_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_dcpdt(double t, double p):
    result = EU_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_alpha(double t, double p):
    result = EU_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_beta(double t, double p):
    result = EU_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_K(double t, double p):
    result = EU_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_EU_p3_dew2019_Kp(double t, double p):
    result = EU_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "EU_p2_dew2019_calc.h":
    const char *EU_p2_dew2019_identifier();
    const char *EU_p2_dew2019_name();
    const char *EU_p2_dew2019_formula();
    const double EU_p2_dew2019_mw();
    const double *EU_p2_dew2019_elements();
    double EU_p2_dew2019_g(double t, double p)
    double EU_p2_dew2019_dgdt(double t, double p)
    double EU_p2_dew2019_dgdp(double t, double p)
    double EU_p2_dew2019_d2gdt2(double t, double p)
    double EU_p2_dew2019_d2gdtdp(double t, double p)
    double EU_p2_dew2019_d2gdp2(double t, double p)
    double EU_p2_dew2019_d3gdt3(double t, double p)
    double EU_p2_dew2019_d3gdt2dp(double t, double p)
    double EU_p2_dew2019_d3gdtdp2(double t, double p)
    double EU_p2_dew2019_d3gdp3(double t, double p)
    double EU_p2_dew2019_s(double t, double p)
    double EU_p2_dew2019_v(double t, double p)
    double EU_p2_dew2019_cv(double t, double p)
    double EU_p2_dew2019_cp(double t, double p)
    double EU_p2_dew2019_dcpdt(double t, double p)
    double EU_p2_dew2019_alpha(double t, double p)
    double EU_p2_dew2019_beta(double t, double p)
    double EU_p2_dew2019_K(double t, double p)
    double EU_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_EU_p2_dew2019_identifier():
    result = <bytes> EU_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_EU_p2_dew2019_name():
    result = <bytes> EU_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_EU_p2_dew2019_formula():
    result = <bytes> EU_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_EU_p2_dew2019_mw():
    result = EU_p2_dew2019_mw()
    return result
def cy_EU_p2_dew2019_elements():
    cdef const double *e = EU_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_EU_p2_dew2019_g(double t, double p):
    result = EU_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_dgdt(double t, double p):
    result = EU_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_dgdp(double t, double p):
    result = EU_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_d2gdt2(double t, double p):
    result = EU_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_d2gdtdp(double t, double p):
    result = EU_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_d2gdp2(double t, double p):
    result = EU_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_d3gdt3(double t, double p):
    result = EU_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_d3gdt2dp(double t, double p):
    result = EU_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_d3gdtdp2(double t, double p):
    result = EU_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_d3gdp3(double t, double p):
    result = EU_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_s(double t, double p):
    result = EU_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_v(double t, double p):
    result = EU_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_cv(double t, double p):
    result = EU_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_cp(double t, double p):
    result = EU_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_dcpdt(double t, double p):
    result = EU_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_alpha(double t, double p):
    result = EU_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_beta(double t, double p):
    result = EU_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_K(double t, double p):
    result = EU_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_EU_p2_dew2019_Kp(double t, double p):
    result = EU_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ETHYLENE_l_AQ_r__dew2019_calc.h":
    const char *ETHYLENE_l_AQ_r__dew2019_identifier();
    const char *ETHYLENE_l_AQ_r__dew2019_name();
    const char *ETHYLENE_l_AQ_r__dew2019_formula();
    const double ETHYLENE_l_AQ_r__dew2019_mw();
    const double *ETHYLENE_l_AQ_r__dew2019_elements();
    double ETHYLENE_l_AQ_r__dew2019_g(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_dgdt(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_dgdp(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_s(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_v(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_cv(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_cp(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_alpha(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_beta(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_K(double t, double p)
    double ETHYLENE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ETHYLENE_l_AQ_r__dew2019_identifier():
    result = <bytes> ETHYLENE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_ETHYLENE_l_AQ_r__dew2019_name():
    result = <bytes> ETHYLENE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_ETHYLENE_l_AQ_r__dew2019_formula():
    result = <bytes> ETHYLENE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_ETHYLENE_l_AQ_r__dew2019_mw():
    result = ETHYLENE_l_AQ_r__dew2019_mw()
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_elements():
    cdef const double *e = ETHYLENE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ETHYLENE_l_AQ_r__dew2019_g(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_s(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_v(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_cv(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_cp(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_alpha(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_beta(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_K(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_ETHYLENE_l_AQ_r__dew2019_Kp(double t, double p):
    result = ETHYLENE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ETHANOL_l_AQ_r__dew2019_calc.h":
    const char *ETHANOL_l_AQ_r__dew2019_identifier();
    const char *ETHANOL_l_AQ_r__dew2019_name();
    const char *ETHANOL_l_AQ_r__dew2019_formula();
    const double ETHANOL_l_AQ_r__dew2019_mw();
    const double *ETHANOL_l_AQ_r__dew2019_elements();
    double ETHANOL_l_AQ_r__dew2019_g(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_dgdt(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_dgdp(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_s(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_v(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_cv(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_cp(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_dcpdt(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_alpha(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_beta(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_K(double t, double p)
    double ETHANOL_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ETHANOL_l_AQ_r__dew2019_identifier():
    result = <bytes> ETHANOL_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_ETHANOL_l_AQ_r__dew2019_name():
    result = <bytes> ETHANOL_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_ETHANOL_l_AQ_r__dew2019_formula():
    result = <bytes> ETHANOL_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_ETHANOL_l_AQ_r__dew2019_mw():
    result = ETHANOL_l_AQ_r__dew2019_mw()
    return result
def cy_ETHANOL_l_AQ_r__dew2019_elements():
    cdef const double *e = ETHANOL_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ETHANOL_l_AQ_r__dew2019_g(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_dgdt(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_dgdp(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_s(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_v(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_cv(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_cp(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_alpha(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_beta(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_K(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_ETHANOL_l_AQ_r__dew2019_Kp(double t, double p):
    result = ETHANOL_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ETHANE_l_AQ_r__dew2019_calc.h":
    const char *ETHANE_l_AQ_r__dew2019_identifier();
    const char *ETHANE_l_AQ_r__dew2019_name();
    const char *ETHANE_l_AQ_r__dew2019_formula();
    const double ETHANE_l_AQ_r__dew2019_mw();
    const double *ETHANE_l_AQ_r__dew2019_elements();
    double ETHANE_l_AQ_r__dew2019_g(double t, double p)
    double ETHANE_l_AQ_r__dew2019_dgdt(double t, double p)
    double ETHANE_l_AQ_r__dew2019_dgdp(double t, double p)
    double ETHANE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double ETHANE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double ETHANE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double ETHANE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double ETHANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double ETHANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double ETHANE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double ETHANE_l_AQ_r__dew2019_s(double t, double p)
    double ETHANE_l_AQ_r__dew2019_v(double t, double p)
    double ETHANE_l_AQ_r__dew2019_cv(double t, double p)
    double ETHANE_l_AQ_r__dew2019_cp(double t, double p)
    double ETHANE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double ETHANE_l_AQ_r__dew2019_alpha(double t, double p)
    double ETHANE_l_AQ_r__dew2019_beta(double t, double p)
    double ETHANE_l_AQ_r__dew2019_K(double t, double p)
    double ETHANE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ETHANE_l_AQ_r__dew2019_identifier():
    result = <bytes> ETHANE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_ETHANE_l_AQ_r__dew2019_name():
    result = <bytes> ETHANE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_ETHANE_l_AQ_r__dew2019_formula():
    result = <bytes> ETHANE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_ETHANE_l_AQ_r__dew2019_mw():
    result = ETHANE_l_AQ_r__dew2019_mw()
    return result
def cy_ETHANE_l_AQ_r__dew2019_elements():
    cdef const double *e = ETHANE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ETHANE_l_AQ_r__dew2019_g(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_s(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_v(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_cv(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_cp(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_alpha(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_beta(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_K(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_ETHANE_l_AQ_r__dew2019_Kp(double t, double p):
    result = ETHANE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "ER_p3_dew2019_calc.h":
    const char *ER_p3_dew2019_identifier();
    const char *ER_p3_dew2019_name();
    const char *ER_p3_dew2019_formula();
    const double ER_p3_dew2019_mw();
    const double *ER_p3_dew2019_elements();
    double ER_p3_dew2019_g(double t, double p)
    double ER_p3_dew2019_dgdt(double t, double p)
    double ER_p3_dew2019_dgdp(double t, double p)
    double ER_p3_dew2019_d2gdt2(double t, double p)
    double ER_p3_dew2019_d2gdtdp(double t, double p)
    double ER_p3_dew2019_d2gdp2(double t, double p)
    double ER_p3_dew2019_d3gdt3(double t, double p)
    double ER_p3_dew2019_d3gdt2dp(double t, double p)
    double ER_p3_dew2019_d3gdtdp2(double t, double p)
    double ER_p3_dew2019_d3gdp3(double t, double p)
    double ER_p3_dew2019_s(double t, double p)
    double ER_p3_dew2019_v(double t, double p)
    double ER_p3_dew2019_cv(double t, double p)
    double ER_p3_dew2019_cp(double t, double p)
    double ER_p3_dew2019_dcpdt(double t, double p)
    double ER_p3_dew2019_alpha(double t, double p)
    double ER_p3_dew2019_beta(double t, double p)
    double ER_p3_dew2019_K(double t, double p)
    double ER_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_ER_p3_dew2019_identifier():
    result = <bytes> ER_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_ER_p3_dew2019_name():
    result = <bytes> ER_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_ER_p3_dew2019_formula():
    result = <bytes> ER_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_ER_p3_dew2019_mw():
    result = ER_p3_dew2019_mw()
    return result
def cy_ER_p3_dew2019_elements():
    cdef const double *e = ER_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_ER_p3_dew2019_g(double t, double p):
    result = ER_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_dgdt(double t, double p):
    result = ER_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_dgdp(double t, double p):
    result = ER_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_d2gdt2(double t, double p):
    result = ER_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_d2gdtdp(double t, double p):
    result = ER_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_d2gdp2(double t, double p):
    result = ER_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_d3gdt3(double t, double p):
    result = ER_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_d3gdt2dp(double t, double p):
    result = ER_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_d3gdtdp2(double t, double p):
    result = ER_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_d3gdp3(double t, double p):
    result = ER_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_s(double t, double p):
    result = ER_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_v(double t, double p):
    result = ER_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_cv(double t, double p):
    result = ER_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_cp(double t, double p):
    result = ER_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_dcpdt(double t, double p):
    result = ER_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_alpha(double t, double p):
    result = ER_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_beta(double t, double p):
    result = ER_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_K(double t, double p):
    result = ER_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_ER_p3_dew2019_Kp(double t, double p):
    result = ER_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "DY_p3_dew2019_calc.h":
    const char *DY_p3_dew2019_identifier();
    const char *DY_p3_dew2019_name();
    const char *DY_p3_dew2019_formula();
    const double DY_p3_dew2019_mw();
    const double *DY_p3_dew2019_elements();
    double DY_p3_dew2019_g(double t, double p)
    double DY_p3_dew2019_dgdt(double t, double p)
    double DY_p3_dew2019_dgdp(double t, double p)
    double DY_p3_dew2019_d2gdt2(double t, double p)
    double DY_p3_dew2019_d2gdtdp(double t, double p)
    double DY_p3_dew2019_d2gdp2(double t, double p)
    double DY_p3_dew2019_d3gdt3(double t, double p)
    double DY_p3_dew2019_d3gdt2dp(double t, double p)
    double DY_p3_dew2019_d3gdtdp2(double t, double p)
    double DY_p3_dew2019_d3gdp3(double t, double p)
    double DY_p3_dew2019_s(double t, double p)
    double DY_p3_dew2019_v(double t, double p)
    double DY_p3_dew2019_cv(double t, double p)
    double DY_p3_dew2019_cp(double t, double p)
    double DY_p3_dew2019_dcpdt(double t, double p)
    double DY_p3_dew2019_alpha(double t, double p)
    double DY_p3_dew2019_beta(double t, double p)
    double DY_p3_dew2019_K(double t, double p)
    double DY_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_DY_p3_dew2019_identifier():
    result = <bytes> DY_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_DY_p3_dew2019_name():
    result = <bytes> DY_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_DY_p3_dew2019_formula():
    result = <bytes> DY_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_DY_p3_dew2019_mw():
    result = DY_p3_dew2019_mw()
    return result
def cy_DY_p3_dew2019_elements():
    cdef const double *e = DY_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_DY_p3_dew2019_g(double t, double p):
    result = DY_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_dgdt(double t, double p):
    result = DY_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_dgdp(double t, double p):
    result = DY_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_d2gdt2(double t, double p):
    result = DY_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_d2gdtdp(double t, double p):
    result = DY_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_d2gdp2(double t, double p):
    result = DY_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_d3gdt3(double t, double p):
    result = DY_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_d3gdt2dp(double t, double p):
    result = DY_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_d3gdtdp2(double t, double p):
    result = DY_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_d3gdp3(double t, double p):
    result = DY_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_s(double t, double p):
    result = DY_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_v(double t, double p):
    result = DY_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_cv(double t, double p):
    result = DY_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_cp(double t, double p):
    result = DY_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_dcpdt(double t, double p):
    result = DY_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_alpha(double t, double p):
    result = DY_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_beta(double t, double p):
    result = DY_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_K(double t, double p):
    result = DY_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_DY_p3_dew2019_Kp(double t, double p):
    result = DY_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "DKP_l_AQ_r__dew2019_calc.h":
    const char *DKP_l_AQ_r__dew2019_identifier();
    const char *DKP_l_AQ_r__dew2019_name();
    const char *DKP_l_AQ_r__dew2019_formula();
    const double DKP_l_AQ_r__dew2019_mw();
    const double *DKP_l_AQ_r__dew2019_elements();
    double DKP_l_AQ_r__dew2019_g(double t, double p)
    double DKP_l_AQ_r__dew2019_dgdt(double t, double p)
    double DKP_l_AQ_r__dew2019_dgdp(double t, double p)
    double DKP_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double DKP_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double DKP_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double DKP_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double DKP_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double DKP_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double DKP_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double DKP_l_AQ_r__dew2019_s(double t, double p)
    double DKP_l_AQ_r__dew2019_v(double t, double p)
    double DKP_l_AQ_r__dew2019_cv(double t, double p)
    double DKP_l_AQ_r__dew2019_cp(double t, double p)
    double DKP_l_AQ_r__dew2019_dcpdt(double t, double p)
    double DKP_l_AQ_r__dew2019_alpha(double t, double p)
    double DKP_l_AQ_r__dew2019_beta(double t, double p)
    double DKP_l_AQ_r__dew2019_K(double t, double p)
    double DKP_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_DKP_l_AQ_r__dew2019_identifier():
    result = <bytes> DKP_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_DKP_l_AQ_r__dew2019_name():
    result = <bytes> DKP_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_DKP_l_AQ_r__dew2019_formula():
    result = <bytes> DKP_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_DKP_l_AQ_r__dew2019_mw():
    result = DKP_l_AQ_r__dew2019_mw()
    return result
def cy_DKP_l_AQ_r__dew2019_elements():
    cdef const double *e = DKP_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_DKP_l_AQ_r__dew2019_g(double t, double p):
    result = DKP_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_dgdt(double t, double p):
    result = DKP_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_dgdp(double t, double p):
    result = DKP_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = DKP_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = DKP_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = DKP_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = DKP_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = DKP_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = DKP_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = DKP_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_s(double t, double p):
    result = DKP_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_v(double t, double p):
    result = DKP_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_cv(double t, double p):
    result = DKP_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_cp(double t, double p):
    result = DKP_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = DKP_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_alpha(double t, double p):
    result = DKP_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_beta(double t, double p):
    result = DKP_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_K(double t, double p):
    result = DKP_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_DKP_l_AQ_r__dew2019_Kp(double t, double p):
    result = DKP_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "DIGLYCINE_l_AQ_r__dew2019_calc.h":
    const char *DIGLYCINE_l_AQ_r__dew2019_identifier();
    const char *DIGLYCINE_l_AQ_r__dew2019_name();
    const char *DIGLYCINE_l_AQ_r__dew2019_formula();
    const double DIGLYCINE_l_AQ_r__dew2019_mw();
    const double *DIGLYCINE_l_AQ_r__dew2019_elements();
    double DIGLYCINE_l_AQ_r__dew2019_g(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_dgdt(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_dgdp(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_s(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_v(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_cv(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_cp(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_alpha(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_beta(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_K(double t, double p)
    double DIGLYCINE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_DIGLYCINE_l_AQ_r__dew2019_identifier():
    result = <bytes> DIGLYCINE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_DIGLYCINE_l_AQ_r__dew2019_name():
    result = <bytes> DIGLYCINE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_DIGLYCINE_l_AQ_r__dew2019_formula():
    result = <bytes> DIGLYCINE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_DIGLYCINE_l_AQ_r__dew2019_mw():
    result = DIGLYCINE_l_AQ_r__dew2019_mw()
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_elements():
    cdef const double *e = DIGLYCINE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_DIGLYCINE_l_AQ_r__dew2019_g(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_s(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_v(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_cv(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_cp(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_alpha(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_beta(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_K(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_DIGLYCINE_l_AQ_r__dew2019_Kp(double t, double p):
    result = DIGLYCINE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CU_p2_dew2019_calc.h":
    const char *CU_p2_dew2019_identifier();
    const char *CU_p2_dew2019_name();
    const char *CU_p2_dew2019_formula();
    const double CU_p2_dew2019_mw();
    const double *CU_p2_dew2019_elements();
    double CU_p2_dew2019_g(double t, double p)
    double CU_p2_dew2019_dgdt(double t, double p)
    double CU_p2_dew2019_dgdp(double t, double p)
    double CU_p2_dew2019_d2gdt2(double t, double p)
    double CU_p2_dew2019_d2gdtdp(double t, double p)
    double CU_p2_dew2019_d2gdp2(double t, double p)
    double CU_p2_dew2019_d3gdt3(double t, double p)
    double CU_p2_dew2019_d3gdt2dp(double t, double p)
    double CU_p2_dew2019_d3gdtdp2(double t, double p)
    double CU_p2_dew2019_d3gdp3(double t, double p)
    double CU_p2_dew2019_s(double t, double p)
    double CU_p2_dew2019_v(double t, double p)
    double CU_p2_dew2019_cv(double t, double p)
    double CU_p2_dew2019_cp(double t, double p)
    double CU_p2_dew2019_dcpdt(double t, double p)
    double CU_p2_dew2019_alpha(double t, double p)
    double CU_p2_dew2019_beta(double t, double p)
    double CU_p2_dew2019_K(double t, double p)
    double CU_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CU_p2_dew2019_identifier():
    result = <bytes> CU_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CU_p2_dew2019_name():
    result = <bytes> CU_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_CU_p2_dew2019_formula():
    result = <bytes> CU_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_CU_p2_dew2019_mw():
    result = CU_p2_dew2019_mw()
    return result
def cy_CU_p2_dew2019_elements():
    cdef const double *e = CU_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CU_p2_dew2019_g(double t, double p):
    result = CU_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_dgdt(double t, double p):
    result = CU_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_dgdp(double t, double p):
    result = CU_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_d2gdt2(double t, double p):
    result = CU_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_d2gdtdp(double t, double p):
    result = CU_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_d2gdp2(double t, double p):
    result = CU_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_d3gdt3(double t, double p):
    result = CU_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_d3gdt2dp(double t, double p):
    result = CU_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_d3gdtdp2(double t, double p):
    result = CU_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_d3gdp3(double t, double p):
    result = CU_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_s(double t, double p):
    result = CU_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_v(double t, double p):
    result = CU_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_cv(double t, double p):
    result = CU_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_cp(double t, double p):
    result = CU_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_dcpdt(double t, double p):
    result = CU_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_alpha(double t, double p):
    result = CU_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_beta(double t, double p):
    result = CU_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_K(double t, double p):
    result = CU_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_CU_p2_dew2019_Kp(double t, double p):
    result = CU_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CU_p_dew2019_calc.h":
    const char *CU_p_dew2019_identifier();
    const char *CU_p_dew2019_name();
    const char *CU_p_dew2019_formula();
    const double CU_p_dew2019_mw();
    const double *CU_p_dew2019_elements();
    double CU_p_dew2019_g(double t, double p)
    double CU_p_dew2019_dgdt(double t, double p)
    double CU_p_dew2019_dgdp(double t, double p)
    double CU_p_dew2019_d2gdt2(double t, double p)
    double CU_p_dew2019_d2gdtdp(double t, double p)
    double CU_p_dew2019_d2gdp2(double t, double p)
    double CU_p_dew2019_d3gdt3(double t, double p)
    double CU_p_dew2019_d3gdt2dp(double t, double p)
    double CU_p_dew2019_d3gdtdp2(double t, double p)
    double CU_p_dew2019_d3gdp3(double t, double p)
    double CU_p_dew2019_s(double t, double p)
    double CU_p_dew2019_v(double t, double p)
    double CU_p_dew2019_cv(double t, double p)
    double CU_p_dew2019_cp(double t, double p)
    double CU_p_dew2019_dcpdt(double t, double p)
    double CU_p_dew2019_alpha(double t, double p)
    double CU_p_dew2019_beta(double t, double p)
    double CU_p_dew2019_K(double t, double p)
    double CU_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CU_p_dew2019_identifier():
    result = <bytes> CU_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CU_p_dew2019_name():
    result = <bytes> CU_p_dew2019_name()
    return result.decode('UTF-8')
def cy_CU_p_dew2019_formula():
    result = <bytes> CU_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_CU_p_dew2019_mw():
    result = CU_p_dew2019_mw()
    return result
def cy_CU_p_dew2019_elements():
    cdef const double *e = CU_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CU_p_dew2019_g(double t, double p):
    result = CU_p_dew2019_g(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_dgdt(double t, double p):
    result = CU_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_dgdp(double t, double p):
    result = CU_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_d2gdt2(double t, double p):
    result = CU_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_d2gdtdp(double t, double p):
    result = CU_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_d2gdp2(double t, double p):
    result = CU_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_d3gdt3(double t, double p):
    result = CU_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_d3gdt2dp(double t, double p):
    result = CU_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_d3gdtdp2(double t, double p):
    result = CU_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_d3gdp3(double t, double p):
    result = CU_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_s(double t, double p):
    result = CU_p_dew2019_s(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_v(double t, double p):
    result = CU_p_dew2019_v(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_cv(double t, double p):
    result = CU_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_cp(double t, double p):
    result = CU_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_dcpdt(double t, double p):
    result = CU_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_alpha(double t, double p):
    result = CU_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_beta(double t, double p):
    result = CU_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_K(double t, double p):
    result = CU_p_dew2019_K(<double> t, <double> p)
    return result
def cy_CU_p_dew2019_Kp(double t, double p):
    result = CU_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CS_p_dew2019_calc.h":
    const char *CS_p_dew2019_identifier();
    const char *CS_p_dew2019_name();
    const char *CS_p_dew2019_formula();
    const double CS_p_dew2019_mw();
    const double *CS_p_dew2019_elements();
    double CS_p_dew2019_g(double t, double p)
    double CS_p_dew2019_dgdt(double t, double p)
    double CS_p_dew2019_dgdp(double t, double p)
    double CS_p_dew2019_d2gdt2(double t, double p)
    double CS_p_dew2019_d2gdtdp(double t, double p)
    double CS_p_dew2019_d2gdp2(double t, double p)
    double CS_p_dew2019_d3gdt3(double t, double p)
    double CS_p_dew2019_d3gdt2dp(double t, double p)
    double CS_p_dew2019_d3gdtdp2(double t, double p)
    double CS_p_dew2019_d3gdp3(double t, double p)
    double CS_p_dew2019_s(double t, double p)
    double CS_p_dew2019_v(double t, double p)
    double CS_p_dew2019_cv(double t, double p)
    double CS_p_dew2019_cp(double t, double p)
    double CS_p_dew2019_dcpdt(double t, double p)
    double CS_p_dew2019_alpha(double t, double p)
    double CS_p_dew2019_beta(double t, double p)
    double CS_p_dew2019_K(double t, double p)
    double CS_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CS_p_dew2019_identifier():
    result = <bytes> CS_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CS_p_dew2019_name():
    result = <bytes> CS_p_dew2019_name()
    return result.decode('UTF-8')
def cy_CS_p_dew2019_formula():
    result = <bytes> CS_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_CS_p_dew2019_mw():
    result = CS_p_dew2019_mw()
    return result
def cy_CS_p_dew2019_elements():
    cdef const double *e = CS_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CS_p_dew2019_g(double t, double p):
    result = CS_p_dew2019_g(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_dgdt(double t, double p):
    result = CS_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_dgdp(double t, double p):
    result = CS_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_d2gdt2(double t, double p):
    result = CS_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_d2gdtdp(double t, double p):
    result = CS_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_d2gdp2(double t, double p):
    result = CS_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_d3gdt3(double t, double p):
    result = CS_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_d3gdt2dp(double t, double p):
    result = CS_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_d3gdtdp2(double t, double p):
    result = CS_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_d3gdp3(double t, double p):
    result = CS_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_s(double t, double p):
    result = CS_p_dew2019_s(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_v(double t, double p):
    result = CS_p_dew2019_v(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_cv(double t, double p):
    result = CS_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_cp(double t, double p):
    result = CS_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_dcpdt(double t, double p):
    result = CS_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_alpha(double t, double p):
    result = CS_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_beta(double t, double p):
    result = CS_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_K(double t, double p):
    result = CS_p_dew2019_K(<double> t, <double> p)
    return result
def cy_CS_p_dew2019_Kp(double t, double p):
    result = CS_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CRO4_n2_dew2019_calc.h":
    const char *CRO4_n2_dew2019_identifier();
    const char *CRO4_n2_dew2019_name();
    const char *CRO4_n2_dew2019_formula();
    const double CRO4_n2_dew2019_mw();
    const double *CRO4_n2_dew2019_elements();
    double CRO4_n2_dew2019_g(double t, double p)
    double CRO4_n2_dew2019_dgdt(double t, double p)
    double CRO4_n2_dew2019_dgdp(double t, double p)
    double CRO4_n2_dew2019_d2gdt2(double t, double p)
    double CRO4_n2_dew2019_d2gdtdp(double t, double p)
    double CRO4_n2_dew2019_d2gdp2(double t, double p)
    double CRO4_n2_dew2019_d3gdt3(double t, double p)
    double CRO4_n2_dew2019_d3gdt2dp(double t, double p)
    double CRO4_n2_dew2019_d3gdtdp2(double t, double p)
    double CRO4_n2_dew2019_d3gdp3(double t, double p)
    double CRO4_n2_dew2019_s(double t, double p)
    double CRO4_n2_dew2019_v(double t, double p)
    double CRO4_n2_dew2019_cv(double t, double p)
    double CRO4_n2_dew2019_cp(double t, double p)
    double CRO4_n2_dew2019_dcpdt(double t, double p)
    double CRO4_n2_dew2019_alpha(double t, double p)
    double CRO4_n2_dew2019_beta(double t, double p)
    double CRO4_n2_dew2019_K(double t, double p)
    double CRO4_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CRO4_n2_dew2019_identifier():
    result = <bytes> CRO4_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CRO4_n2_dew2019_name():
    result = <bytes> CRO4_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_CRO4_n2_dew2019_formula():
    result = <bytes> CRO4_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_CRO4_n2_dew2019_mw():
    result = CRO4_n2_dew2019_mw()
    return result
def cy_CRO4_n2_dew2019_elements():
    cdef const double *e = CRO4_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CRO4_n2_dew2019_g(double t, double p):
    result = CRO4_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_dgdt(double t, double p):
    result = CRO4_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_dgdp(double t, double p):
    result = CRO4_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_d2gdt2(double t, double p):
    result = CRO4_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_d2gdtdp(double t, double p):
    result = CRO4_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_d2gdp2(double t, double p):
    result = CRO4_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_d3gdt3(double t, double p):
    result = CRO4_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_d3gdt2dp(double t, double p):
    result = CRO4_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_d3gdtdp2(double t, double p):
    result = CRO4_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_d3gdp3(double t, double p):
    result = CRO4_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_s(double t, double p):
    result = CRO4_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_v(double t, double p):
    result = CRO4_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_cv(double t, double p):
    result = CRO4_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_cp(double t, double p):
    result = CRO4_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_dcpdt(double t, double p):
    result = CRO4_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_alpha(double t, double p):
    result = CRO4_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_beta(double t, double p):
    result = CRO4_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_K(double t, double p):
    result = CRO4_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_CRO4_n2_dew2019_Kp(double t, double p):
    result = CRO4_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CR2O7_n2_dew2019_calc.h":
    const char *CR2O7_n2_dew2019_identifier();
    const char *CR2O7_n2_dew2019_name();
    const char *CR2O7_n2_dew2019_formula();
    const double CR2O7_n2_dew2019_mw();
    const double *CR2O7_n2_dew2019_elements();
    double CR2O7_n2_dew2019_g(double t, double p)
    double CR2O7_n2_dew2019_dgdt(double t, double p)
    double CR2O7_n2_dew2019_dgdp(double t, double p)
    double CR2O7_n2_dew2019_d2gdt2(double t, double p)
    double CR2O7_n2_dew2019_d2gdtdp(double t, double p)
    double CR2O7_n2_dew2019_d2gdp2(double t, double p)
    double CR2O7_n2_dew2019_d3gdt3(double t, double p)
    double CR2O7_n2_dew2019_d3gdt2dp(double t, double p)
    double CR2O7_n2_dew2019_d3gdtdp2(double t, double p)
    double CR2O7_n2_dew2019_d3gdp3(double t, double p)
    double CR2O7_n2_dew2019_s(double t, double p)
    double CR2O7_n2_dew2019_v(double t, double p)
    double CR2O7_n2_dew2019_cv(double t, double p)
    double CR2O7_n2_dew2019_cp(double t, double p)
    double CR2O7_n2_dew2019_dcpdt(double t, double p)
    double CR2O7_n2_dew2019_alpha(double t, double p)
    double CR2O7_n2_dew2019_beta(double t, double p)
    double CR2O7_n2_dew2019_K(double t, double p)
    double CR2O7_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CR2O7_n2_dew2019_identifier():
    result = <bytes> CR2O7_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CR2O7_n2_dew2019_name():
    result = <bytes> CR2O7_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_CR2O7_n2_dew2019_formula():
    result = <bytes> CR2O7_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_CR2O7_n2_dew2019_mw():
    result = CR2O7_n2_dew2019_mw()
    return result
def cy_CR2O7_n2_dew2019_elements():
    cdef const double *e = CR2O7_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CR2O7_n2_dew2019_g(double t, double p):
    result = CR2O7_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_dgdt(double t, double p):
    result = CR2O7_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_dgdp(double t, double p):
    result = CR2O7_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_d2gdt2(double t, double p):
    result = CR2O7_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_d2gdtdp(double t, double p):
    result = CR2O7_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_d2gdp2(double t, double p):
    result = CR2O7_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_d3gdt3(double t, double p):
    result = CR2O7_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_d3gdt2dp(double t, double p):
    result = CR2O7_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_d3gdtdp2(double t, double p):
    result = CR2O7_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_d3gdp3(double t, double p):
    result = CR2O7_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_s(double t, double p):
    result = CR2O7_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_v(double t, double p):
    result = CR2O7_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_cv(double t, double p):
    result = CR2O7_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_cp(double t, double p):
    result = CR2O7_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_dcpdt(double t, double p):
    result = CR2O7_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_alpha(double t, double p):
    result = CR2O7_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_beta(double t, double p):
    result = CR2O7_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_K(double t, double p):
    result = CR2O7_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_CR2O7_n2_dew2019_Kp(double t, double p):
    result = CR2O7_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CR_p3_dew2019_calc.h":
    const char *CR_p3_dew2019_identifier();
    const char *CR_p3_dew2019_name();
    const char *CR_p3_dew2019_formula();
    const double CR_p3_dew2019_mw();
    const double *CR_p3_dew2019_elements();
    double CR_p3_dew2019_g(double t, double p)
    double CR_p3_dew2019_dgdt(double t, double p)
    double CR_p3_dew2019_dgdp(double t, double p)
    double CR_p3_dew2019_d2gdt2(double t, double p)
    double CR_p3_dew2019_d2gdtdp(double t, double p)
    double CR_p3_dew2019_d2gdp2(double t, double p)
    double CR_p3_dew2019_d3gdt3(double t, double p)
    double CR_p3_dew2019_d3gdt2dp(double t, double p)
    double CR_p3_dew2019_d3gdtdp2(double t, double p)
    double CR_p3_dew2019_d3gdp3(double t, double p)
    double CR_p3_dew2019_s(double t, double p)
    double CR_p3_dew2019_v(double t, double p)
    double CR_p3_dew2019_cv(double t, double p)
    double CR_p3_dew2019_cp(double t, double p)
    double CR_p3_dew2019_dcpdt(double t, double p)
    double CR_p3_dew2019_alpha(double t, double p)
    double CR_p3_dew2019_beta(double t, double p)
    double CR_p3_dew2019_K(double t, double p)
    double CR_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CR_p3_dew2019_identifier():
    result = <bytes> CR_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CR_p3_dew2019_name():
    result = <bytes> CR_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_CR_p3_dew2019_formula():
    result = <bytes> CR_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_CR_p3_dew2019_mw():
    result = CR_p3_dew2019_mw()
    return result
def cy_CR_p3_dew2019_elements():
    cdef const double *e = CR_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CR_p3_dew2019_g(double t, double p):
    result = CR_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_dgdt(double t, double p):
    result = CR_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_dgdp(double t, double p):
    result = CR_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_d2gdt2(double t, double p):
    result = CR_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_d2gdtdp(double t, double p):
    result = CR_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_d2gdp2(double t, double p):
    result = CR_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_d3gdt3(double t, double p):
    result = CR_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_d3gdt2dp(double t, double p):
    result = CR_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_d3gdtdp2(double t, double p):
    result = CR_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_d3gdp3(double t, double p):
    result = CR_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_s(double t, double p):
    result = CR_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_v(double t, double p):
    result = CR_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_cv(double t, double p):
    result = CR_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_cp(double t, double p):
    result = CR_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_dcpdt(double t, double p):
    result = CR_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_alpha(double t, double p):
    result = CR_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_beta(double t, double p):
    result = CR_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_K(double t, double p):
    result = CR_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_CR_p3_dew2019_Kp(double t, double p):
    result = CR_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CR_p2_dew2019_calc.h":
    const char *CR_p2_dew2019_identifier();
    const char *CR_p2_dew2019_name();
    const char *CR_p2_dew2019_formula();
    const double CR_p2_dew2019_mw();
    const double *CR_p2_dew2019_elements();
    double CR_p2_dew2019_g(double t, double p)
    double CR_p2_dew2019_dgdt(double t, double p)
    double CR_p2_dew2019_dgdp(double t, double p)
    double CR_p2_dew2019_d2gdt2(double t, double p)
    double CR_p2_dew2019_d2gdtdp(double t, double p)
    double CR_p2_dew2019_d2gdp2(double t, double p)
    double CR_p2_dew2019_d3gdt3(double t, double p)
    double CR_p2_dew2019_d3gdt2dp(double t, double p)
    double CR_p2_dew2019_d3gdtdp2(double t, double p)
    double CR_p2_dew2019_d3gdp3(double t, double p)
    double CR_p2_dew2019_s(double t, double p)
    double CR_p2_dew2019_v(double t, double p)
    double CR_p2_dew2019_cv(double t, double p)
    double CR_p2_dew2019_cp(double t, double p)
    double CR_p2_dew2019_dcpdt(double t, double p)
    double CR_p2_dew2019_alpha(double t, double p)
    double CR_p2_dew2019_beta(double t, double p)
    double CR_p2_dew2019_K(double t, double p)
    double CR_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CR_p2_dew2019_identifier():
    result = <bytes> CR_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CR_p2_dew2019_name():
    result = <bytes> CR_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_CR_p2_dew2019_formula():
    result = <bytes> CR_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_CR_p2_dew2019_mw():
    result = CR_p2_dew2019_mw()
    return result
def cy_CR_p2_dew2019_elements():
    cdef const double *e = CR_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CR_p2_dew2019_g(double t, double p):
    result = CR_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_dgdt(double t, double p):
    result = CR_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_dgdp(double t, double p):
    result = CR_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_d2gdt2(double t, double p):
    result = CR_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_d2gdtdp(double t, double p):
    result = CR_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_d2gdp2(double t, double p):
    result = CR_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_d3gdt3(double t, double p):
    result = CR_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_d3gdt2dp(double t, double p):
    result = CR_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_d3gdtdp2(double t, double p):
    result = CR_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_d3gdp3(double t, double p):
    result = CR_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_s(double t, double p):
    result = CR_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_v(double t, double p):
    result = CR_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_cv(double t, double p):
    result = CR_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_cp(double t, double p):
    result = CR_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_dcpdt(double t, double p):
    result = CR_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_alpha(double t, double p):
    result = CR_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_beta(double t, double p):
    result = CR_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_K(double t, double p):
    result = CR_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_CR_p2_dew2019_Kp(double t, double p):
    result = CR_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CO3_n2_dew2019_calc.h":
    const char *CO3_n2_dew2019_identifier();
    const char *CO3_n2_dew2019_name();
    const char *CO3_n2_dew2019_formula();
    const double CO3_n2_dew2019_mw();
    const double *CO3_n2_dew2019_elements();
    double CO3_n2_dew2019_g(double t, double p)
    double CO3_n2_dew2019_dgdt(double t, double p)
    double CO3_n2_dew2019_dgdp(double t, double p)
    double CO3_n2_dew2019_d2gdt2(double t, double p)
    double CO3_n2_dew2019_d2gdtdp(double t, double p)
    double CO3_n2_dew2019_d2gdp2(double t, double p)
    double CO3_n2_dew2019_d3gdt3(double t, double p)
    double CO3_n2_dew2019_d3gdt2dp(double t, double p)
    double CO3_n2_dew2019_d3gdtdp2(double t, double p)
    double CO3_n2_dew2019_d3gdp3(double t, double p)
    double CO3_n2_dew2019_s(double t, double p)
    double CO3_n2_dew2019_v(double t, double p)
    double CO3_n2_dew2019_cv(double t, double p)
    double CO3_n2_dew2019_cp(double t, double p)
    double CO3_n2_dew2019_dcpdt(double t, double p)
    double CO3_n2_dew2019_alpha(double t, double p)
    double CO3_n2_dew2019_beta(double t, double p)
    double CO3_n2_dew2019_K(double t, double p)
    double CO3_n2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CO3_n2_dew2019_identifier():
    result = <bytes> CO3_n2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CO3_n2_dew2019_name():
    result = <bytes> CO3_n2_dew2019_name()
    return result.decode('UTF-8')
def cy_CO3_n2_dew2019_formula():
    result = <bytes> CO3_n2_dew2019_formula()
    return result.decode('UTF-8')
def cy_CO3_n2_dew2019_mw():
    result = CO3_n2_dew2019_mw()
    return result
def cy_CO3_n2_dew2019_elements():
    cdef const double *e = CO3_n2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CO3_n2_dew2019_g(double t, double p):
    result = CO3_n2_dew2019_g(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_dgdt(double t, double p):
    result = CO3_n2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_dgdp(double t, double p):
    result = CO3_n2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_d2gdt2(double t, double p):
    result = CO3_n2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_d2gdtdp(double t, double p):
    result = CO3_n2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_d2gdp2(double t, double p):
    result = CO3_n2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_d3gdt3(double t, double p):
    result = CO3_n2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_d3gdt2dp(double t, double p):
    result = CO3_n2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_d3gdtdp2(double t, double p):
    result = CO3_n2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_d3gdp3(double t, double p):
    result = CO3_n2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_s(double t, double p):
    result = CO3_n2_dew2019_s(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_v(double t, double p):
    result = CO3_n2_dew2019_v(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_cv(double t, double p):
    result = CO3_n2_dew2019_cv(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_cp(double t, double p):
    result = CO3_n2_dew2019_cp(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_dcpdt(double t, double p):
    result = CO3_n2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_alpha(double t, double p):
    result = CO3_n2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_beta(double t, double p):
    result = CO3_n2_dew2019_beta(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_K(double t, double p):
    result = CO3_n2_dew2019_K(<double> t, <double> p)
    return result
def cy_CO3_n2_dew2019_Kp(double t, double p):
    result = CO3_n2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CO2_l_AQ_r__dew2019_calc.h":
    const char *CO2_l_AQ_r__dew2019_identifier();
    const char *CO2_l_AQ_r__dew2019_name();
    const char *CO2_l_AQ_r__dew2019_formula();
    const double CO2_l_AQ_r__dew2019_mw();
    const double *CO2_l_AQ_r__dew2019_elements();
    double CO2_l_AQ_r__dew2019_g(double t, double p)
    double CO2_l_AQ_r__dew2019_dgdt(double t, double p)
    double CO2_l_AQ_r__dew2019_dgdp(double t, double p)
    double CO2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double CO2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double CO2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double CO2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double CO2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double CO2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double CO2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double CO2_l_AQ_r__dew2019_s(double t, double p)
    double CO2_l_AQ_r__dew2019_v(double t, double p)
    double CO2_l_AQ_r__dew2019_cv(double t, double p)
    double CO2_l_AQ_r__dew2019_cp(double t, double p)
    double CO2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double CO2_l_AQ_r__dew2019_alpha(double t, double p)
    double CO2_l_AQ_r__dew2019_beta(double t, double p)
    double CO2_l_AQ_r__dew2019_K(double t, double p)
    double CO2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CO2_l_AQ_r__dew2019_identifier():
    result = <bytes> CO2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_CO2_l_AQ_r__dew2019_name():
    result = <bytes> CO2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_CO2_l_AQ_r__dew2019_formula():
    result = <bytes> CO2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_CO2_l_AQ_r__dew2019_mw():
    result = CO2_l_AQ_r__dew2019_mw()
    return result
def cy_CO2_l_AQ_r__dew2019_elements():
    cdef const double *e = CO2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CO2_l_AQ_r__dew2019_g(double t, double p):
    result = CO2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = CO2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = CO2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = CO2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = CO2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = CO2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = CO2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = CO2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = CO2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = CO2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_s(double t, double p):
    result = CO2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_v(double t, double p):
    result = CO2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_cv(double t, double p):
    result = CO2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_cp(double t, double p):
    result = CO2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = CO2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_alpha(double t, double p):
    result = CO2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_beta(double t, double p):
    result = CO2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_K(double t, double p):
    result = CO2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_CO2_l_AQ_r__dew2019_Kp(double t, double p):
    result = CO2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CO_p3_dew2019_calc.h":
    const char *CO_p3_dew2019_identifier();
    const char *CO_p3_dew2019_name();
    const char *CO_p3_dew2019_formula();
    const double CO_p3_dew2019_mw();
    const double *CO_p3_dew2019_elements();
    double CO_p3_dew2019_g(double t, double p)
    double CO_p3_dew2019_dgdt(double t, double p)
    double CO_p3_dew2019_dgdp(double t, double p)
    double CO_p3_dew2019_d2gdt2(double t, double p)
    double CO_p3_dew2019_d2gdtdp(double t, double p)
    double CO_p3_dew2019_d2gdp2(double t, double p)
    double CO_p3_dew2019_d3gdt3(double t, double p)
    double CO_p3_dew2019_d3gdt2dp(double t, double p)
    double CO_p3_dew2019_d3gdtdp2(double t, double p)
    double CO_p3_dew2019_d3gdp3(double t, double p)
    double CO_p3_dew2019_s(double t, double p)
    double CO_p3_dew2019_v(double t, double p)
    double CO_p3_dew2019_cv(double t, double p)
    double CO_p3_dew2019_cp(double t, double p)
    double CO_p3_dew2019_dcpdt(double t, double p)
    double CO_p3_dew2019_alpha(double t, double p)
    double CO_p3_dew2019_beta(double t, double p)
    double CO_p3_dew2019_K(double t, double p)
    double CO_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CO_p3_dew2019_identifier():
    result = <bytes> CO_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CO_p3_dew2019_name():
    result = <bytes> CO_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_CO_p3_dew2019_formula():
    result = <bytes> CO_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_CO_p3_dew2019_mw():
    result = CO_p3_dew2019_mw()
    return result
def cy_CO_p3_dew2019_elements():
    cdef const double *e = CO_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CO_p3_dew2019_g(double t, double p):
    result = CO_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_dgdt(double t, double p):
    result = CO_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_dgdp(double t, double p):
    result = CO_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_d2gdt2(double t, double p):
    result = CO_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_d2gdtdp(double t, double p):
    result = CO_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_d2gdp2(double t, double p):
    result = CO_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_d3gdt3(double t, double p):
    result = CO_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_d3gdt2dp(double t, double p):
    result = CO_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_d3gdtdp2(double t, double p):
    result = CO_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_d3gdp3(double t, double p):
    result = CO_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_s(double t, double p):
    result = CO_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_v(double t, double p):
    result = CO_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_cv(double t, double p):
    result = CO_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_cp(double t, double p):
    result = CO_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_dcpdt(double t, double p):
    result = CO_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_alpha(double t, double p):
    result = CO_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_beta(double t, double p):
    result = CO_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_K(double t, double p):
    result = CO_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_CO_p3_dew2019_Kp(double t, double p):
    result = CO_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CO_p2_dew2019_calc.h":
    const char *CO_p2_dew2019_identifier();
    const char *CO_p2_dew2019_name();
    const char *CO_p2_dew2019_formula();
    const double CO_p2_dew2019_mw();
    const double *CO_p2_dew2019_elements();
    double CO_p2_dew2019_g(double t, double p)
    double CO_p2_dew2019_dgdt(double t, double p)
    double CO_p2_dew2019_dgdp(double t, double p)
    double CO_p2_dew2019_d2gdt2(double t, double p)
    double CO_p2_dew2019_d2gdtdp(double t, double p)
    double CO_p2_dew2019_d2gdp2(double t, double p)
    double CO_p2_dew2019_d3gdt3(double t, double p)
    double CO_p2_dew2019_d3gdt2dp(double t, double p)
    double CO_p2_dew2019_d3gdtdp2(double t, double p)
    double CO_p2_dew2019_d3gdp3(double t, double p)
    double CO_p2_dew2019_s(double t, double p)
    double CO_p2_dew2019_v(double t, double p)
    double CO_p2_dew2019_cv(double t, double p)
    double CO_p2_dew2019_cp(double t, double p)
    double CO_p2_dew2019_dcpdt(double t, double p)
    double CO_p2_dew2019_alpha(double t, double p)
    double CO_p2_dew2019_beta(double t, double p)
    double CO_p2_dew2019_K(double t, double p)
    double CO_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CO_p2_dew2019_identifier():
    result = <bytes> CO_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CO_p2_dew2019_name():
    result = <bytes> CO_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_CO_p2_dew2019_formula():
    result = <bytes> CO_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_CO_p2_dew2019_mw():
    result = CO_p2_dew2019_mw()
    return result
def cy_CO_p2_dew2019_elements():
    cdef const double *e = CO_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CO_p2_dew2019_g(double t, double p):
    result = CO_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_dgdt(double t, double p):
    result = CO_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_dgdp(double t, double p):
    result = CO_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_d2gdt2(double t, double p):
    result = CO_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_d2gdtdp(double t, double p):
    result = CO_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_d2gdp2(double t, double p):
    result = CO_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_d3gdt3(double t, double p):
    result = CO_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_d3gdt2dp(double t, double p):
    result = CO_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_d3gdtdp2(double t, double p):
    result = CO_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_d3gdp3(double t, double p):
    result = CO_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_s(double t, double p):
    result = CO_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_v(double t, double p):
    result = CO_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_cv(double t, double p):
    result = CO_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_cp(double t, double p):
    result = CO_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_dcpdt(double t, double p):
    result = CO_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_alpha(double t, double p):
    result = CO_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_beta(double t, double p):
    result = CO_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_K(double t, double p):
    result = CO_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_CO_p2_dew2019_Kp(double t, double p):
    result = CO_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CO_l_AQ_r__dew2019_calc.h":
    const char *CO_l_AQ_r__dew2019_identifier();
    const char *CO_l_AQ_r__dew2019_name();
    const char *CO_l_AQ_r__dew2019_formula();
    const double CO_l_AQ_r__dew2019_mw();
    const double *CO_l_AQ_r__dew2019_elements();
    double CO_l_AQ_r__dew2019_g(double t, double p)
    double CO_l_AQ_r__dew2019_dgdt(double t, double p)
    double CO_l_AQ_r__dew2019_dgdp(double t, double p)
    double CO_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double CO_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double CO_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double CO_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double CO_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double CO_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double CO_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double CO_l_AQ_r__dew2019_s(double t, double p)
    double CO_l_AQ_r__dew2019_v(double t, double p)
    double CO_l_AQ_r__dew2019_cv(double t, double p)
    double CO_l_AQ_r__dew2019_cp(double t, double p)
    double CO_l_AQ_r__dew2019_dcpdt(double t, double p)
    double CO_l_AQ_r__dew2019_alpha(double t, double p)
    double CO_l_AQ_r__dew2019_beta(double t, double p)
    double CO_l_AQ_r__dew2019_K(double t, double p)
    double CO_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CO_l_AQ_r__dew2019_identifier():
    result = <bytes> CO_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_CO_l_AQ_r__dew2019_name():
    result = <bytes> CO_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_CO_l_AQ_r__dew2019_formula():
    result = <bytes> CO_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_CO_l_AQ_r__dew2019_mw():
    result = CO_l_AQ_r__dew2019_mw()
    return result
def cy_CO_l_AQ_r__dew2019_elements():
    cdef const double *e = CO_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CO_l_AQ_r__dew2019_g(double t, double p):
    result = CO_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_dgdt(double t, double p):
    result = CO_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_dgdp(double t, double p):
    result = CO_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = CO_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = CO_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = CO_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = CO_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = CO_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = CO_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = CO_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_s(double t, double p):
    result = CO_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_v(double t, double p):
    result = CO_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_cv(double t, double p):
    result = CO_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_cp(double t, double p):
    result = CO_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = CO_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_alpha(double t, double p):
    result = CO_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_beta(double t, double p):
    result = CO_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_K(double t, double p):
    result = CO_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_CO_l_AQ_r__dew2019_Kp(double t, double p):
    result = CO_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CN_n_dew2019_calc.h":
    const char *CN_n_dew2019_identifier();
    const char *CN_n_dew2019_name();
    const char *CN_n_dew2019_formula();
    const double CN_n_dew2019_mw();
    const double *CN_n_dew2019_elements();
    double CN_n_dew2019_g(double t, double p)
    double CN_n_dew2019_dgdt(double t, double p)
    double CN_n_dew2019_dgdp(double t, double p)
    double CN_n_dew2019_d2gdt2(double t, double p)
    double CN_n_dew2019_d2gdtdp(double t, double p)
    double CN_n_dew2019_d2gdp2(double t, double p)
    double CN_n_dew2019_d3gdt3(double t, double p)
    double CN_n_dew2019_d3gdt2dp(double t, double p)
    double CN_n_dew2019_d3gdtdp2(double t, double p)
    double CN_n_dew2019_d3gdp3(double t, double p)
    double CN_n_dew2019_s(double t, double p)
    double CN_n_dew2019_v(double t, double p)
    double CN_n_dew2019_cv(double t, double p)
    double CN_n_dew2019_cp(double t, double p)
    double CN_n_dew2019_dcpdt(double t, double p)
    double CN_n_dew2019_alpha(double t, double p)
    double CN_n_dew2019_beta(double t, double p)
    double CN_n_dew2019_K(double t, double p)
    double CN_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CN_n_dew2019_identifier():
    result = <bytes> CN_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CN_n_dew2019_name():
    result = <bytes> CN_n_dew2019_name()
    return result.decode('UTF-8')
def cy_CN_n_dew2019_formula():
    result = <bytes> CN_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_CN_n_dew2019_mw():
    result = CN_n_dew2019_mw()
    return result
def cy_CN_n_dew2019_elements():
    cdef const double *e = CN_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CN_n_dew2019_g(double t, double p):
    result = CN_n_dew2019_g(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_dgdt(double t, double p):
    result = CN_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_dgdp(double t, double p):
    result = CN_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_d2gdt2(double t, double p):
    result = CN_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_d2gdtdp(double t, double p):
    result = CN_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_d2gdp2(double t, double p):
    result = CN_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_d3gdt3(double t, double p):
    result = CN_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_d3gdt2dp(double t, double p):
    result = CN_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_d3gdtdp2(double t, double p):
    result = CN_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_d3gdp3(double t, double p):
    result = CN_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_s(double t, double p):
    result = CN_n_dew2019_s(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_v(double t, double p):
    result = CN_n_dew2019_v(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_cv(double t, double p):
    result = CN_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_cp(double t, double p):
    result = CN_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_dcpdt(double t, double p):
    result = CN_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_alpha(double t, double p):
    result = CN_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_beta(double t, double p):
    result = CN_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_K(double t, double p):
    result = CN_n_dew2019_K(<double> t, <double> p)
    return result
def cy_CN_n_dew2019_Kp(double t, double p):
    result = CN_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CL_n_dew2019_calc.h":
    const char *CL_n_dew2019_identifier();
    const char *CL_n_dew2019_name();
    const char *CL_n_dew2019_formula();
    const double CL_n_dew2019_mw();
    const double *CL_n_dew2019_elements();
    double CL_n_dew2019_g(double t, double p)
    double CL_n_dew2019_dgdt(double t, double p)
    double CL_n_dew2019_dgdp(double t, double p)
    double CL_n_dew2019_d2gdt2(double t, double p)
    double CL_n_dew2019_d2gdtdp(double t, double p)
    double CL_n_dew2019_d2gdp2(double t, double p)
    double CL_n_dew2019_d3gdt3(double t, double p)
    double CL_n_dew2019_d3gdt2dp(double t, double p)
    double CL_n_dew2019_d3gdtdp2(double t, double p)
    double CL_n_dew2019_d3gdp3(double t, double p)
    double CL_n_dew2019_s(double t, double p)
    double CL_n_dew2019_v(double t, double p)
    double CL_n_dew2019_cv(double t, double p)
    double CL_n_dew2019_cp(double t, double p)
    double CL_n_dew2019_dcpdt(double t, double p)
    double CL_n_dew2019_alpha(double t, double p)
    double CL_n_dew2019_beta(double t, double p)
    double CL_n_dew2019_K(double t, double p)
    double CL_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CL_n_dew2019_identifier():
    result = <bytes> CL_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CL_n_dew2019_name():
    result = <bytes> CL_n_dew2019_name()
    return result.decode('UTF-8')
def cy_CL_n_dew2019_formula():
    result = <bytes> CL_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_CL_n_dew2019_mw():
    result = CL_n_dew2019_mw()
    return result
def cy_CL_n_dew2019_elements():
    cdef const double *e = CL_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CL_n_dew2019_g(double t, double p):
    result = CL_n_dew2019_g(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_dgdt(double t, double p):
    result = CL_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_dgdp(double t, double p):
    result = CL_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_d2gdt2(double t, double p):
    result = CL_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_d2gdtdp(double t, double p):
    result = CL_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_d2gdp2(double t, double p):
    result = CL_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_d3gdt3(double t, double p):
    result = CL_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_d3gdt2dp(double t, double p):
    result = CL_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_d3gdtdp2(double t, double p):
    result = CL_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_d3gdp3(double t, double p):
    result = CL_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_s(double t, double p):
    result = CL_n_dew2019_s(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_v(double t, double p):
    result = CL_n_dew2019_v(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_cv(double t, double p):
    result = CL_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_cp(double t, double p):
    result = CL_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_dcpdt(double t, double p):
    result = CL_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_alpha(double t, double p):
    result = CL_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_beta(double t, double p):
    result = CL_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_K(double t, double p):
    result = CL_n_dew2019_K(<double> t, <double> p)
    return result
def cy_CL_n_dew2019_Kp(double t, double p):
    result = CL_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CE_p4_dew2019_calc.h":
    const char *CE_p4_dew2019_identifier();
    const char *CE_p4_dew2019_name();
    const char *CE_p4_dew2019_formula();
    const double CE_p4_dew2019_mw();
    const double *CE_p4_dew2019_elements();
    double CE_p4_dew2019_g(double t, double p)
    double CE_p4_dew2019_dgdt(double t, double p)
    double CE_p4_dew2019_dgdp(double t, double p)
    double CE_p4_dew2019_d2gdt2(double t, double p)
    double CE_p4_dew2019_d2gdtdp(double t, double p)
    double CE_p4_dew2019_d2gdp2(double t, double p)
    double CE_p4_dew2019_d3gdt3(double t, double p)
    double CE_p4_dew2019_d3gdt2dp(double t, double p)
    double CE_p4_dew2019_d3gdtdp2(double t, double p)
    double CE_p4_dew2019_d3gdp3(double t, double p)
    double CE_p4_dew2019_s(double t, double p)
    double CE_p4_dew2019_v(double t, double p)
    double CE_p4_dew2019_cv(double t, double p)
    double CE_p4_dew2019_cp(double t, double p)
    double CE_p4_dew2019_dcpdt(double t, double p)
    double CE_p4_dew2019_alpha(double t, double p)
    double CE_p4_dew2019_beta(double t, double p)
    double CE_p4_dew2019_K(double t, double p)
    double CE_p4_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CE_p4_dew2019_identifier():
    result = <bytes> CE_p4_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CE_p4_dew2019_name():
    result = <bytes> CE_p4_dew2019_name()
    return result.decode('UTF-8')
def cy_CE_p4_dew2019_formula():
    result = <bytes> CE_p4_dew2019_formula()
    return result.decode('UTF-8')
def cy_CE_p4_dew2019_mw():
    result = CE_p4_dew2019_mw()
    return result
def cy_CE_p4_dew2019_elements():
    cdef const double *e = CE_p4_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CE_p4_dew2019_g(double t, double p):
    result = CE_p4_dew2019_g(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_dgdt(double t, double p):
    result = CE_p4_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_dgdp(double t, double p):
    result = CE_p4_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_d2gdt2(double t, double p):
    result = CE_p4_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_d2gdtdp(double t, double p):
    result = CE_p4_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_d2gdp2(double t, double p):
    result = CE_p4_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_d3gdt3(double t, double p):
    result = CE_p4_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_d3gdt2dp(double t, double p):
    result = CE_p4_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_d3gdtdp2(double t, double p):
    result = CE_p4_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_d3gdp3(double t, double p):
    result = CE_p4_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_s(double t, double p):
    result = CE_p4_dew2019_s(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_v(double t, double p):
    result = CE_p4_dew2019_v(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_cv(double t, double p):
    result = CE_p4_dew2019_cv(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_cp(double t, double p):
    result = CE_p4_dew2019_cp(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_dcpdt(double t, double p):
    result = CE_p4_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_alpha(double t, double p):
    result = CE_p4_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_beta(double t, double p):
    result = CE_p4_dew2019_beta(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_K(double t, double p):
    result = CE_p4_dew2019_K(<double> t, <double> p)
    return result
def cy_CE_p4_dew2019_Kp(double t, double p):
    result = CE_p4_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CE_p3_dew2019_calc.h":
    const char *CE_p3_dew2019_identifier();
    const char *CE_p3_dew2019_name();
    const char *CE_p3_dew2019_formula();
    const double CE_p3_dew2019_mw();
    const double *CE_p3_dew2019_elements();
    double CE_p3_dew2019_g(double t, double p)
    double CE_p3_dew2019_dgdt(double t, double p)
    double CE_p3_dew2019_dgdp(double t, double p)
    double CE_p3_dew2019_d2gdt2(double t, double p)
    double CE_p3_dew2019_d2gdtdp(double t, double p)
    double CE_p3_dew2019_d2gdp2(double t, double p)
    double CE_p3_dew2019_d3gdt3(double t, double p)
    double CE_p3_dew2019_d3gdt2dp(double t, double p)
    double CE_p3_dew2019_d3gdtdp2(double t, double p)
    double CE_p3_dew2019_d3gdp3(double t, double p)
    double CE_p3_dew2019_s(double t, double p)
    double CE_p3_dew2019_v(double t, double p)
    double CE_p3_dew2019_cv(double t, double p)
    double CE_p3_dew2019_cp(double t, double p)
    double CE_p3_dew2019_dcpdt(double t, double p)
    double CE_p3_dew2019_alpha(double t, double p)
    double CE_p3_dew2019_beta(double t, double p)
    double CE_p3_dew2019_K(double t, double p)
    double CE_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CE_p3_dew2019_identifier():
    result = <bytes> CE_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CE_p3_dew2019_name():
    result = <bytes> CE_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_CE_p3_dew2019_formula():
    result = <bytes> CE_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_CE_p3_dew2019_mw():
    result = CE_p3_dew2019_mw()
    return result
def cy_CE_p3_dew2019_elements():
    cdef const double *e = CE_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CE_p3_dew2019_g(double t, double p):
    result = CE_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_dgdt(double t, double p):
    result = CE_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_dgdp(double t, double p):
    result = CE_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_d2gdt2(double t, double p):
    result = CE_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_d2gdtdp(double t, double p):
    result = CE_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_d2gdp2(double t, double p):
    result = CE_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_d3gdt3(double t, double p):
    result = CE_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_d3gdt2dp(double t, double p):
    result = CE_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_d3gdtdp2(double t, double p):
    result = CE_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_d3gdp3(double t, double p):
    result = CE_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_s(double t, double p):
    result = CE_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_v(double t, double p):
    result = CE_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_cv(double t, double p):
    result = CE_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_cp(double t, double p):
    result = CE_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_dcpdt(double t, double p):
    result = CE_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_alpha(double t, double p):
    result = CE_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_beta(double t, double p):
    result = CE_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_K(double t, double p):
    result = CE_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_CE_p3_dew2019_Kp(double t, double p):
    result = CE_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CD_p2_dew2019_calc.h":
    const char *CD_p2_dew2019_identifier();
    const char *CD_p2_dew2019_name();
    const char *CD_p2_dew2019_formula();
    const double CD_p2_dew2019_mw();
    const double *CD_p2_dew2019_elements();
    double CD_p2_dew2019_g(double t, double p)
    double CD_p2_dew2019_dgdt(double t, double p)
    double CD_p2_dew2019_dgdp(double t, double p)
    double CD_p2_dew2019_d2gdt2(double t, double p)
    double CD_p2_dew2019_d2gdtdp(double t, double p)
    double CD_p2_dew2019_d2gdp2(double t, double p)
    double CD_p2_dew2019_d3gdt3(double t, double p)
    double CD_p2_dew2019_d3gdt2dp(double t, double p)
    double CD_p2_dew2019_d3gdtdp2(double t, double p)
    double CD_p2_dew2019_d3gdp3(double t, double p)
    double CD_p2_dew2019_s(double t, double p)
    double CD_p2_dew2019_v(double t, double p)
    double CD_p2_dew2019_cv(double t, double p)
    double CD_p2_dew2019_cp(double t, double p)
    double CD_p2_dew2019_dcpdt(double t, double p)
    double CD_p2_dew2019_alpha(double t, double p)
    double CD_p2_dew2019_beta(double t, double p)
    double CD_p2_dew2019_K(double t, double p)
    double CD_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CD_p2_dew2019_identifier():
    result = <bytes> CD_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CD_p2_dew2019_name():
    result = <bytes> CD_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_CD_p2_dew2019_formula():
    result = <bytes> CD_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_CD_p2_dew2019_mw():
    result = CD_p2_dew2019_mw()
    return result
def cy_CD_p2_dew2019_elements():
    cdef const double *e = CD_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CD_p2_dew2019_g(double t, double p):
    result = CD_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_dgdt(double t, double p):
    result = CD_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_dgdp(double t, double p):
    result = CD_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_d2gdt2(double t, double p):
    result = CD_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_d2gdtdp(double t, double p):
    result = CD_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_d2gdp2(double t, double p):
    result = CD_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_d3gdt3(double t, double p):
    result = CD_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_d3gdt2dp(double t, double p):
    result = CD_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_d3gdtdp2(double t, double p):
    result = CD_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_d3gdp3(double t, double p):
    result = CD_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_s(double t, double p):
    result = CD_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_v(double t, double p):
    result = CD_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_cv(double t, double p):
    result = CD_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_cp(double t, double p):
    result = CD_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_dcpdt(double t, double p):
    result = CD_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_alpha(double t, double p):
    result = CD_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_beta(double t, double p):
    result = CD_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_K(double t, double p):
    result = CD_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_CD_p2_dew2019_Kp(double t, double p):
    result = CD_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CASO4_l_AQ_r__dew2019_calc.h":
    const char *CASO4_l_AQ_r__dew2019_identifier();
    const char *CASO4_l_AQ_r__dew2019_name();
    const char *CASO4_l_AQ_r__dew2019_formula();
    const double CASO4_l_AQ_r__dew2019_mw();
    const double *CASO4_l_AQ_r__dew2019_elements();
    double CASO4_l_AQ_r__dew2019_g(double t, double p)
    double CASO4_l_AQ_r__dew2019_dgdt(double t, double p)
    double CASO4_l_AQ_r__dew2019_dgdp(double t, double p)
    double CASO4_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double CASO4_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double CASO4_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double CASO4_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double CASO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double CASO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double CASO4_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double CASO4_l_AQ_r__dew2019_s(double t, double p)
    double CASO4_l_AQ_r__dew2019_v(double t, double p)
    double CASO4_l_AQ_r__dew2019_cv(double t, double p)
    double CASO4_l_AQ_r__dew2019_cp(double t, double p)
    double CASO4_l_AQ_r__dew2019_dcpdt(double t, double p)
    double CASO4_l_AQ_r__dew2019_alpha(double t, double p)
    double CASO4_l_AQ_r__dew2019_beta(double t, double p)
    double CASO4_l_AQ_r__dew2019_K(double t, double p)
    double CASO4_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CASO4_l_AQ_r__dew2019_identifier():
    result = <bytes> CASO4_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_CASO4_l_AQ_r__dew2019_name():
    result = <bytes> CASO4_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_CASO4_l_AQ_r__dew2019_formula():
    result = <bytes> CASO4_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_CASO4_l_AQ_r__dew2019_mw():
    result = CASO4_l_AQ_r__dew2019_mw()
    return result
def cy_CASO4_l_AQ_r__dew2019_elements():
    cdef const double *e = CASO4_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CASO4_l_AQ_r__dew2019_g(double t, double p):
    result = CASO4_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_dgdt(double t, double p):
    result = CASO4_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_dgdp(double t, double p):
    result = CASO4_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = CASO4_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = CASO4_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = CASO4_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = CASO4_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = CASO4_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = CASO4_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = CASO4_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_s(double t, double p):
    result = CASO4_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_v(double t, double p):
    result = CASO4_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_cv(double t, double p):
    result = CASO4_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_cp(double t, double p):
    result = CASO4_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = CASO4_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_alpha(double t, double p):
    result = CASO4_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_beta(double t, double p):
    result = CASO4_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_K(double t, double p):
    result = CASO4_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_CASO4_l_AQ_r__dew2019_Kp(double t, double p):
    result = CASO4_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CAO_l_AQ_r__dew2019_calc.h":
    const char *CAO_l_AQ_r__dew2019_identifier();
    const char *CAO_l_AQ_r__dew2019_name();
    const char *CAO_l_AQ_r__dew2019_formula();
    const double CAO_l_AQ_r__dew2019_mw();
    const double *CAO_l_AQ_r__dew2019_elements();
    double CAO_l_AQ_r__dew2019_g(double t, double p)
    double CAO_l_AQ_r__dew2019_dgdt(double t, double p)
    double CAO_l_AQ_r__dew2019_dgdp(double t, double p)
    double CAO_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double CAO_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double CAO_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double CAO_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double CAO_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double CAO_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double CAO_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double CAO_l_AQ_r__dew2019_s(double t, double p)
    double CAO_l_AQ_r__dew2019_v(double t, double p)
    double CAO_l_AQ_r__dew2019_cv(double t, double p)
    double CAO_l_AQ_r__dew2019_cp(double t, double p)
    double CAO_l_AQ_r__dew2019_dcpdt(double t, double p)
    double CAO_l_AQ_r__dew2019_alpha(double t, double p)
    double CAO_l_AQ_r__dew2019_beta(double t, double p)
    double CAO_l_AQ_r__dew2019_K(double t, double p)
    double CAO_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CAO_l_AQ_r__dew2019_identifier():
    result = <bytes> CAO_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_CAO_l_AQ_r__dew2019_name():
    result = <bytes> CAO_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_CAO_l_AQ_r__dew2019_formula():
    result = <bytes> CAO_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_CAO_l_AQ_r__dew2019_mw():
    result = CAO_l_AQ_r__dew2019_mw()
    return result
def cy_CAO_l_AQ_r__dew2019_elements():
    cdef const double *e = CAO_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CAO_l_AQ_r__dew2019_g(double t, double p):
    result = CAO_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_dgdt(double t, double p):
    result = CAO_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_dgdp(double t, double p):
    result = CAO_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = CAO_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = CAO_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = CAO_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = CAO_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = CAO_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = CAO_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = CAO_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_s(double t, double p):
    result = CAO_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_v(double t, double p):
    result = CAO_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_cv(double t, double p):
    result = CAO_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_cp(double t, double p):
    result = CAO_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = CAO_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_alpha(double t, double p):
    result = CAO_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_beta(double t, double p):
    result = CAO_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_K(double t, double p):
    result = CAO_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_CAO_l_AQ_r__dew2019_Kp(double t, double p):
    result = CAO_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CACO3_l_AQ_r__dew2019_calc.h":
    const char *CACO3_l_AQ_r__dew2019_identifier();
    const char *CACO3_l_AQ_r__dew2019_name();
    const char *CACO3_l_AQ_r__dew2019_formula();
    const double CACO3_l_AQ_r__dew2019_mw();
    const double *CACO3_l_AQ_r__dew2019_elements();
    double CACO3_l_AQ_r__dew2019_g(double t, double p)
    double CACO3_l_AQ_r__dew2019_dgdt(double t, double p)
    double CACO3_l_AQ_r__dew2019_dgdp(double t, double p)
    double CACO3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double CACO3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double CACO3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double CACO3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double CACO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double CACO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double CACO3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double CACO3_l_AQ_r__dew2019_s(double t, double p)
    double CACO3_l_AQ_r__dew2019_v(double t, double p)
    double CACO3_l_AQ_r__dew2019_cv(double t, double p)
    double CACO3_l_AQ_r__dew2019_cp(double t, double p)
    double CACO3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double CACO3_l_AQ_r__dew2019_alpha(double t, double p)
    double CACO3_l_AQ_r__dew2019_beta(double t, double p)
    double CACO3_l_AQ_r__dew2019_K(double t, double p)
    double CACO3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CACO3_l_AQ_r__dew2019_identifier():
    result = <bytes> CACO3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_CACO3_l_AQ_r__dew2019_name():
    result = <bytes> CACO3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_CACO3_l_AQ_r__dew2019_formula():
    result = <bytes> CACO3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_CACO3_l_AQ_r__dew2019_mw():
    result = CACO3_l_AQ_r__dew2019_mw()
    return result
def cy_CACO3_l_AQ_r__dew2019_elements():
    cdef const double *e = CACO3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CACO3_l_AQ_r__dew2019_g(double t, double p):
    result = CACO3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = CACO3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = CACO3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = CACO3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = CACO3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = CACO3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = CACO3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = CACO3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = CACO3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = CACO3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_s(double t, double p):
    result = CACO3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_v(double t, double p):
    result = CACO3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_cv(double t, double p):
    result = CACO3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_cp(double t, double p):
    result = CACO3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = CACO3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_alpha(double t, double p):
    result = CACO3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_beta(double t, double p):
    result = CACO3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_K(double t, double p):
    result = CACO3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_CACO3_l_AQ_r__dew2019_Kp(double t, double p):
    result = CACO3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CACL2_l_AQ_r__dew2019_calc.h":
    const char *CACL2_l_AQ_r__dew2019_identifier();
    const char *CACL2_l_AQ_r__dew2019_name();
    const char *CACL2_l_AQ_r__dew2019_formula();
    const double CACL2_l_AQ_r__dew2019_mw();
    const double *CACL2_l_AQ_r__dew2019_elements();
    double CACL2_l_AQ_r__dew2019_g(double t, double p)
    double CACL2_l_AQ_r__dew2019_dgdt(double t, double p)
    double CACL2_l_AQ_r__dew2019_dgdp(double t, double p)
    double CACL2_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double CACL2_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double CACL2_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double CACL2_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double CACL2_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double CACL2_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double CACL2_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double CACL2_l_AQ_r__dew2019_s(double t, double p)
    double CACL2_l_AQ_r__dew2019_v(double t, double p)
    double CACL2_l_AQ_r__dew2019_cv(double t, double p)
    double CACL2_l_AQ_r__dew2019_cp(double t, double p)
    double CACL2_l_AQ_r__dew2019_dcpdt(double t, double p)
    double CACL2_l_AQ_r__dew2019_alpha(double t, double p)
    double CACL2_l_AQ_r__dew2019_beta(double t, double p)
    double CACL2_l_AQ_r__dew2019_K(double t, double p)
    double CACL2_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CACL2_l_AQ_r__dew2019_identifier():
    result = <bytes> CACL2_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_CACL2_l_AQ_r__dew2019_name():
    result = <bytes> CACL2_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_CACL2_l_AQ_r__dew2019_formula():
    result = <bytes> CACL2_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_CACL2_l_AQ_r__dew2019_mw():
    result = CACL2_l_AQ_r__dew2019_mw()
    return result
def cy_CACL2_l_AQ_r__dew2019_elements():
    cdef const double *e = CACL2_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CACL2_l_AQ_r__dew2019_g(double t, double p):
    result = CACL2_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_dgdt(double t, double p):
    result = CACL2_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_dgdp(double t, double p):
    result = CACL2_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = CACL2_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = CACL2_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = CACL2_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = CACL2_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = CACL2_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = CACL2_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = CACL2_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_s(double t, double p):
    result = CACL2_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_v(double t, double p):
    result = CACL2_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_cv(double t, double p):
    result = CACL2_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_cp(double t, double p):
    result = CACL2_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = CACL2_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_alpha(double t, double p):
    result = CACL2_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_beta(double t, double p):
    result = CACL2_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_K(double t, double p):
    result = CACL2_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_CACL2_l_AQ_r__dew2019_Kp(double t, double p):
    result = CACL2_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CACL_p_dew2019_calc.h":
    const char *CACL_p_dew2019_identifier();
    const char *CACL_p_dew2019_name();
    const char *CACL_p_dew2019_formula();
    const double CACL_p_dew2019_mw();
    const double *CACL_p_dew2019_elements();
    double CACL_p_dew2019_g(double t, double p)
    double CACL_p_dew2019_dgdt(double t, double p)
    double CACL_p_dew2019_dgdp(double t, double p)
    double CACL_p_dew2019_d2gdt2(double t, double p)
    double CACL_p_dew2019_d2gdtdp(double t, double p)
    double CACL_p_dew2019_d2gdp2(double t, double p)
    double CACL_p_dew2019_d3gdt3(double t, double p)
    double CACL_p_dew2019_d3gdt2dp(double t, double p)
    double CACL_p_dew2019_d3gdtdp2(double t, double p)
    double CACL_p_dew2019_d3gdp3(double t, double p)
    double CACL_p_dew2019_s(double t, double p)
    double CACL_p_dew2019_v(double t, double p)
    double CACL_p_dew2019_cv(double t, double p)
    double CACL_p_dew2019_cp(double t, double p)
    double CACL_p_dew2019_dcpdt(double t, double p)
    double CACL_p_dew2019_alpha(double t, double p)
    double CACL_p_dew2019_beta(double t, double p)
    double CACL_p_dew2019_K(double t, double p)
    double CACL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CACL_p_dew2019_identifier():
    result = <bytes> CACL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CACL_p_dew2019_name():
    result = <bytes> CACL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_CACL_p_dew2019_formula():
    result = <bytes> CACL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_CACL_p_dew2019_mw():
    result = CACL_p_dew2019_mw()
    return result
def cy_CACL_p_dew2019_elements():
    cdef const double *e = CACL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CACL_p_dew2019_g(double t, double p):
    result = CACL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_dgdt(double t, double p):
    result = CACL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_dgdp(double t, double p):
    result = CACL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_d2gdt2(double t, double p):
    result = CACL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_d2gdtdp(double t, double p):
    result = CACL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_d2gdp2(double t, double p):
    result = CACL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_d3gdt3(double t, double p):
    result = CACL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_d3gdt2dp(double t, double p):
    result = CACL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_d3gdtdp2(double t, double p):
    result = CACL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_d3gdp3(double t, double p):
    result = CACL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_s(double t, double p):
    result = CACL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_v(double t, double p):
    result = CACL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_cv(double t, double p):
    result = CACL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_cp(double t, double p):
    result = CACL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_dcpdt(double t, double p):
    result = CACL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_alpha(double t, double p):
    result = CACL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_beta(double t, double p):
    result = CACL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_K(double t, double p):
    result = CACL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_CACL_p_dew2019_Kp(double t, double p):
    result = CACL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CA_p2_dew2019_calc.h":
    const char *CA_p2_dew2019_identifier();
    const char *CA_p2_dew2019_name();
    const char *CA_p2_dew2019_formula();
    const double CA_p2_dew2019_mw();
    const double *CA_p2_dew2019_elements();
    double CA_p2_dew2019_g(double t, double p)
    double CA_p2_dew2019_dgdt(double t, double p)
    double CA_p2_dew2019_dgdp(double t, double p)
    double CA_p2_dew2019_d2gdt2(double t, double p)
    double CA_p2_dew2019_d2gdtdp(double t, double p)
    double CA_p2_dew2019_d2gdp2(double t, double p)
    double CA_p2_dew2019_d3gdt3(double t, double p)
    double CA_p2_dew2019_d3gdt2dp(double t, double p)
    double CA_p2_dew2019_d3gdtdp2(double t, double p)
    double CA_p2_dew2019_d3gdp3(double t, double p)
    double CA_p2_dew2019_s(double t, double p)
    double CA_p2_dew2019_v(double t, double p)
    double CA_p2_dew2019_cv(double t, double p)
    double CA_p2_dew2019_cp(double t, double p)
    double CA_p2_dew2019_dcpdt(double t, double p)
    double CA_p2_dew2019_alpha(double t, double p)
    double CA_p2_dew2019_beta(double t, double p)
    double CA_p2_dew2019_K(double t, double p)
    double CA_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CA_p2_dew2019_identifier():
    result = <bytes> CA_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CA_p2_dew2019_name():
    result = <bytes> CA_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_CA_p2_dew2019_formula():
    result = <bytes> CA_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_CA_p2_dew2019_mw():
    result = CA_p2_dew2019_mw()
    return result
def cy_CA_p2_dew2019_elements():
    cdef const double *e = CA_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CA_p2_dew2019_g(double t, double p):
    result = CA_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_dgdt(double t, double p):
    result = CA_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_dgdp(double t, double p):
    result = CA_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_d2gdt2(double t, double p):
    result = CA_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_d2gdtdp(double t, double p):
    result = CA_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_d2gdp2(double t, double p):
    result = CA_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_d3gdt3(double t, double p):
    result = CA_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_d3gdt2dp(double t, double p):
    result = CA_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_d3gdtdp2(double t, double p):
    result = CA_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_d3gdp3(double t, double p):
    result = CA_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_s(double t, double p):
    result = CA_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_v(double t, double p):
    result = CA_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_cv(double t, double p):
    result = CA_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_cp(double t, double p):
    result = CA_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_dcpdt(double t, double p):
    result = CA_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_alpha(double t, double p):
    result = CA_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_beta(double t, double p):
    result = CA_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_K(double t, double p):
    result = CA_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_CA_p2_dew2019_Kp(double t, double p):
    result = CA_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CA_l_OH_r__p_dew2019_calc.h":
    const char *CA_l_OH_r__p_dew2019_identifier();
    const char *CA_l_OH_r__p_dew2019_name();
    const char *CA_l_OH_r__p_dew2019_formula();
    const double CA_l_OH_r__p_dew2019_mw();
    const double *CA_l_OH_r__p_dew2019_elements();
    double CA_l_OH_r__p_dew2019_g(double t, double p)
    double CA_l_OH_r__p_dew2019_dgdt(double t, double p)
    double CA_l_OH_r__p_dew2019_dgdp(double t, double p)
    double CA_l_OH_r__p_dew2019_d2gdt2(double t, double p)
    double CA_l_OH_r__p_dew2019_d2gdtdp(double t, double p)
    double CA_l_OH_r__p_dew2019_d2gdp2(double t, double p)
    double CA_l_OH_r__p_dew2019_d3gdt3(double t, double p)
    double CA_l_OH_r__p_dew2019_d3gdt2dp(double t, double p)
    double CA_l_OH_r__p_dew2019_d3gdtdp2(double t, double p)
    double CA_l_OH_r__p_dew2019_d3gdp3(double t, double p)
    double CA_l_OH_r__p_dew2019_s(double t, double p)
    double CA_l_OH_r__p_dew2019_v(double t, double p)
    double CA_l_OH_r__p_dew2019_cv(double t, double p)
    double CA_l_OH_r__p_dew2019_cp(double t, double p)
    double CA_l_OH_r__p_dew2019_dcpdt(double t, double p)
    double CA_l_OH_r__p_dew2019_alpha(double t, double p)
    double CA_l_OH_r__p_dew2019_beta(double t, double p)
    double CA_l_OH_r__p_dew2019_K(double t, double p)
    double CA_l_OH_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CA_l_OH_r__p_dew2019_identifier():
    result = <bytes> CA_l_OH_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CA_l_OH_r__p_dew2019_name():
    result = <bytes> CA_l_OH_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_CA_l_OH_r__p_dew2019_formula():
    result = <bytes> CA_l_OH_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_CA_l_OH_r__p_dew2019_mw():
    result = CA_l_OH_r__p_dew2019_mw()
    return result
def cy_CA_l_OH_r__p_dew2019_elements():
    cdef const double *e = CA_l_OH_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CA_l_OH_r__p_dew2019_g(double t, double p):
    result = CA_l_OH_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_dgdt(double t, double p):
    result = CA_l_OH_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_dgdp(double t, double p):
    result = CA_l_OH_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_d2gdt2(double t, double p):
    result = CA_l_OH_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_d2gdtdp(double t, double p):
    result = CA_l_OH_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_d2gdp2(double t, double p):
    result = CA_l_OH_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_d3gdt3(double t, double p):
    result = CA_l_OH_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_d3gdt2dp(double t, double p):
    result = CA_l_OH_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_d3gdtdp2(double t, double p):
    result = CA_l_OH_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_d3gdp3(double t, double p):
    result = CA_l_OH_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_s(double t, double p):
    result = CA_l_OH_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_v(double t, double p):
    result = CA_l_OH_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_cv(double t, double p):
    result = CA_l_OH_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_cp(double t, double p):
    result = CA_l_OH_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_dcpdt(double t, double p):
    result = CA_l_OH_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_alpha(double t, double p):
    result = CA_l_OH_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_beta(double t, double p):
    result = CA_l_OH_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_K(double t, double p):
    result = CA_l_OH_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_CA_l_OH_r__p_dew2019_Kp(double t, double p):
    result = CA_l_OH_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CA_l_H3SIO4_r__p_dew2019_calc.h":
    const char *CA_l_H3SIO4_r__p_dew2019_identifier();
    const char *CA_l_H3SIO4_r__p_dew2019_name();
    const char *CA_l_H3SIO4_r__p_dew2019_formula();
    const double CA_l_H3SIO4_r__p_dew2019_mw();
    const double *CA_l_H3SIO4_r__p_dew2019_elements();
    double CA_l_H3SIO4_r__p_dew2019_g(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_dgdt(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_dgdp(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_d2gdt2(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_d2gdtdp(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_d2gdp2(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_d3gdt3(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_d3gdt2dp(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_d3gdtdp2(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_d3gdp3(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_s(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_v(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_cv(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_cp(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_dcpdt(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_alpha(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_beta(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_K(double t, double p)
    double CA_l_H3SIO4_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CA_l_H3SIO4_r__p_dew2019_identifier():
    result = <bytes> CA_l_H3SIO4_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CA_l_H3SIO4_r__p_dew2019_name():
    result = <bytes> CA_l_H3SIO4_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_CA_l_H3SIO4_r__p_dew2019_formula():
    result = <bytes> CA_l_H3SIO4_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_CA_l_H3SIO4_r__p_dew2019_mw():
    result = CA_l_H3SIO4_r__p_dew2019_mw()
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_elements():
    cdef const double *e = CA_l_H3SIO4_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CA_l_H3SIO4_r__p_dew2019_g(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_dgdt(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_dgdp(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_d2gdt2(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_d2gdtdp(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_d2gdp2(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_d3gdt3(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_d3gdt2dp(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_d3gdtdp2(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_d3gdp3(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_s(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_v(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_cv(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_cp(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_dcpdt(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_alpha(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_beta(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_K(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_CA_l_H3SIO4_r__p_dew2019_Kp(double t, double p):
    result = CA_l_H3SIO4_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CA_l_HCOO_r__p_dew2019_calc.h":
    const char *CA_l_HCOO_r__p_dew2019_identifier();
    const char *CA_l_HCOO_r__p_dew2019_name();
    const char *CA_l_HCOO_r__p_dew2019_formula();
    const double CA_l_HCOO_r__p_dew2019_mw();
    const double *CA_l_HCOO_r__p_dew2019_elements();
    double CA_l_HCOO_r__p_dew2019_g(double t, double p)
    double CA_l_HCOO_r__p_dew2019_dgdt(double t, double p)
    double CA_l_HCOO_r__p_dew2019_dgdp(double t, double p)
    double CA_l_HCOO_r__p_dew2019_d2gdt2(double t, double p)
    double CA_l_HCOO_r__p_dew2019_d2gdtdp(double t, double p)
    double CA_l_HCOO_r__p_dew2019_d2gdp2(double t, double p)
    double CA_l_HCOO_r__p_dew2019_d3gdt3(double t, double p)
    double CA_l_HCOO_r__p_dew2019_d3gdt2dp(double t, double p)
    double CA_l_HCOO_r__p_dew2019_d3gdtdp2(double t, double p)
    double CA_l_HCOO_r__p_dew2019_d3gdp3(double t, double p)
    double CA_l_HCOO_r__p_dew2019_s(double t, double p)
    double CA_l_HCOO_r__p_dew2019_v(double t, double p)
    double CA_l_HCOO_r__p_dew2019_cv(double t, double p)
    double CA_l_HCOO_r__p_dew2019_cp(double t, double p)
    double CA_l_HCOO_r__p_dew2019_dcpdt(double t, double p)
    double CA_l_HCOO_r__p_dew2019_alpha(double t, double p)
    double CA_l_HCOO_r__p_dew2019_beta(double t, double p)
    double CA_l_HCOO_r__p_dew2019_K(double t, double p)
    double CA_l_HCOO_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CA_l_HCOO_r__p_dew2019_identifier():
    result = <bytes> CA_l_HCOO_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CA_l_HCOO_r__p_dew2019_name():
    result = <bytes> CA_l_HCOO_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_CA_l_HCOO_r__p_dew2019_formula():
    result = <bytes> CA_l_HCOO_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_CA_l_HCOO_r__p_dew2019_mw():
    result = CA_l_HCOO_r__p_dew2019_mw()
    return result
def cy_CA_l_HCOO_r__p_dew2019_elements():
    cdef const double *e = CA_l_HCOO_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CA_l_HCOO_r__p_dew2019_g(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_dgdt(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_dgdp(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_d2gdt2(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_d2gdtdp(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_d2gdp2(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_d3gdt3(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_d3gdt2dp(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_d3gdtdp2(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_d3gdp3(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_s(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_v(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_cv(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_cp(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_dcpdt(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_alpha(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_beta(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_K(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_CA_l_HCOO_r__p_dew2019_Kp(double t, double p):
    result = CA_l_HCOO_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CA_l_HCO3_r__p_dew2019_calc.h":
    const char *CA_l_HCO3_r__p_dew2019_identifier();
    const char *CA_l_HCO3_r__p_dew2019_name();
    const char *CA_l_HCO3_r__p_dew2019_formula();
    const double CA_l_HCO3_r__p_dew2019_mw();
    const double *CA_l_HCO3_r__p_dew2019_elements();
    double CA_l_HCO3_r__p_dew2019_g(double t, double p)
    double CA_l_HCO3_r__p_dew2019_dgdt(double t, double p)
    double CA_l_HCO3_r__p_dew2019_dgdp(double t, double p)
    double CA_l_HCO3_r__p_dew2019_d2gdt2(double t, double p)
    double CA_l_HCO3_r__p_dew2019_d2gdtdp(double t, double p)
    double CA_l_HCO3_r__p_dew2019_d2gdp2(double t, double p)
    double CA_l_HCO3_r__p_dew2019_d3gdt3(double t, double p)
    double CA_l_HCO3_r__p_dew2019_d3gdt2dp(double t, double p)
    double CA_l_HCO3_r__p_dew2019_d3gdtdp2(double t, double p)
    double CA_l_HCO3_r__p_dew2019_d3gdp3(double t, double p)
    double CA_l_HCO3_r__p_dew2019_s(double t, double p)
    double CA_l_HCO3_r__p_dew2019_v(double t, double p)
    double CA_l_HCO3_r__p_dew2019_cv(double t, double p)
    double CA_l_HCO3_r__p_dew2019_cp(double t, double p)
    double CA_l_HCO3_r__p_dew2019_dcpdt(double t, double p)
    double CA_l_HCO3_r__p_dew2019_alpha(double t, double p)
    double CA_l_HCO3_r__p_dew2019_beta(double t, double p)
    double CA_l_HCO3_r__p_dew2019_K(double t, double p)
    double CA_l_HCO3_r__p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CA_l_HCO3_r__p_dew2019_identifier():
    result = <bytes> CA_l_HCO3_r__p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CA_l_HCO3_r__p_dew2019_name():
    result = <bytes> CA_l_HCO3_r__p_dew2019_name()
    return result.decode('UTF-8')
def cy_CA_l_HCO3_r__p_dew2019_formula():
    result = <bytes> CA_l_HCO3_r__p_dew2019_formula()
    return result.decode('UTF-8')
def cy_CA_l_HCO3_r__p_dew2019_mw():
    result = CA_l_HCO3_r__p_dew2019_mw()
    return result
def cy_CA_l_HCO3_r__p_dew2019_elements():
    cdef const double *e = CA_l_HCO3_r__p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CA_l_HCO3_r__p_dew2019_g(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_g(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_dgdt(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_dgdp(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_d2gdt2(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_d2gdtdp(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_d2gdp2(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_d3gdt3(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_d3gdt2dp(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_d3gdtdp2(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_d3gdp3(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_s(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_s(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_v(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_v(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_cv(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_cv(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_cp(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_cp(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_dcpdt(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_alpha(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_beta(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_beta(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_K(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_K(<double> t, <double> p)
    return result
def cy_CA_l_HCO3_r__p_dew2019_Kp(double t, double p):
    result = CA_l_HCO3_r__p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "BR_n_dew2019_calc.h":
    const char *BR_n_dew2019_identifier();
    const char *BR_n_dew2019_name();
    const char *BR_n_dew2019_formula();
    const double BR_n_dew2019_mw();
    const double *BR_n_dew2019_elements();
    double BR_n_dew2019_g(double t, double p)
    double BR_n_dew2019_dgdt(double t, double p)
    double BR_n_dew2019_dgdp(double t, double p)
    double BR_n_dew2019_d2gdt2(double t, double p)
    double BR_n_dew2019_d2gdtdp(double t, double p)
    double BR_n_dew2019_d2gdp2(double t, double p)
    double BR_n_dew2019_d3gdt3(double t, double p)
    double BR_n_dew2019_d3gdt2dp(double t, double p)
    double BR_n_dew2019_d3gdtdp2(double t, double p)
    double BR_n_dew2019_d3gdp3(double t, double p)
    double BR_n_dew2019_s(double t, double p)
    double BR_n_dew2019_v(double t, double p)
    double BR_n_dew2019_cv(double t, double p)
    double BR_n_dew2019_cp(double t, double p)
    double BR_n_dew2019_dcpdt(double t, double p)
    double BR_n_dew2019_alpha(double t, double p)
    double BR_n_dew2019_beta(double t, double p)
    double BR_n_dew2019_K(double t, double p)
    double BR_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_BR_n_dew2019_identifier():
    result = <bytes> BR_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_BR_n_dew2019_name():
    result = <bytes> BR_n_dew2019_name()
    return result.decode('UTF-8')
def cy_BR_n_dew2019_formula():
    result = <bytes> BR_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_BR_n_dew2019_mw():
    result = BR_n_dew2019_mw()
    return result
def cy_BR_n_dew2019_elements():
    cdef const double *e = BR_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_BR_n_dew2019_g(double t, double p):
    result = BR_n_dew2019_g(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_dgdt(double t, double p):
    result = BR_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_dgdp(double t, double p):
    result = BR_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_d2gdt2(double t, double p):
    result = BR_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_d2gdtdp(double t, double p):
    result = BR_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_d2gdp2(double t, double p):
    result = BR_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_d3gdt3(double t, double p):
    result = BR_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_d3gdt2dp(double t, double p):
    result = BR_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_d3gdtdp2(double t, double p):
    result = BR_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_d3gdp3(double t, double p):
    result = BR_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_s(double t, double p):
    result = BR_n_dew2019_s(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_v(double t, double p):
    result = BR_n_dew2019_v(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_cv(double t, double p):
    result = BR_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_cp(double t, double p):
    result = BR_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_dcpdt(double t, double p):
    result = BR_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_alpha(double t, double p):
    result = BR_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_beta(double t, double p):
    result = BR_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_K(double t, double p):
    result = BR_n_dew2019_K(<double> t, <double> p)
    return result
def cy_BR_n_dew2019_Kp(double t, double p):
    result = BR_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "BO2_n_dew2019_calc.h":
    const char *BO2_n_dew2019_identifier();
    const char *BO2_n_dew2019_name();
    const char *BO2_n_dew2019_formula();
    const double BO2_n_dew2019_mw();
    const double *BO2_n_dew2019_elements();
    double BO2_n_dew2019_g(double t, double p)
    double BO2_n_dew2019_dgdt(double t, double p)
    double BO2_n_dew2019_dgdp(double t, double p)
    double BO2_n_dew2019_d2gdt2(double t, double p)
    double BO2_n_dew2019_d2gdtdp(double t, double p)
    double BO2_n_dew2019_d2gdp2(double t, double p)
    double BO2_n_dew2019_d3gdt3(double t, double p)
    double BO2_n_dew2019_d3gdt2dp(double t, double p)
    double BO2_n_dew2019_d3gdtdp2(double t, double p)
    double BO2_n_dew2019_d3gdp3(double t, double p)
    double BO2_n_dew2019_s(double t, double p)
    double BO2_n_dew2019_v(double t, double p)
    double BO2_n_dew2019_cv(double t, double p)
    double BO2_n_dew2019_cp(double t, double p)
    double BO2_n_dew2019_dcpdt(double t, double p)
    double BO2_n_dew2019_alpha(double t, double p)
    double BO2_n_dew2019_beta(double t, double p)
    double BO2_n_dew2019_K(double t, double p)
    double BO2_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_BO2_n_dew2019_identifier():
    result = <bytes> BO2_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_BO2_n_dew2019_name():
    result = <bytes> BO2_n_dew2019_name()
    return result.decode('UTF-8')
def cy_BO2_n_dew2019_formula():
    result = <bytes> BO2_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_BO2_n_dew2019_mw():
    result = BO2_n_dew2019_mw()
    return result
def cy_BO2_n_dew2019_elements():
    cdef const double *e = BO2_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_BO2_n_dew2019_g(double t, double p):
    result = BO2_n_dew2019_g(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_dgdt(double t, double p):
    result = BO2_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_dgdp(double t, double p):
    result = BO2_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_d2gdt2(double t, double p):
    result = BO2_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_d2gdtdp(double t, double p):
    result = BO2_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_d2gdp2(double t, double p):
    result = BO2_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_d3gdt3(double t, double p):
    result = BO2_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_d3gdt2dp(double t, double p):
    result = BO2_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_d3gdtdp2(double t, double p):
    result = BO2_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_d3gdp3(double t, double p):
    result = BO2_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_s(double t, double p):
    result = BO2_n_dew2019_s(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_v(double t, double p):
    result = BO2_n_dew2019_v(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_cv(double t, double p):
    result = BO2_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_cp(double t, double p):
    result = BO2_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_dcpdt(double t, double p):
    result = BO2_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_alpha(double t, double p):
    result = BO2_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_beta(double t, double p):
    result = BO2_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_K(double t, double p):
    result = BO2_n_dew2019_K(<double> t, <double> p)
    return result
def cy_BO2_n_dew2019_Kp(double t, double p):
    result = BO2_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "BO_l_OH_r__l_AQ_r__dew2019_calc.h":
    const char *BO_l_OH_r__l_AQ_r__dew2019_identifier();
    const char *BO_l_OH_r__l_AQ_r__dew2019_name();
    const char *BO_l_OH_r__l_AQ_r__dew2019_formula();
    const double BO_l_OH_r__l_AQ_r__dew2019_mw();
    const double *BO_l_OH_r__l_AQ_r__dew2019_elements();
    double BO_l_OH_r__l_AQ_r__dew2019_g(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_dgdt(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_dgdp(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_d2gdt2(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_d2gdp2(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_d3gdt3(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_d3gdp3(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_s(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_v(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_cv(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_cp(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_dcpdt(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_alpha(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_beta(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_K(double t, double p)
    double BO_l_OH_r__l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_BO_l_OH_r__l_AQ_r__dew2019_identifier():
    result = <bytes> BO_l_OH_r__l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_BO_l_OH_r__l_AQ_r__dew2019_name():
    result = <bytes> BO_l_OH_r__l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_BO_l_OH_r__l_AQ_r__dew2019_formula():
    result = <bytes> BO_l_OH_r__l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_BO_l_OH_r__l_AQ_r__dew2019_mw():
    result = BO_l_OH_r__l_AQ_r__dew2019_mw()
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_elements():
    cdef const double *e = BO_l_OH_r__l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_BO_l_OH_r__l_AQ_r__dew2019_g(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_dgdt(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_dgdp(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_s(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_v(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_cv(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_cp(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_dcpdt(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_alpha(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_beta(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_K(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_BO_l_OH_r__l_AQ_r__dew2019_Kp(double t, double p):
    result = BO_l_OH_r__l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "BENZENE_l_AQ_r__dew2019_calc.h":
    const char *BENZENE_l_AQ_r__dew2019_identifier();
    const char *BENZENE_l_AQ_r__dew2019_name();
    const char *BENZENE_l_AQ_r__dew2019_formula();
    const double BENZENE_l_AQ_r__dew2019_mw();
    const double *BENZENE_l_AQ_r__dew2019_elements();
    double BENZENE_l_AQ_r__dew2019_g(double t, double p)
    double BENZENE_l_AQ_r__dew2019_dgdt(double t, double p)
    double BENZENE_l_AQ_r__dew2019_dgdp(double t, double p)
    double BENZENE_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double BENZENE_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double BENZENE_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double BENZENE_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double BENZENE_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double BENZENE_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double BENZENE_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double BENZENE_l_AQ_r__dew2019_s(double t, double p)
    double BENZENE_l_AQ_r__dew2019_v(double t, double p)
    double BENZENE_l_AQ_r__dew2019_cv(double t, double p)
    double BENZENE_l_AQ_r__dew2019_cp(double t, double p)
    double BENZENE_l_AQ_r__dew2019_dcpdt(double t, double p)
    double BENZENE_l_AQ_r__dew2019_alpha(double t, double p)
    double BENZENE_l_AQ_r__dew2019_beta(double t, double p)
    double BENZENE_l_AQ_r__dew2019_K(double t, double p)
    double BENZENE_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_BENZENE_l_AQ_r__dew2019_identifier():
    result = <bytes> BENZENE_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_BENZENE_l_AQ_r__dew2019_name():
    result = <bytes> BENZENE_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_BENZENE_l_AQ_r__dew2019_formula():
    result = <bytes> BENZENE_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_BENZENE_l_AQ_r__dew2019_mw():
    result = BENZENE_l_AQ_r__dew2019_mw()
    return result
def cy_BENZENE_l_AQ_r__dew2019_elements():
    cdef const double *e = BENZENE_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_BENZENE_l_AQ_r__dew2019_g(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_dgdt(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_dgdp(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_s(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_v(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_cv(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_cp(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_alpha(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_beta(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_K(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_BENZENE_l_AQ_r__dew2019_Kp(double t, double p):
    result = BENZENE_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "BE_p2_dew2019_calc.h":
    const char *BE_p2_dew2019_identifier();
    const char *BE_p2_dew2019_name();
    const char *BE_p2_dew2019_formula();
    const double BE_p2_dew2019_mw();
    const double *BE_p2_dew2019_elements();
    double BE_p2_dew2019_g(double t, double p)
    double BE_p2_dew2019_dgdt(double t, double p)
    double BE_p2_dew2019_dgdp(double t, double p)
    double BE_p2_dew2019_d2gdt2(double t, double p)
    double BE_p2_dew2019_d2gdtdp(double t, double p)
    double BE_p2_dew2019_d2gdp2(double t, double p)
    double BE_p2_dew2019_d3gdt3(double t, double p)
    double BE_p2_dew2019_d3gdt2dp(double t, double p)
    double BE_p2_dew2019_d3gdtdp2(double t, double p)
    double BE_p2_dew2019_d3gdp3(double t, double p)
    double BE_p2_dew2019_s(double t, double p)
    double BE_p2_dew2019_v(double t, double p)
    double BE_p2_dew2019_cv(double t, double p)
    double BE_p2_dew2019_cp(double t, double p)
    double BE_p2_dew2019_dcpdt(double t, double p)
    double BE_p2_dew2019_alpha(double t, double p)
    double BE_p2_dew2019_beta(double t, double p)
    double BE_p2_dew2019_K(double t, double p)
    double BE_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_BE_p2_dew2019_identifier():
    result = <bytes> BE_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_BE_p2_dew2019_name():
    result = <bytes> BE_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_BE_p2_dew2019_formula():
    result = <bytes> BE_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_BE_p2_dew2019_mw():
    result = BE_p2_dew2019_mw()
    return result
def cy_BE_p2_dew2019_elements():
    cdef const double *e = BE_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_BE_p2_dew2019_g(double t, double p):
    result = BE_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_dgdt(double t, double p):
    result = BE_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_dgdp(double t, double p):
    result = BE_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_d2gdt2(double t, double p):
    result = BE_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_d2gdtdp(double t, double p):
    result = BE_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_d2gdp2(double t, double p):
    result = BE_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_d3gdt3(double t, double p):
    result = BE_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_d3gdt2dp(double t, double p):
    result = BE_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_d3gdtdp2(double t, double p):
    result = BE_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_d3gdp3(double t, double p):
    result = BE_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_s(double t, double p):
    result = BE_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_v(double t, double p):
    result = BE_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_cv(double t, double p):
    result = BE_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_cp(double t, double p):
    result = BE_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_dcpdt(double t, double p):
    result = BE_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_alpha(double t, double p):
    result = BE_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_beta(double t, double p):
    result = BE_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_K(double t, double p):
    result = BE_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_BE_p2_dew2019_Kp(double t, double p):
    result = BE_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "BACL_p_dew2019_calc.h":
    const char *BACL_p_dew2019_identifier();
    const char *BACL_p_dew2019_name();
    const char *BACL_p_dew2019_formula();
    const double BACL_p_dew2019_mw();
    const double *BACL_p_dew2019_elements();
    double BACL_p_dew2019_g(double t, double p)
    double BACL_p_dew2019_dgdt(double t, double p)
    double BACL_p_dew2019_dgdp(double t, double p)
    double BACL_p_dew2019_d2gdt2(double t, double p)
    double BACL_p_dew2019_d2gdtdp(double t, double p)
    double BACL_p_dew2019_d2gdp2(double t, double p)
    double BACL_p_dew2019_d3gdt3(double t, double p)
    double BACL_p_dew2019_d3gdt2dp(double t, double p)
    double BACL_p_dew2019_d3gdtdp2(double t, double p)
    double BACL_p_dew2019_d3gdp3(double t, double p)
    double BACL_p_dew2019_s(double t, double p)
    double BACL_p_dew2019_v(double t, double p)
    double BACL_p_dew2019_cv(double t, double p)
    double BACL_p_dew2019_cp(double t, double p)
    double BACL_p_dew2019_dcpdt(double t, double p)
    double BACL_p_dew2019_alpha(double t, double p)
    double BACL_p_dew2019_beta(double t, double p)
    double BACL_p_dew2019_K(double t, double p)
    double BACL_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_BACL_p_dew2019_identifier():
    result = <bytes> BACL_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_BACL_p_dew2019_name():
    result = <bytes> BACL_p_dew2019_name()
    return result.decode('UTF-8')
def cy_BACL_p_dew2019_formula():
    result = <bytes> BACL_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_BACL_p_dew2019_mw():
    result = BACL_p_dew2019_mw()
    return result
def cy_BACL_p_dew2019_elements():
    cdef const double *e = BACL_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_BACL_p_dew2019_g(double t, double p):
    result = BACL_p_dew2019_g(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_dgdt(double t, double p):
    result = BACL_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_dgdp(double t, double p):
    result = BACL_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_d2gdt2(double t, double p):
    result = BACL_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_d2gdtdp(double t, double p):
    result = BACL_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_d2gdp2(double t, double p):
    result = BACL_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_d3gdt3(double t, double p):
    result = BACL_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_d3gdt2dp(double t, double p):
    result = BACL_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_d3gdtdp2(double t, double p):
    result = BACL_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_d3gdp3(double t, double p):
    result = BACL_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_s(double t, double p):
    result = BACL_p_dew2019_s(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_v(double t, double p):
    result = BACL_p_dew2019_v(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_cv(double t, double p):
    result = BACL_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_cp(double t, double p):
    result = BACL_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_dcpdt(double t, double p):
    result = BACL_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_alpha(double t, double p):
    result = BACL_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_beta(double t, double p):
    result = BACL_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_K(double t, double p):
    result = BACL_p_dew2019_K(<double> t, <double> p)
    return result
def cy_BACL_p_dew2019_Kp(double t, double p):
    result = BACL_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "BA_p2_dew2019_calc.h":
    const char *BA_p2_dew2019_identifier();
    const char *BA_p2_dew2019_name();
    const char *BA_p2_dew2019_formula();
    const double BA_p2_dew2019_mw();
    const double *BA_p2_dew2019_elements();
    double BA_p2_dew2019_g(double t, double p)
    double BA_p2_dew2019_dgdt(double t, double p)
    double BA_p2_dew2019_dgdp(double t, double p)
    double BA_p2_dew2019_d2gdt2(double t, double p)
    double BA_p2_dew2019_d2gdtdp(double t, double p)
    double BA_p2_dew2019_d2gdp2(double t, double p)
    double BA_p2_dew2019_d3gdt3(double t, double p)
    double BA_p2_dew2019_d3gdt2dp(double t, double p)
    double BA_p2_dew2019_d3gdtdp2(double t, double p)
    double BA_p2_dew2019_d3gdp3(double t, double p)
    double BA_p2_dew2019_s(double t, double p)
    double BA_p2_dew2019_v(double t, double p)
    double BA_p2_dew2019_cv(double t, double p)
    double BA_p2_dew2019_cp(double t, double p)
    double BA_p2_dew2019_dcpdt(double t, double p)
    double BA_p2_dew2019_alpha(double t, double p)
    double BA_p2_dew2019_beta(double t, double p)
    double BA_p2_dew2019_K(double t, double p)
    double BA_p2_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_BA_p2_dew2019_identifier():
    result = <bytes> BA_p2_dew2019_identifier()
    return result.decode('UTF-8')
def cy_BA_p2_dew2019_name():
    result = <bytes> BA_p2_dew2019_name()
    return result.decode('UTF-8')
def cy_BA_p2_dew2019_formula():
    result = <bytes> BA_p2_dew2019_formula()
    return result.decode('UTF-8')
def cy_BA_p2_dew2019_mw():
    result = BA_p2_dew2019_mw()
    return result
def cy_BA_p2_dew2019_elements():
    cdef const double *e = BA_p2_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_BA_p2_dew2019_g(double t, double p):
    result = BA_p2_dew2019_g(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_dgdt(double t, double p):
    result = BA_p2_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_dgdp(double t, double p):
    result = BA_p2_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_d2gdt2(double t, double p):
    result = BA_p2_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_d2gdtdp(double t, double p):
    result = BA_p2_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_d2gdp2(double t, double p):
    result = BA_p2_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_d3gdt3(double t, double p):
    result = BA_p2_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_d3gdt2dp(double t, double p):
    result = BA_p2_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_d3gdtdp2(double t, double p):
    result = BA_p2_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_d3gdp3(double t, double p):
    result = BA_p2_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_s(double t, double p):
    result = BA_p2_dew2019_s(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_v(double t, double p):
    result = BA_p2_dew2019_v(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_cv(double t, double p):
    result = BA_p2_dew2019_cv(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_cp(double t, double p):
    result = BA_p2_dew2019_cp(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_dcpdt(double t, double p):
    result = BA_p2_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_alpha(double t, double p):
    result = BA_p2_dew2019_alpha(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_beta(double t, double p):
    result = BA_p2_dew2019_beta(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_K(double t, double p):
    result = BA_p2_dew2019_K(<double> t, <double> p)
    return result
def cy_BA_p2_dew2019_Kp(double t, double p):
    result = BA_p2_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "B_l_OH_r_3_l_AQ_r__dew2019_calc.h":
    const char *B_l_OH_r_3_l_AQ_r__dew2019_identifier();
    const char *B_l_OH_r_3_l_AQ_r__dew2019_name();
    const char *B_l_OH_r_3_l_AQ_r__dew2019_formula();
    const double B_l_OH_r_3_l_AQ_r__dew2019_mw();
    const double *B_l_OH_r_3_l_AQ_r__dew2019_elements();
    double B_l_OH_r_3_l_AQ_r__dew2019_g(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_dgdt(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_dgdp(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_s(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_v(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_cv(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_cp(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_dcpdt(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_alpha(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_beta(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_K(double t, double p)
    double B_l_OH_r_3_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_B_l_OH_r_3_l_AQ_r__dew2019_identifier():
    result = <bytes> B_l_OH_r_3_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_B_l_OH_r_3_l_AQ_r__dew2019_name():
    result = <bytes> B_l_OH_r_3_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_B_l_OH_r_3_l_AQ_r__dew2019_formula():
    result = <bytes> B_l_OH_r_3_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_B_l_OH_r_3_l_AQ_r__dew2019_mw():
    result = B_l_OH_r_3_l_AQ_r__dew2019_mw()
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_elements():
    cdef const double *e = B_l_OH_r_3_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_B_l_OH_r_3_l_AQ_r__dew2019_g(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_dgdt(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_dgdp(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_s(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_v(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_cv(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_cp(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_alpha(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_beta(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_K(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_B_l_OH_r_3_l_AQ_r__dew2019_Kp(double t, double p):
    result = B_l_OH_r_3_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AU_p3_dew2019_calc.h":
    const char *AU_p3_dew2019_identifier();
    const char *AU_p3_dew2019_name();
    const char *AU_p3_dew2019_formula();
    const double AU_p3_dew2019_mw();
    const double *AU_p3_dew2019_elements();
    double AU_p3_dew2019_g(double t, double p)
    double AU_p3_dew2019_dgdt(double t, double p)
    double AU_p3_dew2019_dgdp(double t, double p)
    double AU_p3_dew2019_d2gdt2(double t, double p)
    double AU_p3_dew2019_d2gdtdp(double t, double p)
    double AU_p3_dew2019_d2gdp2(double t, double p)
    double AU_p3_dew2019_d3gdt3(double t, double p)
    double AU_p3_dew2019_d3gdt2dp(double t, double p)
    double AU_p3_dew2019_d3gdtdp2(double t, double p)
    double AU_p3_dew2019_d3gdp3(double t, double p)
    double AU_p3_dew2019_s(double t, double p)
    double AU_p3_dew2019_v(double t, double p)
    double AU_p3_dew2019_cv(double t, double p)
    double AU_p3_dew2019_cp(double t, double p)
    double AU_p3_dew2019_dcpdt(double t, double p)
    double AU_p3_dew2019_alpha(double t, double p)
    double AU_p3_dew2019_beta(double t, double p)
    double AU_p3_dew2019_K(double t, double p)
    double AU_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AU_p3_dew2019_identifier():
    result = <bytes> AU_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_AU_p3_dew2019_name():
    result = <bytes> AU_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_AU_p3_dew2019_formula():
    result = <bytes> AU_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_AU_p3_dew2019_mw():
    result = AU_p3_dew2019_mw()
    return result
def cy_AU_p3_dew2019_elements():
    cdef const double *e = AU_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AU_p3_dew2019_g(double t, double p):
    result = AU_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_dgdt(double t, double p):
    result = AU_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_dgdp(double t, double p):
    result = AU_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_d2gdt2(double t, double p):
    result = AU_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_d2gdtdp(double t, double p):
    result = AU_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_d2gdp2(double t, double p):
    result = AU_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_d3gdt3(double t, double p):
    result = AU_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_d3gdt2dp(double t, double p):
    result = AU_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_d3gdtdp2(double t, double p):
    result = AU_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_d3gdp3(double t, double p):
    result = AU_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_s(double t, double p):
    result = AU_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_v(double t, double p):
    result = AU_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_cv(double t, double p):
    result = AU_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_cp(double t, double p):
    result = AU_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_dcpdt(double t, double p):
    result = AU_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_alpha(double t, double p):
    result = AU_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_beta(double t, double p):
    result = AU_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_K(double t, double p):
    result = AU_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_AU_p3_dew2019_Kp(double t, double p):
    result = AU_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AU_p_dew2019_calc.h":
    const char *AU_p_dew2019_identifier();
    const char *AU_p_dew2019_name();
    const char *AU_p_dew2019_formula();
    const double AU_p_dew2019_mw();
    const double *AU_p_dew2019_elements();
    double AU_p_dew2019_g(double t, double p)
    double AU_p_dew2019_dgdt(double t, double p)
    double AU_p_dew2019_dgdp(double t, double p)
    double AU_p_dew2019_d2gdt2(double t, double p)
    double AU_p_dew2019_d2gdtdp(double t, double p)
    double AU_p_dew2019_d2gdp2(double t, double p)
    double AU_p_dew2019_d3gdt3(double t, double p)
    double AU_p_dew2019_d3gdt2dp(double t, double p)
    double AU_p_dew2019_d3gdtdp2(double t, double p)
    double AU_p_dew2019_d3gdp3(double t, double p)
    double AU_p_dew2019_s(double t, double p)
    double AU_p_dew2019_v(double t, double p)
    double AU_p_dew2019_cv(double t, double p)
    double AU_p_dew2019_cp(double t, double p)
    double AU_p_dew2019_dcpdt(double t, double p)
    double AU_p_dew2019_alpha(double t, double p)
    double AU_p_dew2019_beta(double t, double p)
    double AU_p_dew2019_K(double t, double p)
    double AU_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AU_p_dew2019_identifier():
    result = <bytes> AU_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_AU_p_dew2019_name():
    result = <bytes> AU_p_dew2019_name()
    return result.decode('UTF-8')
def cy_AU_p_dew2019_formula():
    result = <bytes> AU_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_AU_p_dew2019_mw():
    result = AU_p_dew2019_mw()
    return result
def cy_AU_p_dew2019_elements():
    cdef const double *e = AU_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AU_p_dew2019_g(double t, double p):
    result = AU_p_dew2019_g(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_dgdt(double t, double p):
    result = AU_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_dgdp(double t, double p):
    result = AU_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_d2gdt2(double t, double p):
    result = AU_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_d2gdtdp(double t, double p):
    result = AU_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_d2gdp2(double t, double p):
    result = AU_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_d3gdt3(double t, double p):
    result = AU_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_d3gdt2dp(double t, double p):
    result = AU_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_d3gdtdp2(double t, double p):
    result = AU_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_d3gdp3(double t, double p):
    result = AU_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_s(double t, double p):
    result = AU_p_dew2019_s(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_v(double t, double p):
    result = AU_p_dew2019_v(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_cv(double t, double p):
    result = AU_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_cp(double t, double p):
    result = AU_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_dcpdt(double t, double p):
    result = AU_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_alpha(double t, double p):
    result = AU_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_beta(double t, double p):
    result = AU_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_K(double t, double p):
    result = AU_p_dew2019_K(<double> t, <double> p)
    return result
def cy_AU_p_dew2019_Kp(double t, double p):
    result = AU_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AR_l_AQ_r__dew2019_calc.h":
    const char *AR_l_AQ_r__dew2019_identifier();
    const char *AR_l_AQ_r__dew2019_name();
    const char *AR_l_AQ_r__dew2019_formula();
    const double AR_l_AQ_r__dew2019_mw();
    const double *AR_l_AQ_r__dew2019_elements();
    double AR_l_AQ_r__dew2019_g(double t, double p)
    double AR_l_AQ_r__dew2019_dgdt(double t, double p)
    double AR_l_AQ_r__dew2019_dgdp(double t, double p)
    double AR_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double AR_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double AR_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double AR_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double AR_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double AR_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double AR_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double AR_l_AQ_r__dew2019_s(double t, double p)
    double AR_l_AQ_r__dew2019_v(double t, double p)
    double AR_l_AQ_r__dew2019_cv(double t, double p)
    double AR_l_AQ_r__dew2019_cp(double t, double p)
    double AR_l_AQ_r__dew2019_dcpdt(double t, double p)
    double AR_l_AQ_r__dew2019_alpha(double t, double p)
    double AR_l_AQ_r__dew2019_beta(double t, double p)
    double AR_l_AQ_r__dew2019_K(double t, double p)
    double AR_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AR_l_AQ_r__dew2019_identifier():
    result = <bytes> AR_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_AR_l_AQ_r__dew2019_name():
    result = <bytes> AR_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_AR_l_AQ_r__dew2019_formula():
    result = <bytes> AR_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_AR_l_AQ_r__dew2019_mw():
    result = AR_l_AQ_r__dew2019_mw()
    return result
def cy_AR_l_AQ_r__dew2019_elements():
    cdef const double *e = AR_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AR_l_AQ_r__dew2019_g(double t, double p):
    result = AR_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_dgdt(double t, double p):
    result = AR_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_dgdp(double t, double p):
    result = AR_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = AR_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = AR_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = AR_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = AR_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = AR_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = AR_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = AR_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_s(double t, double p):
    result = AR_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_v(double t, double p):
    result = AR_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_cv(double t, double p):
    result = AR_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_cp(double t, double p):
    result = AR_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = AR_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_alpha(double t, double p):
    result = AR_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_beta(double t, double p):
    result = AR_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_K(double t, double p):
    result = AR_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_AR_l_AQ_r__dew2019_Kp(double t, double p):
    result = AR_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AL_l_OH_r_SI_l_OH_r__n_dew2019_calc.h":
    const char *AL_l_OH_r_SI_l_OH_r__n_dew2019_identifier();
    const char *AL_l_OH_r_SI_l_OH_r__n_dew2019_name();
    const char *AL_l_OH_r_SI_l_OH_r__n_dew2019_formula();
    const double AL_l_OH_r_SI_l_OH_r__n_dew2019_mw();
    const double *AL_l_OH_r_SI_l_OH_r__n_dew2019_elements();
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_g(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_dgdt(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_dgdp(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdt2(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdtdp(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdp2(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdt3(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdt2dp(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdtdp2(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdp3(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_s(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_v(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_cv(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_cp(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_dcpdt(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_alpha(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_beta(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_K(double t, double p)
    double AL_l_OH_r_SI_l_OH_r__n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_identifier():
    result = <bytes> AL_l_OH_r_SI_l_OH_r__n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_name():
    result = <bytes> AL_l_OH_r_SI_l_OH_r__n_dew2019_name()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_formula():
    result = <bytes> AL_l_OH_r_SI_l_OH_r__n_dew2019_formula()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_mw():
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_mw()
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_elements():
    cdef const double *e = AL_l_OH_r_SI_l_OH_r__n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_g(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_g(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_dgdt(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_dgdp(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdt2(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdtdp(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdp2(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdt3(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdt2dp(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdtdp2(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdp3(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_s(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_s(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_v(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_v(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_cv(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_cv(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_cp(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_cp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_dcpdt(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_alpha(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_beta(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_beta(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_K(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_K(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_SI_l_OH_r__n_dew2019_Kp(double t, double p):
    result = AL_l_OH_r_SI_l_OH_r__n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AL_l_OH_r_4_n_dew2019_calc.h":
    const char *AL_l_OH_r_4_n_dew2019_identifier();
    const char *AL_l_OH_r_4_n_dew2019_name();
    const char *AL_l_OH_r_4_n_dew2019_formula();
    const double AL_l_OH_r_4_n_dew2019_mw();
    const double *AL_l_OH_r_4_n_dew2019_elements();
    double AL_l_OH_r_4_n_dew2019_g(double t, double p)
    double AL_l_OH_r_4_n_dew2019_dgdt(double t, double p)
    double AL_l_OH_r_4_n_dew2019_dgdp(double t, double p)
    double AL_l_OH_r_4_n_dew2019_d2gdt2(double t, double p)
    double AL_l_OH_r_4_n_dew2019_d2gdtdp(double t, double p)
    double AL_l_OH_r_4_n_dew2019_d2gdp2(double t, double p)
    double AL_l_OH_r_4_n_dew2019_d3gdt3(double t, double p)
    double AL_l_OH_r_4_n_dew2019_d3gdt2dp(double t, double p)
    double AL_l_OH_r_4_n_dew2019_d3gdtdp2(double t, double p)
    double AL_l_OH_r_4_n_dew2019_d3gdp3(double t, double p)
    double AL_l_OH_r_4_n_dew2019_s(double t, double p)
    double AL_l_OH_r_4_n_dew2019_v(double t, double p)
    double AL_l_OH_r_4_n_dew2019_cv(double t, double p)
    double AL_l_OH_r_4_n_dew2019_cp(double t, double p)
    double AL_l_OH_r_4_n_dew2019_dcpdt(double t, double p)
    double AL_l_OH_r_4_n_dew2019_alpha(double t, double p)
    double AL_l_OH_r_4_n_dew2019_beta(double t, double p)
    double AL_l_OH_r_4_n_dew2019_K(double t, double p)
    double AL_l_OH_r_4_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AL_l_OH_r_4_n_dew2019_identifier():
    result = <bytes> AL_l_OH_r_4_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_4_n_dew2019_name():
    result = <bytes> AL_l_OH_r_4_n_dew2019_name()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_4_n_dew2019_formula():
    result = <bytes> AL_l_OH_r_4_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_AL_l_OH_r_4_n_dew2019_mw():
    result = AL_l_OH_r_4_n_dew2019_mw()
    return result
def cy_AL_l_OH_r_4_n_dew2019_elements():
    cdef const double *e = AL_l_OH_r_4_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AL_l_OH_r_4_n_dew2019_g(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_g(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_dgdt(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_dgdp(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_d2gdt2(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_d2gdtdp(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_d2gdp2(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_d3gdt3(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_d3gdt2dp(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_d3gdtdp2(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_d3gdp3(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_s(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_s(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_v(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_v(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_cv(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_cp(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_dcpdt(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_alpha(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_beta(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_K(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_K(<double> t, <double> p)
    return result
def cy_AL_l_OH_r_4_n_dew2019_Kp(double t, double p):
    result = AL_l_OH_r_4_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AL_p3_dew2019_calc.h":
    const char *AL_p3_dew2019_identifier();
    const char *AL_p3_dew2019_name();
    const char *AL_p3_dew2019_formula();
    const double AL_p3_dew2019_mw();
    const double *AL_p3_dew2019_elements();
    double AL_p3_dew2019_g(double t, double p)
    double AL_p3_dew2019_dgdt(double t, double p)
    double AL_p3_dew2019_dgdp(double t, double p)
    double AL_p3_dew2019_d2gdt2(double t, double p)
    double AL_p3_dew2019_d2gdtdp(double t, double p)
    double AL_p3_dew2019_d2gdp2(double t, double p)
    double AL_p3_dew2019_d3gdt3(double t, double p)
    double AL_p3_dew2019_d3gdt2dp(double t, double p)
    double AL_p3_dew2019_d3gdtdp2(double t, double p)
    double AL_p3_dew2019_d3gdp3(double t, double p)
    double AL_p3_dew2019_s(double t, double p)
    double AL_p3_dew2019_v(double t, double p)
    double AL_p3_dew2019_cv(double t, double p)
    double AL_p3_dew2019_cp(double t, double p)
    double AL_p3_dew2019_dcpdt(double t, double p)
    double AL_p3_dew2019_alpha(double t, double p)
    double AL_p3_dew2019_beta(double t, double p)
    double AL_p3_dew2019_K(double t, double p)
    double AL_p3_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AL_p3_dew2019_identifier():
    result = <bytes> AL_p3_dew2019_identifier()
    return result.decode('UTF-8')
def cy_AL_p3_dew2019_name():
    result = <bytes> AL_p3_dew2019_name()
    return result.decode('UTF-8')
def cy_AL_p3_dew2019_formula():
    result = <bytes> AL_p3_dew2019_formula()
    return result.decode('UTF-8')
def cy_AL_p3_dew2019_mw():
    result = AL_p3_dew2019_mw()
    return result
def cy_AL_p3_dew2019_elements():
    cdef const double *e = AL_p3_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AL_p3_dew2019_g(double t, double p):
    result = AL_p3_dew2019_g(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_dgdt(double t, double p):
    result = AL_p3_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_dgdp(double t, double p):
    result = AL_p3_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_d2gdt2(double t, double p):
    result = AL_p3_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_d2gdtdp(double t, double p):
    result = AL_p3_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_d2gdp2(double t, double p):
    result = AL_p3_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_d3gdt3(double t, double p):
    result = AL_p3_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_d3gdt2dp(double t, double p):
    result = AL_p3_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_d3gdtdp2(double t, double p):
    result = AL_p3_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_d3gdp3(double t, double p):
    result = AL_p3_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_s(double t, double p):
    result = AL_p3_dew2019_s(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_v(double t, double p):
    result = AL_p3_dew2019_v(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_cv(double t, double p):
    result = AL_p3_dew2019_cv(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_cp(double t, double p):
    result = AL_p3_dew2019_cp(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_dcpdt(double t, double p):
    result = AL_p3_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_alpha(double t, double p):
    result = AL_p3_dew2019_alpha(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_beta(double t, double p):
    result = AL_p3_dew2019_beta(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_K(double t, double p):
    result = AL_p3_dew2019_K(<double> t, <double> p)
    return result
def cy_AL_p3_dew2019_Kp(double t, double p):
    result = AL_p3_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AGCL2_n_dew2019_calc.h":
    const char *AGCL2_n_dew2019_identifier();
    const char *AGCL2_n_dew2019_name();
    const char *AGCL2_n_dew2019_formula();
    const double AGCL2_n_dew2019_mw();
    const double *AGCL2_n_dew2019_elements();
    double AGCL2_n_dew2019_g(double t, double p)
    double AGCL2_n_dew2019_dgdt(double t, double p)
    double AGCL2_n_dew2019_dgdp(double t, double p)
    double AGCL2_n_dew2019_d2gdt2(double t, double p)
    double AGCL2_n_dew2019_d2gdtdp(double t, double p)
    double AGCL2_n_dew2019_d2gdp2(double t, double p)
    double AGCL2_n_dew2019_d3gdt3(double t, double p)
    double AGCL2_n_dew2019_d3gdt2dp(double t, double p)
    double AGCL2_n_dew2019_d3gdtdp2(double t, double p)
    double AGCL2_n_dew2019_d3gdp3(double t, double p)
    double AGCL2_n_dew2019_s(double t, double p)
    double AGCL2_n_dew2019_v(double t, double p)
    double AGCL2_n_dew2019_cv(double t, double p)
    double AGCL2_n_dew2019_cp(double t, double p)
    double AGCL2_n_dew2019_dcpdt(double t, double p)
    double AGCL2_n_dew2019_alpha(double t, double p)
    double AGCL2_n_dew2019_beta(double t, double p)
    double AGCL2_n_dew2019_K(double t, double p)
    double AGCL2_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AGCL2_n_dew2019_identifier():
    result = <bytes> AGCL2_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_AGCL2_n_dew2019_name():
    result = <bytes> AGCL2_n_dew2019_name()
    return result.decode('UTF-8')
def cy_AGCL2_n_dew2019_formula():
    result = <bytes> AGCL2_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_AGCL2_n_dew2019_mw():
    result = AGCL2_n_dew2019_mw()
    return result
def cy_AGCL2_n_dew2019_elements():
    cdef const double *e = AGCL2_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AGCL2_n_dew2019_g(double t, double p):
    result = AGCL2_n_dew2019_g(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_dgdt(double t, double p):
    result = AGCL2_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_dgdp(double t, double p):
    result = AGCL2_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_d2gdt2(double t, double p):
    result = AGCL2_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_d2gdtdp(double t, double p):
    result = AGCL2_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_d2gdp2(double t, double p):
    result = AGCL2_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_d3gdt3(double t, double p):
    result = AGCL2_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_d3gdt2dp(double t, double p):
    result = AGCL2_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_d3gdtdp2(double t, double p):
    result = AGCL2_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_d3gdp3(double t, double p):
    result = AGCL2_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_s(double t, double p):
    result = AGCL2_n_dew2019_s(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_v(double t, double p):
    result = AGCL2_n_dew2019_v(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_cv(double t, double p):
    result = AGCL2_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_cp(double t, double p):
    result = AGCL2_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_dcpdt(double t, double p):
    result = AGCL2_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_alpha(double t, double p):
    result = AGCL2_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_beta(double t, double p):
    result = AGCL2_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_K(double t, double p):
    result = AGCL2_n_dew2019_K(<double> t, <double> p)
    return result
def cy_AGCL2_n_dew2019_Kp(double t, double p):
    result = AGCL2_n_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AGCL_l_AQ_r__dew2019_calc.h":
    const char *AGCL_l_AQ_r__dew2019_identifier();
    const char *AGCL_l_AQ_r__dew2019_name();
    const char *AGCL_l_AQ_r__dew2019_formula();
    const double AGCL_l_AQ_r__dew2019_mw();
    const double *AGCL_l_AQ_r__dew2019_elements();
    double AGCL_l_AQ_r__dew2019_g(double t, double p)
    double AGCL_l_AQ_r__dew2019_dgdt(double t, double p)
    double AGCL_l_AQ_r__dew2019_dgdp(double t, double p)
    double AGCL_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double AGCL_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double AGCL_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double AGCL_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double AGCL_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double AGCL_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double AGCL_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double AGCL_l_AQ_r__dew2019_s(double t, double p)
    double AGCL_l_AQ_r__dew2019_v(double t, double p)
    double AGCL_l_AQ_r__dew2019_cv(double t, double p)
    double AGCL_l_AQ_r__dew2019_cp(double t, double p)
    double AGCL_l_AQ_r__dew2019_dcpdt(double t, double p)
    double AGCL_l_AQ_r__dew2019_alpha(double t, double p)
    double AGCL_l_AQ_r__dew2019_beta(double t, double p)
    double AGCL_l_AQ_r__dew2019_K(double t, double p)
    double AGCL_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AGCL_l_AQ_r__dew2019_identifier():
    result = <bytes> AGCL_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_AGCL_l_AQ_r__dew2019_name():
    result = <bytes> AGCL_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_AGCL_l_AQ_r__dew2019_formula():
    result = <bytes> AGCL_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_AGCL_l_AQ_r__dew2019_mw():
    result = AGCL_l_AQ_r__dew2019_mw()
    return result
def cy_AGCL_l_AQ_r__dew2019_elements():
    cdef const double *e = AGCL_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AGCL_l_AQ_r__dew2019_g(double t, double p):
    result = AGCL_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_dgdt(double t, double p):
    result = AGCL_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_dgdp(double t, double p):
    result = AGCL_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = AGCL_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = AGCL_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = AGCL_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = AGCL_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = AGCL_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = AGCL_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = AGCL_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_s(double t, double p):
    result = AGCL_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_v(double t, double p):
    result = AGCL_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_cv(double t, double p):
    result = AGCL_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_cp(double t, double p):
    result = AGCL_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = AGCL_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_alpha(double t, double p):
    result = AGCL_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_beta(double t, double p):
    result = AGCL_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_K(double t, double p):
    result = AGCL_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_AGCL_l_AQ_r__dew2019_Kp(double t, double p):
    result = AGCL_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "AG_p_dew2019_calc.h":
    const char *AG_p_dew2019_identifier();
    const char *AG_p_dew2019_name();
    const char *AG_p_dew2019_formula();
    const double AG_p_dew2019_mw();
    const double *AG_p_dew2019_elements();
    double AG_p_dew2019_g(double t, double p)
    double AG_p_dew2019_dgdt(double t, double p)
    double AG_p_dew2019_dgdp(double t, double p)
    double AG_p_dew2019_d2gdt2(double t, double p)
    double AG_p_dew2019_d2gdtdp(double t, double p)
    double AG_p_dew2019_d2gdp2(double t, double p)
    double AG_p_dew2019_d3gdt3(double t, double p)
    double AG_p_dew2019_d3gdt2dp(double t, double p)
    double AG_p_dew2019_d3gdtdp2(double t, double p)
    double AG_p_dew2019_d3gdp3(double t, double p)
    double AG_p_dew2019_s(double t, double p)
    double AG_p_dew2019_v(double t, double p)
    double AG_p_dew2019_cv(double t, double p)
    double AG_p_dew2019_cp(double t, double p)
    double AG_p_dew2019_dcpdt(double t, double p)
    double AG_p_dew2019_alpha(double t, double p)
    double AG_p_dew2019_beta(double t, double p)
    double AG_p_dew2019_K(double t, double p)
    double AG_p_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_AG_p_dew2019_identifier():
    result = <bytes> AG_p_dew2019_identifier()
    return result.decode('UTF-8')
def cy_AG_p_dew2019_name():
    result = <bytes> AG_p_dew2019_name()
    return result.decode('UTF-8')
def cy_AG_p_dew2019_formula():
    result = <bytes> AG_p_dew2019_formula()
    return result.decode('UTF-8')
def cy_AG_p_dew2019_mw():
    result = AG_p_dew2019_mw()
    return result
def cy_AG_p_dew2019_elements():
    cdef const double *e = AG_p_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_AG_p_dew2019_g(double t, double p):
    result = AG_p_dew2019_g(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_dgdt(double t, double p):
    result = AG_p_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_dgdp(double t, double p):
    result = AG_p_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_d2gdt2(double t, double p):
    result = AG_p_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_d2gdtdp(double t, double p):
    result = AG_p_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_d2gdp2(double t, double p):
    result = AG_p_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_d3gdt3(double t, double p):
    result = AG_p_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_d3gdt2dp(double t, double p):
    result = AG_p_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_d3gdtdp2(double t, double p):
    result = AG_p_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_d3gdp3(double t, double p):
    result = AG_p_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_s(double t, double p):
    result = AG_p_dew2019_s(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_v(double t, double p):
    result = AG_p_dew2019_v(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_cv(double t, double p):
    result = AG_p_dew2019_cv(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_cp(double t, double p):
    result = AG_p_dew2019_cp(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_dcpdt(double t, double p):
    result = AG_p_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_alpha(double t, double p):
    result = AG_p_dew2019_alpha(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_beta(double t, double p):
    result = AG_p_dew2019_beta(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_K(double t, double p):
    result = AG_p_dew2019_K(<double> t, <double> p)
    return result
def cy_AG_p_dew2019_Kp(double t, double p):
    result = AG_p_dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CH3COOH_l_AQ_r__dew2019_calc.h":
    const char *CH3COOH_l_AQ_r__dew2019_identifier();
    const char *CH3COOH_l_AQ_r__dew2019_name();
    const char *CH3COOH_l_AQ_r__dew2019_formula();
    const double CH3COOH_l_AQ_r__dew2019_mw();
    const double *CH3COOH_l_AQ_r__dew2019_elements();
    double CH3COOH_l_AQ_r__dew2019_g(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_dgdt(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_dgdp(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_d2gdt2(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_d2gdtdp(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_d2gdp2(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_d3gdt3(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_d3gdp3(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_s(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_v(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_cv(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_cp(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_dcpdt(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_alpha(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_beta(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_K(double t, double p)
    double CH3COOH_l_AQ_r__dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CH3COOH_l_AQ_r__dew2019_identifier():
    result = <bytes> CH3COOH_l_AQ_r__dew2019_identifier()
    return result.decode('UTF-8')
def cy_CH3COOH_l_AQ_r__dew2019_name():
    result = <bytes> CH3COOH_l_AQ_r__dew2019_name()
    return result.decode('UTF-8')
def cy_CH3COOH_l_AQ_r__dew2019_formula():
    result = <bytes> CH3COOH_l_AQ_r__dew2019_formula()
    return result.decode('UTF-8')
def cy_CH3COOH_l_AQ_r__dew2019_mw():
    result = CH3COOH_l_AQ_r__dew2019_mw()
    return result
def cy_CH3COOH_l_AQ_r__dew2019_elements():
    cdef const double *e = CH3COOH_l_AQ_r__dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CH3COOH_l_AQ_r__dew2019_g(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_g(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_dgdt(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_dgdp(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_d2gdt2(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_d2gdtdp(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_d2gdp2(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_d3gdt3(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_d3gdt2dp(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_d3gdtdp2(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_d3gdp3(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_s(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_s(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_v(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_v(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_cv(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_cv(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_cp(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_cp(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_dcpdt(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_alpha(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_alpha(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_beta(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_beta(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_K(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_K(<double> t, <double> p)
    return result
def cy_CH3COOH_l_AQ_r__dew2019_Kp(double t, double p):
    result = CH3COOH_l_AQ_r__dew2019_Kp(<double> t, <double> p)
    return result
import numpy as np
cimport numpy as cnp # cimport gives us access to NumPy's C API

# here we just replicate the function signature from the header
cdef extern from "CH3COO_n_dew2019_calc.h":
    const char *CH3COO_n_dew2019_identifier();
    const char *CH3COO_n_dew2019_name();
    const char *CH3COO_n_dew2019_formula();
    const double CH3COO_n_dew2019_mw();
    const double *CH3COO_n_dew2019_elements();
    double CH3COO_n_dew2019_g(double t, double p)
    double CH3COO_n_dew2019_dgdt(double t, double p)
    double CH3COO_n_dew2019_dgdp(double t, double p)
    double CH3COO_n_dew2019_d2gdt2(double t, double p)
    double CH3COO_n_dew2019_d2gdtdp(double t, double p)
    double CH3COO_n_dew2019_d2gdp2(double t, double p)
    double CH3COO_n_dew2019_d3gdt3(double t, double p)
    double CH3COO_n_dew2019_d3gdt2dp(double t, double p)
    double CH3COO_n_dew2019_d3gdtdp2(double t, double p)
    double CH3COO_n_dew2019_d3gdp3(double t, double p)
    double CH3COO_n_dew2019_s(double t, double p)
    double CH3COO_n_dew2019_v(double t, double p)
    double CH3COO_n_dew2019_cv(double t, double p)
    double CH3COO_n_dew2019_cp(double t, double p)
    double CH3COO_n_dew2019_dcpdt(double t, double p)
    double CH3COO_n_dew2019_alpha(double t, double p)
    double CH3COO_n_dew2019_beta(double t, double p)
    double CH3COO_n_dew2019_K(double t, double p)
    double CH3COO_n_dew2019_Kp(double t, double p)

# here is the "wrapper" signature
def cy_CH3COO_n_dew2019_identifier():
    result = <bytes> CH3COO_n_dew2019_identifier()
    return result.decode('UTF-8')
def cy_CH3COO_n_dew2019_name():
    result = <bytes> CH3COO_n_dew2019_name()
    return result.decode('UTF-8')
def cy_CH3COO_n_dew2019_formula():
    result = <bytes> CH3COO_n_dew2019_formula()
    return result.decode('UTF-8')
def cy_CH3COO_n_dew2019_mw():
    result = CH3COO_n_dew2019_mw()
    return result
def cy_CH3COO_n_dew2019_elements():
    cdef const double *e = CH3COO_n_dew2019_elements()
    np_array = np.zeros(106)
    for i in range(0,106):
        np_array[i] = e[i]
    return np_array
def cy_CH3COO_n_dew2019_g(double t, double p):
    result = CH3COO_n_dew2019_g(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_dgdt(double t, double p):
    result = CH3COO_n_dew2019_dgdt(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_dgdp(double t, double p):
    result = CH3COO_n_dew2019_dgdp(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_d2gdt2(double t, double p):
    result = CH3COO_n_dew2019_d2gdt2(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_d2gdtdp(double t, double p):
    result = CH3COO_n_dew2019_d2gdtdp(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_d2gdp2(double t, double p):
    result = CH3COO_n_dew2019_d2gdp2(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_d3gdt3(double t, double p):
    result = CH3COO_n_dew2019_d3gdt3(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_d3gdt2dp(double t, double p):
    result = CH3COO_n_dew2019_d3gdt2dp(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_d3gdtdp2(double t, double p):
    result = CH3COO_n_dew2019_d3gdtdp2(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_d3gdp3(double t, double p):
    result = CH3COO_n_dew2019_d3gdp3(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_s(double t, double p):
    result = CH3COO_n_dew2019_s(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_v(double t, double p):
    result = CH3COO_n_dew2019_v(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_cv(double t, double p):
    result = CH3COO_n_dew2019_cv(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_cp(double t, double p):
    result = CH3COO_n_dew2019_cp(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_dcpdt(double t, double p):
    result = CH3COO_n_dew2019_dcpdt(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_alpha(double t, double p):
    result = CH3COO_n_dew2019_alpha(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_beta(double t, double p):
    result = CH3COO_n_dew2019_beta(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_K(double t, double p):
    result = CH3COO_n_dew2019_K(<double> t, <double> p)
    return result
def cy_CH3COO_n_dew2019_Kp(double t, double p):
    result = CH3COO_n_dew2019_Kp(<double> t, <double> p)
    return result
